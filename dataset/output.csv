schema,sql_query,natural_language_query
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001; ,"""Retrieve all information about all employees from the employee database."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001; ",Retrieve the first and last names of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle FROM employee_1001 WHERE Department = 'Sales'; ",Retrieve the job titles of employees who work in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001; ","""Count the total number of employees in the employee database."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT Department FROM employee_1001; ","""List all the unique departments that employees work in."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT EmployeeID, Salary FROM employee_1001 WHERE Salary > 50000; ","""Retrieve the Employee ID and salary of employees who earn more than 50,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE HireDate > '2020-01-01'; ","Find the first names, last names, and hire dates of employees who were hired after January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName || ' ' || LastName AS FullName FROM employee_1001; ",Retrieve the full names of all employees by combining their first and last names.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE JobTitle = 'Manager'; ",Retrieve all information about employees who hold the job title of 'Manager.'
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT EmployeeID, Department FROM employee_1001 ORDER BY Department; ","Retrieve the IDs and departments of all employees, and organize the results by department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Department = 'HR'; ","Retrieve the first names, last names, and salaries of employees who work in the HR department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName FROM employee_1001 WHERE LastName LIKE 'S%'; ",Find the first names of employees whose last names start with the letter 'S'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(EmployeeID) FROM employee_1001 WHERE Department = 'Finance'; ",Count the number of employees who work in the Finance department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary < 40000; ","Find the first and last names of employees who have a salary less than 40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE HireDate BETWEEN '2015-01-01' AND '2020-01-01'; ","""Retrieve all information about employees who were hired between January 1, 2015, and January 1, 2020."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) FROM employee_1001 GROUP BY Department; ",Calculate the average salary for each department in the company.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE FirstName IS NOT NULL; ",Retrieve the first and last names of employees who have a first name listed.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT EmployeeID FROM employee_1001 ORDER BY HireDate DESC LIMIT 5; ","Retrieve the Employee IDs of the five most recently hired employees, ordered by their hire dates from newest to oldest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(DISTINCT JobTitle) FROM employee_1001; ","""Count the number of unique job titles held by employees in the company."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Salary FROM employee_1001 WHERE Department = 'IT' AND Salary > 60000; ","Find the salaries of employees who work in the IT department and earn more than 60,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Department IS NULL;",Retrieve the first and last names of employees who do not belong to any department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001,"""Retrieve all information about every employee, including their names, job titles, departments, salaries, and hire dates."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001",Retrieve the first and last names of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, Department FROM employee_1001 WHERE Salary > 60000","""List the job titles and departments of employees who earn more than 60,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Department = 'Sales',"""Retrieve all the information about employees who work in the Sales department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE HireDate > '2020-01-01'","Find the first names, last names, and salaries of employees who were hired after January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE Department = 'HR',Count the number of employees who work in the HR department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001,List all the unique departments that employees work in.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC","Retrieve the first names, last names, and salaries of all employees, and sort the results by salary from highest to lowest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%'","""Find the first and last names of employees whose job title includes the word 'Manager'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT AVG(Salary) FROM employee_1001 GROUP BY Department,"Calculate the average salary of employees, grouping the results by department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2020-12-31'","Retrieve the first and last names of employees who were hired between January 1, 2019, and December 31, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) FROM employee_1001 GROUP BY JobTitle","""Count the number of employees for each job title."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Salary < 40000,"Retrieve all information about employees whose salary is less than 40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate ASC",Retrieve the first and last names of all employees and arrange them in order of their hire dates from the earliest to the latest.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001 WHERE Department = 'IT',Retrieve a list of unique job titles for employees who work in the IT department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(EmployeeID) FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001),Count the number of employees whose salary is higher than the average salary of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Department FROM employee_1001 WHERE Department IS NOT NULL","Retrieve the first names, last names, and departments of employees who have a department listed."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT SUM(Salary) FROM employee_1001 WHERE Department = 'Finance',Calculate the total salary paid to employees in the Finance department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE LENGTH(FirstName) > 5",Find the first and last names of employees whose first name has more than five characters.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE JobTitle = 'Analyst' OR JobTitle = 'Developer',Count how many employees have the job title of either Analyst or Developer.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 5",Identify the departments that have more than five employees and count how many employees are in each of those departments.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY JobTitle ORDER BY AverageSalary DESC","Calculate the average salary for each job title among employees and list the job titles with their average salaries, starting from the highest average salary down to the lowest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate > '2020-01-01' ORDER BY HireDate ASC","""List the first and last names of employees who were hired after January 1, 2020, and arrange them by their hire date in ascending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department",Calculate the total salary for each department in the company.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001) ORDER BY Salary DESC","Find the first and last names of employees along with their salaries who earn more than the average salary of all employees, and list them in descending order by salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING EmployeeCount > 2","""Identify the job titles of employees and count how many people hold each job title, but only include those job titles that have more than two employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE Department = 'Engineering' ORDER BY HireDate DESC","Retrieve the first names, last names, and hire dates of employees who work in the Engineering department, and sort the results by the hire dates from most recent to oldest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MAX(Salary) as MaxSalary FROM employee_1001 GROUP BY Department",Identify the highest salary in each department of employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%'",Find the first and last names of employees who have 'Manager' in their job title.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS CountByTitle FROM employee_1001 GROUP BY JobTitle ORDER BY CountByTitle ASC",Count the number of employees in each job title and list them in ascending order based on the count.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2018-01-01' AND '2022-12-31'","Find the first and last names of employees who were hired between January 1, 2018, and December 31, 2022."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MIN(Salary) AS MinimumSalary FROM employee_1001 GROUP BY Department HAVING MinimumSalary < 40000","List the departments along with the lowest salary in each department, but only include those departments where the lowest salary is less than 40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 50000 AND 80000 ORDER BY Salary","List the first and last names of employees whose salaries are between 50,000 and 80,000, and arrange the results by salary from lowest to highest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) AS TotalEmployees FROM employee_1001 WHERE Department = 'Sales',"""Count the total number of employees who work in the Sales department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001,List all the different job titles of employees without any duplicates.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department ORDER BY EmployeeCount DESC","""Count the number of employees in each department and list the departments in order from the most employees to the least."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > 70000 AND Department = 'HR' ORDER BY Salary DESC","Find the first and last names of employees in the HR department who earn more than 70,000, and list them in order from the highest salary to the lowest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT MAX(Salary) AS HighestSalary, Department FROM employee_1001 GROUP BY Department",Find the highest salary in each department and the corresponding department name.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE EXTRACT(YEAR FROM HireDate) = 2023",Find the first and last names of employees who were hired in the year 2023.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY JobTitle HAVING NumberOfEmployees > 5","Count how many employees work in each job title, and only show the job titles that have more than five employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department HAVING AVG(Salary) > 60000 ","""Calculate the average salary for each department and list only those departments where the average salary is greater than 60,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) AS NumberOfEmployees, JobTitle FROM employee_1001 GROUP BY JobTitle ORDER BY NumberOfEmployees DESC ",Count the number of employees in each job title and list the job titles in order from the most to the least employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate >= '2021-01-01' ORDER BY HireDate ASC ","""List the first and last names of employees who were hired on or after January 1, 2021, and arrange the results in the order they were hired."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 WHERE Salary > 50000 GROUP BY JobTitle HAVING COUNT(*) > 5 ","Identify the job titles of employees who earn more than 50,000 and count how many employees hold each job title, but only include job titles that have more than 5 employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE Department = 'IT' AND Salary > (SELECT AVG(Salary) FROM employee_1001 WHERE Department = 'IT') ",Retrieve all details of employees who work in the IT department and have a salary that is higher than the average salary of other employees in the IT department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Department FROM employee_1001 WHERE Department IN ('HR', 'Finance') ORDER BY LastName ","Retrieve the first and last names of employees who work in the HR or Finance departments, and list them in order by their last names."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, SUM(Salary) AS TotalSalaries FROM employee_1001 GROUP BY Department ORDER BY TotalSalaries DESC ",Calculate the total salaries for each department and list them in order from highest to lowest total salary.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT JobTitle FROM employee_1001 WHERE Salary > 70000 ","Find the unique job titles of employees who earn more than 70,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM employee_1001 GROUP BY JobTitle HAVING MAX(Salary) > 90000 ","Find the job titles of employees along with the minimum and maximum salaries for each job title, but only include those job titles where the maximum salary is greater than 90,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE FirstName LIKE 'A%' ",Retrieve the first and last names of employees whose first name starts with the letter 'A'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE HireDate BETWEEN '2020-01-01' AND '2020-12-31' ","""Count how many employees were hired in the year 2020."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY Department ORDER BY NumberOfEmployees ASC ","""Count the number of employees in each department and list the departments in order from the least to the most employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT AVG(Salary) FROM employee_1001 WHERE HireDate < '2015-01-01' ","Calculate the average salary of employees who were hired before January 1, 2015."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001) ORDER BY Salary DESC ","Retrieve the first and last names of employees along with their salaries, but only for those who earn more than the average salary of all employees, and list these results starting with the highest salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle ORDER BY EmployeeCount DESC LIMIT 3 ","""Identify the top three job titles with the highest number of employees and count how many employees hold each of those job titles."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName || ' ' || LastName AS FullName FROM employee_1001 WHERE Department = 'Engineering' ","""Retrieve the full names of employees who work in the Engineering department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE Salary < ALL (SELECT Salary FROM employee_1001 WHERE Department = 'Marketing') ",Find all employees whose salaries are lower than every employee in the Marketing department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(DISTINCT JobTitle) AS UniqueJobTitles FROM employee_1001 GROUP BY Department ","""Count the number of unique job titles for each department in the employee records."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, DATEDIFF(CURRENT_DATE, HireDate) AS DaysSinceHired FROM employee_1001 ORDER BY DaysSinceHired DESC ","Retrieve the first and last names of employees along with the number of days since they were hired, and sort the results to show the most recently hired employees first."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 10 ","""Count the number of employees in each department and list the departments that have more than 10 employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Retrieve the first and last names of employees who work in the 'Sales' department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","```sql
SELECT e1.FirstName, e1.LastName, e1.JobTitle FROM employee_1001 e1 WHERE e1.Salary > (SELECT AVG(Salary) FROM employee_1001);

SELECT e2.Department, SUM(e2.Salary) as TotalSalary FROM employee_1001 e2 GROUP BY e2.Department HAVING SUM(e2.Salary) > 100000;

SELECT e3.FirstName, e3.LastName FROM employee_1001 e3 WHERE e3.HireDate < (SELECT MAX(HireDate) FROM employee_1001 WHERE Department = 'HR');

SELECT e4.Department, COUNT(*) FROM employee_1001 e4 WHERE e4.Salary > (SELECT AVG(Salary) FROM employee_1001) GROUP BY e4.Department;

SELECT e5.JobTitle, AVG(e5.Salary) as AvgSalary FROM employee_1001 e5 GROUP BY e5.JobTitle ORDER BY AvgSalary DESC;

SELECT e6.FirstName, e6.LastName, e6.Salary FROM employee_1001 e6 WHERE e6.Salary > (SELECT MAX(Salary) FROM employee_1001 WHERE JobTitle = 'Manager');

SELECT e7.Department, COUNT(DISTINCT e7.JobTitle) AS UniqueJobTitles FROM employee_1001 e7 GROUP BY e7.Department HAVING COUNT(DISTINCT e7.JobTitle) > 5;

SELECT e8.FirstName, e8.LastName FROM employee_1001 e8 WHERE e8.FirstName LIKE 'A%' AND NOT EXISTS (SELECT * FROM employee_1001 WHERE JobTitle = 'Intern' AND Department = e8.Department);

SELECT e9.Department, MIN(e9.Salary) as MinSalary, MAX(e9.Salary) as MaxSalary FROM employee_1001 e9 GROUP BY e9.Department HAVING MIN(e9.Salary) > 30000;

SELECT e10.JobTitle, COUNT(*) as NumEmployees FROM employee_1001 e10 WHERE e10.HireDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY e10.JobTitle HAVING COUNT(*) > 3;

SELECT e11.LastName, e11.FirstName FROM employee_1001 e11 WHERE e11.Salary = (SELECT MAX(Salary) FROM employee_1001 WHERE Department = 'Finance');

SELECT e12.Department, COUNT(*) as TotalEmployees FROM employee_1001 e12 WHERE e12.HireDate >= '2021-01-01' GROUP BY e12.Department HAVING COUNT(*) < 10;

SELECT e13.FirstName, e13.LastName FROM employee_1001 e13 WHERE e13.JobTitle IN (SELECT DISTINCT JobTitle FROM employee_1001 WHERE Department = 'Engineering');

SELECT e14.JobTitle, COUNT(*) as EmployeeCount FROM employee_1001 e14 GROUP BY e14.JobTitle ORDER BY EmployeeCount DESC LIMIT 5;

SELECT e15.Department, AVG(e15.Salary) as AvgDeptSalary FROM employee_1001 e15 WHERE e15.HireDate < '2022-01-01' GROUP BY e15.Department HAVING AVG(e15.Salary) > 50000;

SELECT e16.FirstName, e16.LastName FROM employee_1001 e16 WHERE e16.HireDate = (SELECT MIN(HireDate) FROM employee_1001 WHERE Department = e16.Department);

SELECT e17.JobTitle, SUM(e17.Salary) FROM employee_1001 e17 GROUP BY e17.JobTitle HAVING SUM(e17.Salary) > (SELECT AVG(Salary) FROM employee_1001);

SELECT e18.FirstName, e18.LastName FROM employee_1001 e18 WHERE e18.EmployeeID NOT IN (SELECT EmployeeID FROM employee_1001 WHERE Salary < 40000);

SELECT e19.Department, COUNT(*) as EmployeeCount FROM employee_1001 e19	WHERE e19.Department IS NOT NULL GROUP BY e19.Department ORDER BY EmployeeCount DESC;

SELECT e20.FirstName, e20.LastName FROM employee_1001 e20 WHERE e20.EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE Department = 'IT' AND Salary > (SELECT AVG(Salary) FROM employee_1001));
```","1. ""List the first and last names, along with job titles of employees who earn more than the average salary.""

2. ""Show the departments and total salary for each department, but only include those where the total salary exceeds 100,000.""

3. ""Find the first and last names of employees who were hired before the most recent hire in the Human Resources department.""

4. ""Count how many employees in each department earn more than the average salary, and group the result by department.""

5. ""Calculate the average salary for each job title and order the results from highest to lowest average salary.""

6. ""Get the first and last names of employees whose salaries are higher than the highest salary of a Manager.""

7. ""Count the number of distinct job titles in each department, but only include departments with more than five unique job titles.""

8. ""Find the first and last names of employees whose names start with 'A' and do not belong to a department that has any interns.""

9. ""For each department, find the minimum and maximum salary, but only include departments where the minimum salary is above 30,000.""

10. ""Count how many employees were hired in each job title during the year 2020, but only include job titles that have more than three employees.""

11. ""Identify the first and last names of the employees with the highest salary in the Finance department.""

12. ""Count the total number of employees in each department that were hired after January 1st, 2021, but limit the result to departments with fewer than ten employees.""

13. ""List the first and last names of employees who hold job titles in the Engineering department.""

14. ""Show the top five job titles by employee count, sorting from the most popular to the least.""

15. ""Calculate the average salary of each department for employees hired before January 1st, 2022, but only include departments where the average salary is greater than 50,000.""

16. ""Find the first and last names of employees who were the first to be hired in their respective departments.""

17. ""Sum the salaries for each job title and include only those job titles where the total salary is greater than the average salary.""

18. ""Get the first and last names of employees who earn at least 40,000, excluding those who earn less.""

19. ""Count how many employees are in each department, making sure to ignore any departments with no employees, and order the departments by employee count.""

20. ""Find the first and last names of employees in the IT department who earn more than the average salary for all employees."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002; ,"Retrieve all records from the attendance table, including all details of check-in and check-out times, employee statuses, and their corresponding employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, EmployeeID FROM attendance_1002; ",Retrieve the attendance records by listing the AttendanceID and EmployeeID for all entries in the attendance table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE Status = 'Present'; ",Retrieve the check-in and check-out times of employees who were marked as present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Absent'; ",Count the number of employees marked as absent in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM attendance_1002; ",Retrieve the unique Employee IDs from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE CheckInTime > '2023-01-01 08:00:00'; ","Find the Employee IDs and their check-in times for employees who checked in after January 1, 2023, at 8:00 AM."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE CheckOutTime IS NOT NULL; ",Retrieve all attendance records where employees have checked out.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Status FROM attendance_1002 WHERE AttendanceID = 1; ",Retrieve the Employee ID and Status of the attendance record with an Attendance ID of 1.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) FROM attendance_1002 GROUP BY Status; ","""Count how many employees have each attendance status recorded in the attendance table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MIN(CheckInTime), MAX(CheckOutTime) FROM attendance_1002; ",Retrieve the earliest check-in time and the latest check-out time from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC; ","Retrieve the list of employee IDs along with their check-in times, showing the most recent check-ins first."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID FROM attendance_1002 WHERE EmployeeID = 5 AND CheckInTime > '2023-01-01'; ","Retrieve the AttendanceID for the employee with an EmployeeID of 5 who checked in after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) FROM attendance_1002 WHERE Status = 'Present'; ",Count the number of unique employees who were marked as present in attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE CheckOutTime < '2023-06-01 17:00:00'; ","Retrieve the attendance records for employees where the checkout time is before June 1, 2023, at 5:00 PM, including their attendance IDs and employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) > 5; ",Identify employees who have checked in more than five times in total.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE Status IS NOT NULL; ",Retrieve all records from the attendance records where the status is specified.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Status FROM attendance_1002; ","""List all the unique attendance statuses recorded in the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31'; ",Count the total number of attendance records for the year 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID FROM attendance_1002 WHERE CheckInTime = (SELECT MIN(CheckInTime) FROM attendance_1002); ",Find the AttendanceID of the record with the earliest check-in time from the attendance list.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE EmployeeID IN (SELECT EmployeeID FROM attendance_1002 WHERE Status = 'Late');",Find all attendance records for employees who were marked as late.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002;,"Retrieve all records from the attendance data, including all details about employee check-in and check-out times, their attendance status, and associated employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE Status = 'Present';","""Retrieve the IDs and check-in times of employees who are currently marked as present."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 101;",Retrieve the check-in and check-out times for the employee with the ID 101.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Status FROM attendance_1002;,Retrieve all the different attendance statuses recorded in the attendance database.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Absent';,Count the number of employees who were marked as absent.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID;",Count the total number of attendance records for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC;","Retrieve the employee IDs and their check-in times from the attendance records, and list them in order from the most recent check-in to the oldest."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID;",Count how many times each employee was late by looking at their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31';,"Retrieve all attendance records for the year 2023, including check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckOutTime) AS LastCheckOut FROM attendance_1002 GROUP BY EmployeeID;",Find the latest check-out time for each employee based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE Status = 'On Leave';",Retrieve the Employee IDs and Check-In times for employees who are currently on leave.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, e.FirstName, e.LastName FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID;",Retrieve the Employee IDs along with the first and last names of employees who have recorded attendance.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average duration of time employees spend at work by subtracting their check-in times from their check-out times, and group the results by each employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT * FROM attendance_1002 WHERE Status IN ('Present', 'Late');",Retrieve all records of employee attendance where the status is either 'Present' or 'Late'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM attendance_1002 WHERE CheckInTime IS NOT NULL GROUP BY EmployeeID;","Count how many times each employee has checked in, making sure to only include those check-ins that actually happened."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 102 AND Status = 'Present';",Retrieve the check-in and check-out times for the employee with ID 102 who is currently marked as present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) FROM attendance_1002 GROUP BY Status;",Count the number of attendance records for each status and group the results by status.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckOutTime IS NOT NULL;,Identify the unique Employee IDs of those employees who have checked out.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE CheckInTime > '2023-05-01' ORDER BY CheckInTime;","""Retrieve the employee IDs and their check-in times for everyone who checked in after May 1, 2023, and list them in the order of their check-in times."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE EmployeeID = 103 AND Status = 'Absent';,Count the number of times employee number 103 was marked as absent.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalAttendance FROM attendance_1002 GROUP BY EmployeeID;","""Count the total number of attendance records for each employee."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average duration of time employees spend at work by finding the difference between their check-in and check-out times, and group the results by each employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS CountStatus FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5;",Count the number of attendance records for each distinct status and show only those statuses that have more than five records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckInTime) AS FirstCheckIn FROM attendance_1002 GROUP BY EmployeeID;",Find the earliest check-in time for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckOutTime) AS LastCheckOut FROM attendance_1002 GROUP BY EmployeeID;","""List each employee's ID along with the latest time they checked out."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID;","""Count how many times each employee attended work during the year 2023, based on their check-in times."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, a.CheckInTime FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID WHERE e.Status = 'Active';",Retrieve the check-in times and employee IDs for all active employees.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(CASE WHEN Status = 'Late' THEN 1 ELSE 0 END) AS LateCount FROM attendance_1002 GROUP BY EmployeeID;",Count how many times each employee was late based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS NumberOfDaysAbsent FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID;",Count the number of days each employee was absent and list the Employee IDs along with their corresponding absence counts.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPresent FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID HAVING COUNT(*) > 10;","Identify the Employee IDs of those who were present at work more than 10 times, along with the total number of times each of them was present."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, EXTRACT(MONTH FROM CheckInTime) AS Month, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID, EXTRACT(MONTH FROM CheckInTime);","""Count how many times each employee checked in during each month."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Count FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' GROUP BY Status;","Count the number of employees for each attendance status, only including records of check-ins that occurred on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))) AS AverageDuration FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID;","Calculate the average time each employee spends at work for those who were present, by measuring the duration between their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID, e.Name ORDER BY AttendanceCount DESC;","List the Employee IDs and names of all employees, along with the total number of attendance records for each, and sort the results so that employees with the most attendance appear first."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID HAVING AttendanceCount = (SELECT MAX(AttendanceCount) FROM (SELECT COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID) AS Attendance);","Identify the EmployeeID of the employee who has the highest attendance count, along with the total number of times they attended, based on the attendance records."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS Absences FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID ORDER BY Absences DESC;","Count the number of absences for each employee and list them in order, showing the employee ID and the total absences, with the employees who have the most absences at the top of the list."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT A.EmployeeID, COUNT(*) AS TotalLate FROM attendance_1002 A WHERE A.Status = 'Late' AND A.CheckInTime BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY A.EmployeeID;","Count how many times each employee was late for work during the first half of 2023, specifically between January 1 and June 30, and list their employee IDs along with the total number of late occurrences."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime)) / 60) AS TotalMinutes FROM attendance_1002 GROUP BY EmployeeID;",Calculate the total minutes worked by each employee based on their check-in and check-out times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, COUNT(a.AttendanceID) AS TotalAttendance FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Name;","""Retrieve the names of employees along with the total number of days they were marked as 'Present' in the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) > 10 ","Count the number of times each employee has checked in and checked out, and show only those employees who have attended more than 10 times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID ","Calculate the average duration of time each employee spends at work by finding the difference between their check-out and check-in times, and group the results by each employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT Status, COUNT(*) AS StatusCount FROM attendance_1002 GROUP BY Status ","""Count how many times each attendance status is recorded."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, MIN(CheckInTime) AS FirstCheckIn FROM attendance_1002 GROUP BY EmployeeID ",Retrieve the earliest check-in time for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, SUM(CASE WHEN Status = 'Late' THEN 1 ELSE 0 END) AS LateCount FROM attendance_1002 GROUP BY EmployeeID ",Count how many times each employee was late by checking their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckInTime >= '2023-01-01 00:00:00' ,"Retrieve the unique Employee IDs of employees who checked in to work on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 ORDER BY CheckInTime DESC ","Retrieve the employee IDs along with their check-in and check-out times from the attendance records, and arrange the results starting with the most recent check-in time."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Name, a.Status FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' ","""Retrieve the Employee ID and names of employees who were marked as present in the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS AttendanceDays FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID HAVING COUNT(*) >= 5 ",Identify the Employee IDs of those employees who have been absent for five or more days.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, (CheckOutTime - CheckInTime) AS WorkDuration FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' ","Retrieve the Employee IDs and calculate the duration of their work for all employees who checked in on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS MissedCheckOut FROM attendance_1002 WHERE CheckOutTime IS NULL GROUP BY EmployeeID ",Find the number of times each employee has not checked out by looking for employees who are missing their checkout times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT EmployeeID FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY EmployeeID ,"Retrieve the list of unique Employee IDs for those employees who checked in between January 1, 2023, and January 31, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(DISTINCT DATE(CheckInTime)) AS UniqueCheckInDays FROM attendance_1002 GROUP BY EmployeeID ","""Count the number of unique days each employee checked in to work."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, SUM(CASE WHEN Status = 'Present' THEN 1 ELSE 0 END) AS PresentDays FROM attendance_1002 GROUP BY EmployeeID ",Calculate the total number of days each employee was present by grouping the records based on employee IDs and counting the days where their status is 'Present'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, MAX(CheckInTime) AS LastCheckIn FROM attendance_1002 GROUP BY EmployeeID HAVING MAX(CheckInTime) < '2023-01-15' ","Find the Employee IDs of employees who had their latest check-in time before January 15, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(CASE WHEN Status = 'Late' THEN 1 END) AS LateCount FROM attendance_1002 GROUP BY EmployeeID ",Count the number of times each employee was late based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT DISTINCT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status IS NULL ",Identify the unique Employee IDs and names of employees who do not have an attendance record.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, DATE(CheckInTime) AS CheckInDate, COUNT(*) AS DailyCount FROM attendance_1002 GROUP BY EmployeeID, DATE(CheckInTime) ","""Count the number of times each employee checked in on each day, and provide the employee's ID along with the date of check-in."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))/3600) AS AvgWorkHours FROM attendance_1002 GROUP BY EmployeeID ",Calculate the average number of hours worked for each employee by comparing their check-in and check-out times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS TotalCount FROM attendance_1002 GROUP BY EmployeeID HAVING TotalCount > 20 ","Count how many times each employee has checked in, and only show the employees who have checked in more than 20 times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT a.EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID WHERE e.Name LIKE 'J%' GROUP BY a.EmployeeID ","Count how many times each employee named starting with 'J' has attended work, and show the EmployeeID along with that count."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(DISTINCT EmployeeID) FROM attendance_1002 WHERE Status = 'Present' AND CheckInTime BETWEEN '2023-01-01' AND '2023-01-31';,"Count the number of distinct employees who were present at work between January 1, 2023, and January 31, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.EmployeeID, e.Name HAVING AttendanceCount > 20 ","""List the employee IDs and names of those who have recorded more than 20 days of attendance as 'Present'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, AVG(strftime('%H', a.CheckOutTime) - strftime('%H', a.CheckInTime)) AS AverageHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime > '2023-01-01' GROUP BY e.Name ","""Retrieve the names of employees and calculate the average number of hours they worked each day based on their check-in and check-out times, for all attendance records after January 1, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime = (SELECT MAX(CheckInTime) FROM attendance_1002 WHERE EmployeeID = e.EmployeeID) ","""Retrieve the names of employees along with their most recent check-in times."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, COUNT(a.AttendanceID) AS AbsenceCount FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID AND a.Status = 'Absent' GROUP BY e.Name HAVING AbsenceCount > 5 ",Identify the names of employees who have been marked as absent more than five times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, e.Name, SUM(strftime('%H', a.CheckOutTime) - strftime('%H', a.CheckInTime)) AS TotalWorkedHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department, e.Name HAVING TotalWorkedHours > 40 ","""Find the names of employees and their departments who have worked more than 40 hours in total, based on their check-in and check-out times."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT e.Name FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM attendance_1002 a WHERE a.EmployeeID = e.EmployeeID AND a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31') ,Find the names of employees who have not checked in at all during the year 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, MIN(a.CheckInTime) AS FirstCheckIn FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Name HAVING FirstCheckIn <= '2023-01-15' ","Find the names of employees who checked in for work for the first time on or before January 15, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, COUNT(*) AS LateCheckIns FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime > '09:00:00' GROUP BY e.Name HAVING LateCheckIns > 10 ","Identify the names of employees who have checked in late more than 10 times, specifically after 9:00 AM, and count how many times each employee has arrived late."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, SUM(a.CheckOutTime - a.CheckInTime) AS TotalOvertime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Overtime' GROUP BY e.Name ","Calculate the total overtime hours for each employee by finding the time difference between their check-in and check-out times when their attendance status is marked as 'Overtime', and list the names of those employees along with their total overtime hours."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, COUNT(DISTINCT a.EmployeeID) AS EmployeesNotPresent FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Absent' AND a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.Department ","Count the number of distinct employees who were absent during the year 2023, grouped by their department."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, MAX(a.CheckOutTime) AS LastCheckOut FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Name HAVING LastCheckOut < '17:00:00' ",Identify the names of employees who checked out of work after their last recorded time was before 5:00 PM.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT e.Name FROM employee_1001 e WHERE e.EmployeeID IN (SELECT a.EmployeeID FROM attendance_1002 a WHERE a.Status = 'Absent' GROUP BY a.EmployeeID HAVING COUNT(*) > 3) ,Find the names of employees who have been marked as absent more than three times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckOutTime IS NOT NULL AND a.CheckInTime < a.CheckOutTime ",Retrieve the names and check-in times of employees who have checked out and have a valid check-in time that is earlier than their check-out time.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, a.CheckInTime, a.CheckOutTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE DATE(a.CheckOutTime) = '2023-09-15' AND a.Status = 'Present' ","Retrieve the names of employees, along with their check-in and check-out times, for those who were present on September 15, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, COUNT(*) AS TotalAttendance FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.Name HAVING TotalAttendance < 15 ","""List the names of employees who checked in to work less than 15 times during the year 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, AVG(strftime('%H', a.CheckOutTime) - strftime('%H', a.CheckInTime)) AS AverageHoursWorked FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department ","Calculate the average number of hours worked by employees, grouped by their department, using their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, COUNT(DISTINCT DATE(a.CheckInTime)) AS DaysWorked FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Name HAVING DaysWorked > 10 ","""Select the names of employees who have worked more than 10 different days, counting only the days they were marked as present."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime < '2023-09-01' GROUP BY e.Name HAVING COUNT(a.AttendanceID) > 15 ,"Identify the names of employees who checked in to work more than 15 times before September 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, MAX(a.CheckInTime) AS LatestCheckIn FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Name HAVING LatestCheckIn >= '2023-12-01';","Find the names of employees who checked in after December 1, 2023, along with the most recent time they checked in."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003;,"Retrieve all records of employee salary information, including their base salary, bonus, commission, and payment dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003;",Retrieve the employee IDs and their base salaries from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus FROM salary_1003 WHERE BaseSalary > 50000;","""Retrieve the base salary and bonus of employees whose base salary is greater than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC;","Retrieve the Salary IDs and payment dates from the salary records, sorted by the payment date from newest to oldest."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003;,Retrieve a list of unique employee IDs from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003;,Calculate the total amount of base salaries for all employees from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(Bonus) AS AverageBonus FROM salary_1003;,Calculate the average bonus that employees receive from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM salary_1003 GROUP BY EmployeeID;","""Count how many salary records there are for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31';,"Retrieve all salary records for payments made between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + Bonus + Commission AS TotalCompensation FROM salary_1003;","Retrieve the Employee IDs and calculate the total compensation for each employee by adding their base salary, bonus, and commission from the salary records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SalaryID FROM salary_1003 WHERE Bonus IS NULL;,Find the SalaryID of all entries where the bonus is not provided.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) FROM salary_1003 GROUP BY EmployeeID;","""Retrieve the highest base salary for each employee from the salary records."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003 WHERE Commission > 0;,Count the number of records in the salary table where employees have received a commission greater than zero.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(BaseSalary) AS MinimumSalary FROM salary_1003 GROUP BY EmployeeID;","""Find the minimum base salary for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID FROM salary_1003 WHERE BaseSalary < 40000;","Find the salary IDs and employee IDs of employees whose base salary is less than 40,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE EmployeeID = 1;,Retrieve all salary records for the employee with the ID of 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, PaymentDate FROM salary_1003 ORDER BY BaseSalary ASC;","List the base salaries and payment dates of all employees, arranged from the lowest salary to the highest."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) AS SalaryCount FROM salary_1003 WHERE SalaryID IS NOT NULL;,Count the total number of salary records that exist in the salary table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, (Bonus + Commission) AS AdditionalIncome FROM salary_1003;","Retrieve the salary IDs and the total additional income, which is the sum of bonuses and commissions, for all entries in the salary records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PaymentDate FROM salary_1003;,Retrieve a list of unique payment dates from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(Commission) AS TotalCommission FROM salary_1003;,Calculate the total amount of commission earned by all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003; ,"""Retrieve all records from the salary table, including details such as salary ID, employee ID, base salary, bonus, commission, and payment date for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT BaseSalary, Bonus FROM salary_1003 WHERE EmployeeID = 1; ",Retrieve the base salary and bonus for the employee with an ID of 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, BaseSalary + Bonus + Commission AS TotalCompensation FROM salary_1003; ","Calculate the total compensation for each employee by adding their base salary, bonus, and commission."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(*) FROM salary_1003; ,"""Count the total number of salary records in the database."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT DISTINCT EmployeeID FROM salary_1003; ,"""Retrieve a list of unique employee IDs from the salary records."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT PaymentDate FROM salary_1003 WHERE BaseSalary > 50000; ,"""Find the payment dates for employees who have a base salary greater than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, BaseSalary FROM salary_1003 ORDER BY BaseSalary DESC; ","Retrieve the Employee IDs and their corresponding base salaries from the salary records, and list them in order from the highest base salary to the lowest."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT EmployeeID FROM salary_1003 WHERE Bonus IS NOT NULL; ,Find the IDs of employees who have received a bonus.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT AVG(BaseSalary) FROM salary_1003; ,Calculate the average base salary of all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID; ",Calculate the total base salary for each employee by adding up the base salaries recorded in the salary database.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, BaseSalary FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31'; ",Retrieve the Employee IDs and Base Salaries of employees who received payments during the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT * FROM salary_1003 WHERE Commission > 0; ,Retrieve all records from the salary table for employees who have received a commission.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, MAX(BaseSalary) AS MaxSalary FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the highest base salary for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, BaseSalary + Bonus AS TotalEarnings FROM salary_1003 WHERE BaseSalary + Bonus > 60000; ","""Retrieve the Employee IDs and total earnings, which include both the base salary and bonus, for employees whose total earnings exceed 60,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT PaymentDate, COUNT(*) FROM salary_1003 GROUP BY PaymentDate; ","""Count how many salary payments were made on each payment date."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT EmployeeID FROM salary_1003 WHERE BaseSalary < 30000; ,"Find the employee IDs of those whose base salary is less than 30,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(Bonus) AS BonusCount FROM salary_1003 WHERE Bonus > 0 GROUP BY EmployeeID; ",Identify the number of bonus payments received by each employee who has received a bonus.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, BaseSalary, PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC; ","Retrieve the employee IDs, their base salaries, and the dates they were paid, and arrange the results starting from the most recent payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT SUM(BaseSalary) FROM salary_1003 WHERE PaymentDate < '2023-07-01'; ,"Calculate the total of all base salaries for employees that were paid before July 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, Commission FROM salary_1003 WHERE BaseSalary IS NOT NULL;",Retrieve the employee IDs and their commission amounts for employees who have a specified base salary.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID",Calculate the total base salary for each employee by adding up their base salaries from the records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPayments FROM salary_1003 GROUP BY EmployeeID HAVING TotalPayments > 5","""Count how many payments each employee has received and list the employees who have received more than five payments."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID ORDER BY AverageSalary DESC",Calculate the average base salary for each employee and list them in order from the highest average salary to the lowest.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Bonus) AS TotalBonus, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING SUM(Bonus) > 1000","Find the employee IDs along with their total bonuses and total commissions, but only include those employees whose total bonuses exceed 1,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31',"Calculate the total compensation, which includes the base salary, bonus, and commission, for all employees who received payments between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, e.EmployeeName FROM salary_1003 s JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID WHERE s.BaseSalary > 70000","Find the Employee IDs and names of employees who have a base salary greater than 70,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(s.BaseSalary) AS TotalSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalSalary DESC","""Retrieve the employee IDs and the total base salary for each employee, including those who may not have any recorded salary, and organize the results from the highest total salary to the lowest."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 GROUP BY EmployeeID HAVING PaymentCount > 3","Identify employees who have received more than three payments, and count how many payments each of these employees has received."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 WHERE PaymentDate > (SELECT MAX(PaymentDate) FROM salary_1003) - INTERVAL '1 YEAR' GROUP BY EmployeeID,Identify the employees who received a payment in the last year from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalBaseSalary BETWEEN 50000 AND 100000","Find the IDs of employees whose total base salary is between 50,000 and 100,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(CASE WHEN Bonus > 1000 THEN 1 END) AS HighBonusCount FROM salary_1003 GROUP BY EmployeeID","Count how many times each employee has received a bonus greater than 1,000, and group the results by each employee."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalEarnings FROM salary_1003 WHERE Commission < 500 GROUP BY EmployeeID","Calculate the total earnings, which includes both the base salary and bonus, for each employee who has a commission of less than 500."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(BaseSalary) AS MinSalary, MAX(BaseSalary) AS MaxSalary FROM salary_1003 GROUP BY EmployeeID",Find the minimum and maximum base salary for each employee.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, (SUM(BaseSalary) / COUNT(*)) AS AverageBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING AverageBaseSalary >= 60000","Calculate the average base salary for each employee and list those employees whose average base salary is at least 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, e.Department FROM salary_1003 s JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID GROUP BY s.EmployeeID, e.Department","Retrieve the employee IDs along with their corresponding department names by combining information from the salary records and the employee details, grouping the results by employee ID and department."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, SUM(s.Bonus) AS TotalBonus FROM salary_1003 s GROUP BY s.EmployeeID ORDER BY TotalBonus DESC",Calculate the total bonuses received by each employee and list them in order from highest to lowest total bonus.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.EmployeeName, COUNT(s.SalaryID) FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.EmployeeName HAVING COUNT(s.SalaryID) > 2",Identify the employee IDs and names of those who have received more than two salary payments.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SUM(Bonus) AS TotalBonuses, COUNT(EmployeeID) FROM salary_1003 WHERE PaymentDate > '2023-01-01' GROUP BY EmployeeID","Calculate the total bonuses and count the number of employees who received bonuses for payments made after January 1, 2023, and group the results by each employee."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE PaymentDate >= '2023-01-01' AND PaymentDate < '2024-01-01',"Count the number of distinct employees who received a payment between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM salary_1003),Identify the Employee IDs of employees who do not have any recorded salary information in the salary database.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID HAVING SUM(BaseSalary + Bonus + Commission) > 100000 ","""Identify the Employee IDs and total compensation for those employees whose combined salary, bonus, and commission exceeds 100,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, AVG(s.BaseSalary) AS AvgBaseSalary FROM salary_1003 s GROUP BY s.EmployeeID ORDER BY AvgBaseSalary DESC ",Calculate the average base salary for each employee and list the results in order from the highest average salary to the lowest.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.PaymentDate, COUNT(*) AS NumberOfPayments FROM salary_1003 s GROUP BY s.PaymentDate HAVING COUNT(*) > 5 ","Identify the payment dates when more than five payments were made, and count the number of payments for each of those dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, MAX(BaseSalary) AS MaxBaseSalary, MIN(BaseSalary) AS MinBaseSalary FROM salary_1003 GROUP BY EmployeeID ","""Retrieve the highest and lowest base salary for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, SUM(s.BaseSalary) AS TotalBaseSalary FROM salary_1003 s WHERE s.PaymentDate >= '2023-01-01' GROUP BY s.EmployeeID ","Identify each employee's ID and calculate the total base salary they received since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, COUNT(DISTINCT s.PaymentDate) AS PaymentCount FROM salary_1003 s WHERE s.Bonus IS NOT NULL GROUP BY s.EmployeeID ","Count how many different payment dates employees have received bonuses, and list the employee IDs along with the number of unique payment dates for each employee who has received a bonus."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Name, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name ORDER BY TotalBaseSalary DESC ","""Retrieve the employee IDs and names from the employee database, along with the total base salary for each employee, and organize the results in descending order based on the total base salary."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT AVG(s.Commission) AS AverageCommission FROM salary_1003 s WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' ,Calculate the average commission for all employees from the salary records where the payment date is within the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, SUM(COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalIncentives FROM salary_1003 s GROUP BY s.EmployeeID HAVING TotalIncentives > 20000 ","""Find the IDs of employees whose total incentives, including bonuses and commissions, are greater than 20,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, COUNT(s.SalaryID) AS PaymentOccurrences FROM salary_1003 s GROUP BY s.EmployeeID HAVING PaymentOccurrences < 3 ","Identify the employees who have received fewer than three salary payments, and count how many payments each employee has received."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.DepartmentID, COUNT(s.SalaryID) AS NumberOfSalaries FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.DepartmentID ORDER BY NumberOfSalaries DESC ","""Count the number of salary records for each department and list the departments by the total number of salaries in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Name, SUM(s.BaseSalary + s.Bonus) AS TotalEarnings FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Name HAVING TotalEarnings > 90000 ","Retrieve the names of employees whose total earnings, including both base salary and bonus, exceed 90,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, YEAR(s.PaymentDate) AS PaymentYear, SUM(s.BaseSalary) AS YearlySalary FROM salary_1003 s GROUP BY s.EmployeeID, YEAR(s.PaymentDate) ","""Retrieve the total annual base salary for each employee, grouped by employee ID and the year of the payment."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, s.PaymentDate, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalPayment FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, s.PaymentDate ","Retrieve the total payments made to each employee on specific payment dates by adding their base salary, bonus, and commission, and group the results by employee and payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 s WHERE s.PaymentDate < '2022-01-01' GROUP BY s.EmployeeID HAVING PaymentCount > 5 ","Identify employees who received payments before January 1, 2022, and count how many payments each of them received. Only include employees who received more than five payments."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Name, AVG(s.BaseSalary) AS AverageSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name ",Calculate the average base salary for each employee and list their employee IDs and names.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, SUM(COALESCE(Bonus, 0) + COALESCE(Commission, 0)) AS TotalIncentives FROM salary_1003 GROUP BY EmployeeID HAVING TotalIncentives > 50000 ","""Calculate the total incentives, which include bonuses and commissions, for each employee, and list only those employees whose total incentives exceed 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(SalaryID) AS TotalSalaries FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID ","Count the total number of salary records for each employee that were paid between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(DISTINCT PaymentDate) AS DistinctPaymentDates FROM salary_1003 GROUP BY EmployeeID HAVING DistinctPaymentDates > 3 ","Identify the employees who have received payments on more than three distinct dates, and count how many unique payment dates each of them has."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 WHERE PaymentDate > '2022-01-01' GROUP BY EmployeeID.freeze","Calculate the average base salary for each employee whose payment date is after January 1, 2022."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalCompensation > 100000 ","""Retrieve the employee IDs, first names, and last names of employees whose total compensation, including base salary, bonuses, and commissions, exceeds 100,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS PaymentCount FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING PaymentCount > 5 ",Identify the first and last names of employees who received more than five salary payments in the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, AVG(s.BaseSalary) AS AverageBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department ",Calculate the average base salary for employees in each department.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, (SELECT COUNT(*) FROM salary_1003 s2 WHERE s2.EmployeeID = e.EmployeeID AND s2.PaymentDate > '2023-01-01') AS RecentPayments FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM salary_1003 s3 WHERE s3.EmployeeID = e.EmployeeID AND s3.PaymentDate < '2023-01-01') ","Identify the employee IDs and count how many salary payments they have received since January 1, 2023, but only for those employees who have not received any salary payments before that date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS Compensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE Department = 'Sales') GROUP BY e.EmployeeID HAVING Compensation > 80000 ","Find the first and last names of employees in the Sales department whose total compensation, including their base salary, bonus, and commissions, is greater than 80,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT s.EmployeeID FROM salary_1003 s GROUP BY s.EmployeeID HAVING SUM(s.BaseSalary) > 50000) ","Find the first and last names of employees whose total base salary exceeds 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, SUM(s.BaseSalary) AS TotalSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.HireDate < '2020-01-01' GROUP BY e.EmployeeID HAVING TotalSalary > 60000 ","Find the Employee IDs and total salaries of employees who were hired before January 1, 2020, and whose total salary exceeds 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, COUNT(s.SalaryID) AS TotalPayments FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY TotalPayments DESC ","Retrieve the first names of employees along with the total number of salary payments they have received, only including those payments that have a recorded payment date. Sort the results by the total number of payments in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Department, SUM(s.BaseSalary + COALESCE(s.Bonus, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.Department IN (SELECT DISTINCT Department FROM employee_1001 WHERE EmployeeID > 1000) GROUP BY e.EmployeeID, e.Department ","Calculate the total compensation, including base salary and any bonuses, for each employee along with their department, but only for employees in departments that have IDs greater than 1000. Group the results by employee ID and department."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_1003 WHERE Commission IS NOT NULL) GROUP BY e.FirstName, e.LastName HAVING TotalCompensation > (SELECT AVG(BaseSalary) FROM salary_1003) ","Retrieve the first and last names of employees who have received a commission, along with their total compensation, which includes both their base salary and any bonus. Only include those employees whose total compensation is greater than the average base salary of all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, SUM(s.Commission) AS TotalCommission FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING TotalCommission IS NOT NULL ","""Retrieve the employee IDs and the total commission earned by each employee during the year 2023, only including those employees who have earned a commission."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.Department HAVING EmployeeCount > 5 ","Find the departments that have more than five employees who received payments starting from January 1, 2023, and count how many distinct employees are in each of those departments."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT s1.EmployeeID FROM salary_1003 s1 WHERE s1.SalaryID IN (SELECT MAX(s2.SalaryID) FROM salary_1003 s2 GROUP BY s2.EmployeeID) ,Find the Employee IDs of employees who have the highest salary record in the database.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT s.EmployeeID FROM salary_1003 s WHERE s.PaymentDate < '2023-01-01') ","Find the first and last names of employees who have received a salary payment on or after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName HAVING TotalBaseSalary > 70000 ","Find the first names of employees whose total base salary exceeds 70,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.FirstName, e.LastName, COALESCE(SUM(s.Commission), 0) AS TotalCommission FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING TotalCommission > 1000 ","Find the employee IDs, first names, and last names of employees who have earned more than 1,000 in commissions since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS FullCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= DATE('2023-01-01') GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING FullCompensation < 50000 ","Retrieve the employee ID, first name, last name, and total compensation, including base salary, bonus, and commission, for employees whose total compensation is less than 50,000, for payments made starting from January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, SUM(s.BaseSalary) AS TotalDepartmentSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING TotalDepartmentSalary > (SELECT AVG(BaseSalary) FROM salary_1003) ","Identify the departments of employees and calculate the total base salary for each department, but only include those departments where the total salary is greater than the average base salary across all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, e.HireDate, COUNT(s.SalaryID) FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName, e.LastName, e.HireDate HAVING COUNT(s.SalaryID) > 3 ORDER BY e.HireDate ","Retrieve the first names, last names, and hire dates of employees who have received more than three salary payments, and sort the results by their hire dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, COUNT(DISTINCT s.PaymentDate) AS PaymentFrequency FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING PaymentFrequency >= 5 ",Identify the Employee IDs of employees who have received salary payments on at least five different dates.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM salary_1003 s WHERE s.EmployeeID = e.EmployeeID AND s.PaymentDate >= '2023-01-01') AS PaymentCount FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE Department = 'Engineering') ","Retrieve the first and last names of employees who work in the Engineering department, along with the count of their salary payments made since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, COUNT(*) AS EmployeeCount FROM employee_1001 e WHERE EXISTS (SELECT 1 FROM salary_1003 s WHERE s.EmployeeID = e.EmployeeID) GROUP BY e.Department ","""Count the number of employees in each department who have a salary record."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, AVG(s.BaseSalary) AS AverageSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName HAVING AverageSalary > (SELECT AVG(BaseSalary) FROM salary_1003) ",Find the names of employees whose average base salary is higher than the overall average base salary across all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalBaseSalary > (SELECT SUM(BaseSalary) FROM salary_1003)/COUNT(*) ","Retrieve the IDs, first names, and last names of employees whose total base salary is greater than the average total base salary of all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(s.BaseSalary) - (SELECT AVG(BaseSalary) FROM salary_1003)) AS SalaryDifference FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SalaryDifference > 0 ","""List the Employee IDs, first names, and last names of employees whose total salary (including base salary) is higher than the average base salary, grouping the results by each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.Department, SUM(s.BaseSalary) AS TotalSalary FROM employee_1001 e INNER JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING TotalSalary > (SELECT AVG(BaseSalary) FROM salary_1003) ",Find the total base salary for each department and return only those departments where the total salary exceeds the average base salary across all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT s.EmployeeID, SUM(s.BaseSalary) FROM salary_1003 s WHERE s.PaymentDate > '2023-01-01' GROUP BY s.EmployeeID HAVING SUM(s.BaseSalary) >= (SELECT AVG(BaseSalary) FROM salary_1003) ","Identify the employee IDs of those who have accumulated a total base salary greater than or equal to the average base salary, specifically for payments made after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"Retrieve the salaries, bonuses, and commissions of employees along with the date of payment from the salary records."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004;,"""Retrieve all the contact information for every employee, including their phone numbers, email addresses, and physical addresses."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004;",Retrieve the phone numbers and email addresses of all employees.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Address FROM employee_contacts_1004 WHERE EmployeeID = 1;,"""Retrieve the address of the employee with the ID of 1."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, EmployeeID FROM employee_contacts_1004 WHERE PhoneNumber LIKE '%555%';","""Find the contact IDs and employee IDs of employees whose phone numbers contain the sequence '555'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM employee_contacts_1004;,Get a list of unique employee IDs from the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,"""Count the total number of contacts in the employee contacts database."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Email FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3);","Retrieve the email addresses of employees with the IDs 1, 2, and 3."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 WHERE Address IS NOT NULL;",Find the contact IDs and phone numbers of employees who have a specified address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 ORDER BY ContactID;,Retrieve all contact information for employees and arrange the list by their contact identification numbers.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;",Find the employee IDs and phone numbers of employees who have a phone number listed.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) AS TotalContacts FROM employee_contacts_1004 WHERE EmployeeID = 2;,Count the total number of contact entries for the employee with an Employee ID of 2.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Email, PhoneNumber FROM employee_contacts_1004 WHERE ContactID < 5;",Retrieve the email addresses and phone numbers of contacts for employees who have a ContactID less than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@gmail.com';,Find all employee contact details for those who have a Gmail email address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ContactID FROM employee_contacts_1004 WHERE EmployeeID = (SELECT EmployeeID FROM employee_contacts_1004 WHERE ContactID = 1);,Retrieve the contact ID of the employee who has the same employee ID as the contact ID that is equal to 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1;,Identify the Employee IDs of employees who have more than one contact entry in the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(ContactID) AS NumberOfContacts FROM employee_contacts_1004 GROUP BY EmployeeID;",Count the number of contact details for each employee.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 ORDER BY PhoneNumber DESC;,Retrieve the phone numbers of all employees and list them in descending order.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,"Retrieve a list of unique phone numbers from the employee contacts, making sure to exclude any empty entries."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE ContactID BETWEEN 1 AND 10;,Retrieve all contact details for employees whose ContactID numbers are between 1 and 10.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004 WHERE Address LIKE '%Street%';",Retrieve the phone numbers and email addresses of employees who live on a street.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004;,"""Retrieve all the contact information for every employee, including their phone numbers, email addresses, and home addresses."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004;",Retrieve the employee IDs along with their phone numbers from the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Email FROM employee_contacts_1004 WHERE EmployeeID = 1;,Retrieve the email address of the employee with the ID of 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Address FROM employee_contacts_1004 WHERE ContactID = 5;,Retrieve the address of the employee contact with the ID of 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM employee_contacts_1004;,Retrieve a list of unique Employee IDs from the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004 WHERE Address LIKE '%Street%';",Find the phone numbers and email addresses of employees who live on a street.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,Count the total number of contact entries in the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID = 2;",Retrieve the contact ID and phone number of the employee with the ID of 2.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,Retrieve all the contact information for employees who have a phone number listed.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID;",Count the number of contact records for each employee and list the employee IDs along with their contact counts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Email FROM employee_contacts_1004 ORDER BY Email;,Retrieve all email addresses from the employee contacts and arrange them in alphabetical order.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Address IS NOT NULL;,Retrieve all contact information for employees who have a listed address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3);","Retrieve the phone numbers of employees with the IDs 1, 2, and 3."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM employee_contacts_1004 WHERE PhoneNumber LIKE '555%';,Find the Employee IDs of employees whose phone numbers start with 555.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, Address FROM employee_contacts_1004 WHERE EmployeeID > 5;",Retrieve the contact IDs and addresses of employees whose ID numbers are greater than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 WHERE LENGTH(PhoneNumber) >= 10;,Retrieve the phone numbers of employees that have 10 or more digits.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ContactID FROM employee_contacts_1004 WHERE Email LIKE '%@example.com';,"""Retrieve the contact IDs of all employees whose email addresses end with '@example.com'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Address FROM employee_contacts_1004 WHERE EmployeeID = (SELECT MIN(EmployeeID) FROM employee_contacts_1004);,Retrieve the unique addresses of the employee with the lowest EmployeeID from the employee contacts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL ORDER BY EmployeeID DESC;,"Retrieve all employee contact information for those who have a phone number listed, and arrange the results by Employee ID in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT Email) FROM employee_contacts_1004;,Count the number of unique email addresses in the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.EmployeeID; <<SEP >> SELECT EmployeeID, COUNT(*) as ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1; <<SEP >> SELECT DISTINCT Email FROM employee_contacts_1004 WHERE Email IS NOT NULL; <<SEP >> SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber LIKE '555%'; <<SEP >> SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE department = 'IT'); <<SEP >> SELECT ec.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID ORDER BY TotalContacts DESC; <<SEP >> SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NULL; <<SEP >> SELECT ec.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_contacts_1004 ec WHERE EXISTS (SELECT 1 FROM employee_1001 e WHERE e.EmployeeID = ec.EmployeeID AND e.status = 'active'); <<SEP >> SELECT ec.EmployeeID, MIN(ec.Address) AS FirstAddress FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID; <<SEP >> SELECT ec.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_contacts_1004 ec ORDER BY ec.Email DESC; <<SEP >> SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING ContactCount < 3; <<SEP >> SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.EmployeeID = (SELECT EmployeeID FROM employee_1001 WHERE last_name = 'Smith'); <<SEP >> SELECT ec.EmployeeID, MAX(ec.PhoneNumber) AS LatestPhone FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID; <<SEP >> SELECT e.EmployeeID, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address IS NOT NULL; <<SEP >> SELECT EmployeeID, COUNT(DISTINCT Email) as UniqueEmails FROM employee_contacts_1004 GROUP BY EmployeeID HAVING UniqueEmails > 1; <<SEP >> SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IN (SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(*) > 1); <<SEP >> SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.department = 'Sales'; <<SEP >> SELECT EmployeeID, COUNT(PhoneNumber) as PhoneCount FROM employee_contacts_1004 GROUP BY EmployeeID; <<SEP >> SELECT ec.EmployeeID, ec.Email FROM employee_contacts_1004 ec WHERE ec.Email LIKE '%@example.com'; <<SEP >> SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec WHERE ec.Address LIKE '%Street%';","1. Retrieve the employee IDs and phone numbers of all employees, ordered by their employee IDs.

2. Count how many contact entries each employee has and only show those employees who have more than one contact.

3. List all distinct email addresses from the employee contacts that are not empty.

4. Find the employee IDs and phone numbers of employees whose phone numbers start with '555'.

5. Get the employee IDs and addresses of all employees who work in the IT department.

6. Count the total number of contact entries for each employee and order the results from highest to lowest.

7. Identify employee IDs and email addresses of those employees who do not have an associated email in the contacts.

8. List the employee IDs, phone numbers, and email addresses of active employees.

9. Find the minimum address recorded for each employee.

10. Retrieve the employee IDs, phone numbers, and email addresses of employee contacts, ordered by email addresses in descending order.

11. Count the number of contacts for each employee and show those who have fewer than three contacts.

12. Get the phone numbers of the employee whose last name is 'Smith'.

13. Find the most recent phone number for each employee.

14. List the employee IDs and addresses of employees who have an address recorded.

15. Count how many unique email addresses each employee has and show those who have more than one unique email.

16. Find the employee IDs and phone numbers of employees who have phone numbers that are shared by multiple employees.

17. Retrieve the email addresses of employees who work in the Sales department.

18. Count how many phone numbers each employee has recorded.

19. Identify the employee IDs and email addresses of contacts with an email address ending in '@example.com'.

20. Retrieve the employee IDs and addresses of contacts that include the word 'Street' in the address."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 0 ","List the employee IDs of those employees who have at least one contact, along with the number of contacts each employee has."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT ec.Email FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL ,Retrieve the email addresses of employees who have provided a phone number.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec ORDER BY ec.EmployeeID ASC ","Retrieve the employee IDs and their corresponding phone numbers from the employee contacts, and list them in ascending order by employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Email FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%Street%' ","Retrieve the email addresses of employees who live at an address that contains the word ""Street."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING TotalContacts > 2 ","""List the Employee IDs of those employees who have more than two associated contact records."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT DISTINCT ec.Email FROM employee_contacts_1004 ec WHERE ec.Email IS NOT NULL ORDER BY ec.Email ,"Retrieve a list of unique email addresses from the employee contacts where the email is not empty, and arrange the email addresses in alphabetical order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.PhoneNumber FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber LIKE '123%' ",Find the Employee IDs and phone numbers of employees whose phone numbers start with '123'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, COUNT(ec.Email) AS EmailCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING EmailCount = 0 ",Identify the Employee IDs of employees who do not have any associated email addresses in the contact information.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec WHERE ec.Address IS NOT NULL ",Retrieve the employee IDs and addresses for employees who have a listed address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.EmployeeID, ec.PhoneNumber ","Retrieve the employee IDs and their corresponding phone numbers by joining employee information with their contact details, and list the results sorted by employee ID and phone number."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IN (SELECT PhoneNumber FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(ContactID) > 1) ",Retrieve the Employee IDs and phone numbers of employees who have phone numbers that are shared by more than one employee.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ec.*, e.Name FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.EmployeeID = 101 ","""Retrieve all contact information including phone numbers, email addresses, and addresses for the employee with the ID 101, along with the employee's name."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, e.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@example.com' ",Retrieve the employee IDs and email addresses of employees who have an email address ending with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(DISTINCT ec.Email) FROM employee_contacts_1004 ec WHERE ec.Email IS NOT NULL ,Count the number of unique email addresses in the employee contacts that are not empty.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email NOT LIKE '%gmail.com' ",Retrieve the employee IDs along with their phone numbers and email addresses for employees whose email addresses do not include 'gmail.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ec.EmployeeID, COUNT(ec.PhoneNumber) FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL GROUP BY ec.EmployeeID HAVING COUNT(ec.PhoneNumber) > 3 ","""Retrieve the IDs of employees who have more than three recorded phone numbers."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%City%' ","Retrieve the Employee IDs and addresses of employees who have an address that contains the word ""City."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, ec.ContactID FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY ec.ContactID DESC ","Retrieve the employee IDs along with their contact IDs, and list them in descending order based on the contact ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL ORDER BY e.LastName ","Retrieve the first and last names of employees along with their phone numbers, but only for those employees who have a phone number listed. The results should be sorted by the employees' last names."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ec.EmployeeID, SUM(CASE WHEN ec.Email IS NOT NULL THEN 1 ELSE 0 END) AS ValidEmailCount FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID ","Count the number of valid email addresses for each employee by checking how many of them have an email listed, and display this count along with the employee's ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL ORDER BY e.EmployeeID;","Retrieve the employee IDs and phone numbers of employees who have a phone number listed in their contact information, and sort the results by employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.PhoneNumber, e.Email FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.Department = 'HR' AND ec.PhoneNumber IS NOT NULL","Retrieve the Employee IDs, phone numbers, and email addresses of employees who work in the HR department and have a phone number listed."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS NumberOfContacts FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 2",Find the employee IDs of those who have more than two contact records and count how many contact records each employee has.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Email FROM employee_contacts_1004 ec WHERE ec.Email LIKE '%@company.com' AND ec.Address IS NOT NULL",Find the Employee IDs and email addresses of employees who have a company email ending with '@company.com' and have a non-empty address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.PhoneNumber FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.HireDate > (SELECT MIN(HireDate) FROM employee_1001) ",Retrieve the names and phone numbers of employees who were hired after the earliest hire date in the company.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_contacts_1004 WHERE PhoneNumber LIKE '555%')",Find the IDs and names of employees who have a phone number that starts with '555'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.Name ASC, ec.PhoneNumber DESC","Retrieve the names of employees along with their phone numbers, and sort the results by employee names in ascending order and phone numbers in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.Email FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.ContactID IN (SELECT ContactID FROM employee_contacts_1004 WHERE EmployeeID = e.EmployeeID) AND e.Department = 'Finance'",Retrieve the names and email addresses of employees who work in the Finance department and have contact information listed in the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Address, COUNT(ec.ContactID) FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING COUNT(ec.ContactID) > 1","""Identify the addresses that have more than one employee contact associated with them and count how many contacts exist for each of those addresses."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE EXISTS (SELECT 1 FROM employee_contacts_1004 ec WHERE ec.EmployeeID = e.EmployeeID AND ec.PhoneNumber IS NOT NULL) ","""Retrieve the IDs and names of employees who have a valid phone number listed in their contact information."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, COUNT(DISTINCT ec.Email) AS UniqueEmails FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Name HAVING COUNT(DISTINCT ec.Email) > 1",Find the names of employees who have more than one unique email address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, COUNT(ec.PhoneNumber) AS TotalPhoneNumbers FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID HAVING TotalPhoneNumbers >= (SELECT AVG(PhoneCount) FROM (SELECT COUNT(*) AS PhoneCount FROM employee_contacts_1004 GROUP BY EmployeeID))","Identify the employees who have a greater or equal number of phone numbers than the average number of phone numbers held by all employees. For each of these employees, list their Employee ID and the total count of phone numbers they have."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.Address FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address IS NOT NULL ORDER BY ec.Address ASC","Retrieve the names and addresses of employees who have a listed address, and sort the results by address in ascending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL OR ec.Email IS NOT NULL",Find the employee IDs and names of employees who have a phone number or an email address listed in their contact information.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, (SELECT COUNT(*) FROM employee_contacts_1004 ec WHERE ec.EmployeeID = e.EmployeeID) AS ContactCount FROM employee_1001 e WHERE e.EmployeeID IN (SELECT DISTINCT EmployeeID FROM employee_contacts_1004)","""Retrieve the names of employees who have contact information, along with the number of contact details associated with each employee."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber, e.Email FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.Email IS NULL","""Retrieve the Employee IDs and phone numbers of employees who do not have an email address listed, along with their email addresses from the employee records."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, (SELECT COUNT(*) FROM employee_contacts_1004 ec WHERE ec.EmployeeID = e.EmployeeID) AS TotalContacts FROM employee_1001 e GROUP BY e.Name HAVING TotalContacts > 3",Identify the names of employees who have more than three contact details listed in the contact database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Email, COUNT(*) FROM employee_contacts_1004 ec GROUP BY ec.Email HAVING COUNT(*) > 1",Identify the email addresses of employees that are associated with more than one contact entry and count how many times each email address appears.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.PhoneNumber, e.Department FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.PhoneNumber LIKE '123%' AND e.Location IN (SELECT Location FROM employee_1001 WHERE Department = 'IT')","""Find the phone numbers and departments of employees who have phone numbers starting with '123' and work in the same locations as those in the IT department."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL AND e.Status = 'Active' OR e.HireDate < '2020-01-01'","Retrieve the Employee IDs and names of active employees who have a phone number listed, or who were hired before January 1, 2020, along with their phone numbers."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, MAX(ec.PhoneNumber) FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Name HAVING MAX(ec.PhoneNumber) IS NOT NULL","""Retrieve the names of employees along with their maximum phone number, ensuring the phone number is not empty."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 ,"""Retrieve all details about project assignments, including assignment ID, employee ID, project name, start date, end date, and role for each assignment."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 ","""List the names of all the projects from the project assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName = 'Project A' ",Find the Employee IDs and their roles for all employees assigned to 'Project A'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT ProjectName FROM project_assignments_1005 ","""List the unique project names from the project assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005 ","""Count the total number of project assignments in the database."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT StartDate FROM project_assignments_1005 WHERE EmployeeID = 1 ",Retrieve the start dates of projects assigned to the employee with an ID of 1.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EndDate FROM project_assignments_1005 WHERE AssignmentID = 2 ","""Retrieve the end date of the assignment with the ID of 2."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role FROM project_assignments_1005 WHERE EmployeeID = 3 AND ProjectName = 'Project B' ",Retrieve the role of the employee with ID 3 who is assigned to 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NULL ","""List the Employee IDs and project names for assignments that are currently ongoing."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AssignmentID, EmployeeID FROM project_assignments_1005 ORDER BY StartDate DESC ","Retrieve the assignment IDs and employee IDs from the project assignments table, and list them in order of start date, starting with the most recent assignments."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005 WHERE Role = 'Manager' ",Count the number of assignments where the role is 'Manager'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AssignmentID, ProjectName FROM project_assignments_1005 WHERE StartDate > '2023-01-01' ","""Retrieve the Assignment IDs and Project names for projects that started after January 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE Role LIKE '%Developer%' ","Retrieve all records from the project assignments that have a role including the term ""Developer."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(EmployeeID) FROM project_assignments_1005 GROUP BY ProjectName ","""List each project name along with the number of employees assigned to that project."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(ProjectName) FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(ProjectName) > 1 ",Identify the employees who are assigned to more than one project and count how many projects each of them is involved in.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE EndDate < StartDate ",Find all project assignments where the end date of the assignment is before the start date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AVG(StartDate) FROM project_assignments_1005 ",Calculate the average starting date of all project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM project_assignments_1005 WHERE ProjectName IN ('Project A', 'Project B') ",Find the employee IDs of those who are assigned to either 'Project A' or 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MAX(EndDate) FROM project_assignments_1005 GROUP BY ProjectName ",List the names of each project along with the latest end date of assignments for those projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM project_assignments_1005 WHERE Role = 'Team Lead' ORDER BY AssignmentID ASC ","List the Employee IDs of all individuals who have the role of 'Team Lead', and arrange the results in ascending order based on their assignment ID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 WHERE EmployeeID IS NOT NULL ",Retrieve the names of all projects that have been assigned to employees.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", ,"Retrieve the assignments made to employees along with their project names, roles, and the duration of each assignment, focusing on the employees' IDs."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005;,"Retrieve all information about project assignments, including details such as the assignment ID, employee ID, project name, start date, end date, and role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Developer';,"""Retrieve the names of projects where the assigned role is 'Developer'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT StartDate, EndDate FROM project_assignments_1005 WHERE EmployeeID = 1;",Retrieve the start and end dates of the projects assigned to the employee with the ID of 1.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005;,Retrieve the unique roles that employees have in project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE ProjectName = 'Project A';,Count the total number of assignments for 'Project A'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL;","""Retrieve the Employee IDs and Project names for assignments that have a completed end date."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS Assignments FROM project_assignments_1005 GROUP BY ProjectName;","""List the names of projects along with the number of assignments for each project."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 ORDER BY StartDate DESC;","Retrieve the Employee IDs and project names from the project assignments, and list them starting with the most recent assignments first."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01';,"Retrieve all project assignments that started on or after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) FROM project_assignments_1005 GROUP BY Role;","""Count how many assignments there are for each role in the project assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE StartDate < EndDate;",Find the Employee IDs and their roles for assignments where the start date is earlier than the end date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE EmployeeID IN (SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 1);,Identify the names of projects that have been assigned to employees who are involved in more than one project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE Role LIKE 'M%';",Find the employee IDs and project names for all assignments where the role starts with the letter 'M'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(StartDate) AS FirstAssignment FROM project_assignments_1005 GROUP BY EmployeeID;",Find the earliest assignment date for each employee.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ProjectName FROM project_assignments_1005 WHERE EmployeeID = (SELECT EmployeeID FROM project_assignments_1005 WHERE ProjectName = 'Project B');,Find all the distinct project names that are assigned to the same employee who is working on 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3;",Identify the Employee IDs of employees who are assigned to more than three projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE EndDate IS NULL;,Retrieve all project assignments where the end date has not been set yet.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) FROM project_assignments_1005 GROUP BY ProjectName HAVING MAX(EndDate) < '2023-12-31';","List the names of projects and their latest end dates, but only include those projects that have all their end dates before December 31, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE AssignmentID BETWEEN 1 AND 10;",Retrieve the employee IDs and project names for assignments with IDs ranging from 1 to 10.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31';,Retrieve all project assignments that started within the year 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName; ","""List the names of projects along with the total number of assignments for each project."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 WHERE EndDate IS NULL; ","Retrieve the Employee IDs, Project names, and Start dates of all ongoing projects that have not yet ended."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT Role, COUNT(*) FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 5; ","Identify the roles in the project assignments and count how many employees are assigned to each role, but only include those roles that have more than five employees assigned to them."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, MIN(StartDate) AS EarliestStart FROM project_assignments_1005 GROUP BY ProjectName; ",Find the earliest start date for each project by listing the project names along with their minimum starting dates.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID ORDER BY TotalProjects DESC; ","""Count the total number of projects assigned to each employee and list them in order from the highest to the lowest total."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName; ",Calculate the average duration of projects by finding the average length of time for each project from its start date to its end date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, Role FROM project_assignments_1005 WHERE StartDate > '2023-01-01' ORDER BY StartDate; ","Retrieve the Employee ID and their roles for all project assignments that started after January 1, 2023, and list them in order of their start dates."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS UniqueProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING UniqueProjects > 3; ",Identify the employees who have worked on more than three distinct projects and list their employee IDs along with the count of unique projects they have contributed to.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE StartDate < '2023-06-01' GROUP BY ProjectName; ","List the names of projects and the number of assignments for each project that started before June 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT Role, COUNT(*) FROM project_assignments_1005 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY Role; ",Count the number of project assignments for each role where the assignments started in the year 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT DISTINCT Role FROM project_assignments_1005 WHERE EndDate IS NOT NULL; ,"""List all the unique roles of employees who have completed their project assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, SUM(julianday(EndDate) - julianday(StartDate)) AS TotalDays FROM project_assignments_1005 GROUP BY EmployeeID; ","""Calculate the total number of days that each employee has worked on projects by finding the difference between the start and end dates of their assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, MAX(EndDate) AS LatestEnd FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of each project along with the most recent end date of those projects."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 WHERE Role = 'Manager'; ,Count the number of distinct employees who have the role of 'Manager' in the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, Role FROM project_assignments_1005 WHERE EndDate > '2023-01-01' ORDER BY ProjectName; ","List the project names and roles of assignments that are still active, meaning their end date is after January 1, 2023, and arrange the results in alphabetical order by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE Role = 'Developer' GROUP BY EmployeeID; ","""Count the number of project assignments for each employee who has the role of 'Developer'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, COUNT(*) AS AssignmentNumber FROM project_assignments_1005 GROUP BY ProjectName HAVING AssignmentNumber > 2; ","Identify the names of projects that have more than two assignments associated with them. Also, count how many assignments there are for each project."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, StartDate FROM project_assignments_1005 WHERE Role IN ('Developer', 'Tester') ORDER BY StartDate; ","Retrieve the names of projects and their start dates for employees who have the roles of either Developer or Tester, and organize the results by the start date of the projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName = 'Project X' AND StartDate < '2023-01-01'; ","Find the employee IDs and their roles for those assigned to 'Project X' before January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(*) FROM project_assignments_1005 WHERE ProjectName LIKE '%Alpha%';,Count the total number of project assignments that have 'Alpha' in their project name.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(*) > 1 ","Identify the names of projects that have more than one assignment, along with the count of assignments for each of those projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY EmployeeID ",Find the latest end date of project assignments for each employee.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 WHERE EndDate IS NULL ","List the Employee IDs, project names, and start dates of all ongoing assignments where the end date has not been specified."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT Role, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY Role ORDER BY NumberOfAssignments DESC ","""Group the project roles and count how many assignments are there for each role, then list them in order from the role with the most assignments to the least."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(DISTINCT ProjectName) > 3 ","Identify the employees who have worked on more than three different projects, and count how many distinct projects each of these employees has been assigned to."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName ","""Calculate the average duration of each project by finding the difference between the start and end dates and then grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT * FROM project_assignments_1005 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY StartDate ,"Retrieve all project assignments that started in the year 2023, and list them in chronological order by their start date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS TotalAssignments FROM project_assignments_1005 WHERE Role = 'Manager' GROUP BY EmployeeID HAVING TotalAssignments > 2 ","""Identify the employees who have the role of 'Manager' and count how many assignments each of them has. Only include those employees who have more than two assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE ProjectName LIKE 'Alpha%' ","""Retrieve the IDs and names of projects assigned to employees that begin with the name 'Alpha'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, Role FROM project_assignments_1005 WHERE Role IN ('Developer', 'Designer') ORDER BY EmployeeID ","""Retrieve the Employee IDs and their roles for employees who are either developers or designers, and organize the results by Employee ID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, SUM(julianday(EndDate) - julianday(StartDate)) AS TotalDays FROM project_assignments_1005 GROUP BY ProjectName HAVING TotalDays > 30 ",Find the names of projects that have a total duration of more than 30 days by calculating the time between their start and end dates.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT COUNT(DISTINCT EmployeeID) AS NumberOfEmployeesInProjects FROM project_assignments_1005 ,Count the number of distinct employees who are assigned to projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE StartDate < '2023-01-01' GROUP BY EmployeeID HAVING AssignmentsCount > 5 ","Find the Employee IDs of employees who have been assigned to more than five projects that started before January 1, 2023, along with the count of those assignments."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, MIN(StartDate) AS FirstStart, MAX(EndDate) AS LastEnd FROM project_assignments_1005 GROUP BY ProjectName ","""Get the project names along with the earliest start date and the latest end date for each project."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, Role, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY EmployeeID, Role HAVING AssignmentCount > 2 ",Identify the Employee IDs and their roles for employees who have been assigned to more than two projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT ProjectName, COUNT(EmployeeID) AS EmployeesOnProject FROM project_assignments_1005 GROUP BY ProjectName ORDER BY EmployeesOnProject DESC ","List the names of projects along with the number of employees assigned to each project, and arrange the results in order from the project with the most employees to the project with the least."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT DISTINCT Role FROM project_assignments_1005 ,"""List all the unique roles that employees have in their project assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, (julianday(MAX(EndDate)) - julianday(MIN(StartDate))) AS TotalDuration FROM project_assignments_1005 GROUP BY EmployeeID HAVING TotalDuration > 10 ","Find the IDs of employees who have worked on projects for more than 10 days in total, along with the total duration of their projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT Role, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role ",Count the number of distinct employees for each role in the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE julianday(EndDate) < julianday('2023-01-01') ","Find the Employee IDs and project names for all projects that ended before January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", SELECT ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL ORDER BY EndDate DESC;,"List the names of the projects that have been completed, and arrange them in order from the most recent completion date to the earliest."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ea.EmployeeID, ea.ProjectName, ea.Role FROM project_assignments_1005 ea WHERE ea.StartDate < (SELECT MAX(EndDate) FROM project_assignments_1005 WHERE EmployeeID = ea.EmployeeID) ","List the Employee IDs, Project names, and Roles of employees who started their projects before they completed their most recent project."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(pa.AssignmentID) AS TotalAssignments FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.EmployeeID HAVING TotalAssignments > 5 ",Find the IDs of employees who have been assigned to more than five projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ea.EmployeeID, e.Name, COUNT(pa.AssignmentID) as ProjectCount FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.EndDate IS NOT NULL GROUP BY ea.EmployeeID, e.Name HAVING ProjectCount > 3 ORDER BY ProjectCount DESC ","Retrieve the Employee IDs and names of employees who have completed more than three projects, and show how many projects each has completed, sorted from the most to least completed projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, SUM(DATEDIFF(pa.EndDate, pa.StartDate)) AS TotalDays FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name HAVING TotalDays > 30 ","""List the names of employees who have worked on projects for more than 30 days in total, along with the total number of days they spent on those projects."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, pa.ProjectName FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.Role = 'Manager' AND pa.StartDate BETWEEN '2023-01-01' AND '2023-12-31' ","Retrieve the employee IDs and names of employees who have been assigned the role of 'Manager' on any project that started in the year 2023, along with the names of those projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT pa.EmployeeID, e.Name, COUNT(*) AS ProjectCount FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.Role = 'Developer' GROUP BY pa.EmployeeID, e.Name HAVING COUNT(*) > 10 ",Identify the IDs and names of employees who have a role as a Developer and have worked on more than 10 projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, pa.ProjectName, pa.StartDate FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.EndDate IS NULL ORDER BY pa.StartDate ASC ","Retrieve the Employee IDs and names of employees who are currently assigned to projects, along with the project names and their start dates, and arrange the results by the start date of the projects in ascending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT pa.ProjectName, e.Name FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE EXISTS (SELECT 1 FROM project_assignments_1005 pb WHERE pb.ProjectName = pa.ProjectName AND pb.EmployeeID != pa.EmployeeID) ","Find the names of projects and the names of employees who are working on those projects, but only include projects that have more than one employee assigned to them."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(pa.ProjectName) AS CompletedProjects FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.EndDate < NOW() GROUP BY e.EmployeeID HAVING CompletedProjects > 2 ","Identify the Employee IDs of employees who have completed more than two projects, and show the count of those completed projects for each employee. Only include projects that have finished before the current date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, pa.Role FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.StartDate >= '2023-01-01' AND pa.EndDate <= '2023-12-31' ORDER BY e.Name, pa.ProjectName ","Retrieve the names of employees along with their roles in projects that started and ended in the year 2023, and organize the results by the employee names and project names."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT pa.EmployeeID, pa.ProjectName, DATEDIFF(pa.EndDate, pa.StartDate) AS Duration FROM project_assignments_1005 pa WHERE DATEDIFF(pa.EndDate, pa.StartDate) > 30 ",Find the Employee IDs and Project names for assignments that lasted longer than 30 days.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, pa.ProjectName FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name, pa.ProjectName HAVING COUNT(pa.AssignmentID) = 0 ",Find the names of employees who are not assigned to any projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT paEmployeeIDs, GROUP_CONCAT(p.ProjectName) AS ProjectsAssigned FROM (SELECT EmployeeID, ProjectName FROM project_assignments_1005) pa GROUP BY EmployeeID HAVING ProjectsAssigned LIKE '%Project A%' ","""Identify the employee IDs and the names of all projects they have been assigned to, specifically focusing on those who have worked on 'Project A'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT pa.ProjectName FROM project_assignments_1005 pa WHERE pa.EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE HireDate < '2022-01-01') ","List the unique project names assigned to employees who were hired before January 1, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, COUNT(pa.AssignmentID) AS ActiveAssignments FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.EndDate IS NULL GROUP BY e.EmployeeID HAVING ActiveAssignments > 1 ",Find the IDs and names of employees who are currently assigned to more than one project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, pa.Role, AVG(DATEDIFF(pa.EndDate, pa.StartDate)) AS AverageAssignmentDuration FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name, pa.Role HAVING AverageAssignmentDuration > 30 ","""Find the names and roles of employees whose average time spent on project assignments is greater than 30 days."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT a.EmployeeID FROM project_assignments_1005 a WHERE a.StartDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY a.EmployeeID HAVING COUNT(*) >= 5 ",Identify the Employee IDs of employees who have been assigned to projects at least five times throughout the year 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, MAX(pa.StartDate) as LastProjectStart FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name HAVING LastProjectStart < NOW() - INTERVAL 1 YEAR ","Find the names of employees who have not started any project in the last year, along with the start date of their most recent project."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT pa.ProjectName, COUNT(e.EmployeeID) AS NumberOfEmployees FROM project_assignments_1005 pa LEFT JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.EndDate IS NULL GROUP BY pa.ProjectName HAVING NumberOfEmployees > 5 ",Find the names of projects that currently have more than five employees assigned to them.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT DISTINCT pa.EmployeeID FROM project_assignments_1005 pa WHERE pa.EndDate IS NULL);",Find the IDs and names of employees who are not currently assigned to any projects.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001;,"""Retrieve all information about each department, including their unique IDs and names."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001;","""List the IDs and names of all the departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002;,"Retrieve all records from the employee department information, including details about each employee's department assignments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002;",Retrieve the IDs of employees along with the IDs of the departments they are associated with.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1;,Retrieve the name of the department that has the ID number 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e1.EmployeeID, e1.DepartmentID FROM employee_department_2002 e1 JOIN department_2001 d1 ON e1.DepartmentID = d1.DepartmentID;","""Retrieve the Employee IDs and their corresponding Department IDs for employees working in various departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d1.DepartmentName, e1.EmployeeID FROM department_2001 d1 JOIN employee_department_2002 e1 ON d1.DepartmentID = e1.DepartmentID WHERE e1.StartDate IS NOT NULL;",Retrieve the names of departments along with the IDs of employees who have started working in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT DepartmentID FROM employee_department_2002;,"""List all the unique department IDs from the employee department records."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM department_2001;,"""Count the total number of departments listed in the department table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName;","""List the names of all departments along with the number of employees associated with each department, including departments that have no employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE ManagerID IS NULL;,Find the names of departments that do not have a manager assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT e.DepartmentID FROM employee_department_2002 e GROUP BY e.DepartmentID HAVING COUNT(e.EmployeeID) > 5;,Identify the department IDs that have more than five employees associated with them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, ManagerID FROM department_2001 WHERE ManagerID = 100;",Find the names of departments and their manager IDs for the department managed by the employee with the ID 100.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.EndDate IS NULL;","Retrieve the employee IDs and the names of the departments for employees who are currently active in their positions, meaning they do not have an end date listed."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.StartDate >= '2023-01-01';,"""List the IDs of employees who started working in the department on or after January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, COUNT(*) AS NumberOfEmployees FROM employee_department_2002 GROUP BY DepartmentID;","""Count the number of employees in each department and list the department IDs along with their respective employee counts."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT * FROM department_2001 WHERE DepartmentID IN (1, 2, 3);","Retrieve all details of the departments with IDs 1, 2, and 3."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 0;","List the names of departments that have employees, along with the number of employees in each department. Only include departments that have at least one employee."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.StartDate < e.EndDate;,"""Find the IDs of employees whose start date in their department is earlier than their end date."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, COUNT(EmployeeID) AS EmployeeCount FROM employee_department_2002 GROUP BY DepartmentID ORDER BY EmployeeCount DESC;","""Count the number of employees in each department and list the departments in order from the highest to lowest number of employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001; ,"""Retrieve all information about the departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1; ,Retrieve the name of the department that has an ID of 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT * FROM employee_department_2002 WHERE EndDate IS NULL; ,Retrieve all records of employees in departments where the employment has not yet ended.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT DepartmentID, COUNT(*) FROM employee_department_2002 GROUP BY DepartmentID; ","""Count the number of employees in each department based on their records from 2002."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID; ",Retrieve the employee IDs along with the names of the departments they belong to.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DISTINCT DepartmentName FROM department_2001; ,"""List all the unique names of departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.StartDate > '2023-01-01'; ,"""Find the employee IDs of those who started their department position after January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID; ","""List the names of all departments along with the employee IDs of those who worked in each department, including departments that may not have any employees assigned to them."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT COUNT(*) FROM employee_department_2002 WHERE StartDate < '2022-01-01'; ,"Count the number of employees who started working in their department before January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DISTINCT ManagerID FROM department_2001; ,"""Retrieve a list of unique Manager IDs from the department records."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DepartmentName FROM department_2001 WHERE ManagerID IS NOT NULL; ,List the names of departments that have a manager assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT e.EmployeeID, COUNT(e.DepartmentID) FROM employee_department_2002 e GROUP BY e.EmployeeID; ","""Count how many different departments each employee has worked in."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DepartmentID FROM employee_department_2002 WHERE EndDate < '2021-12-31'; ,"Find the Department IDs of employees who finished working in their departments before December 31, 2021."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT d.DepartmentID, d.DepartmentName FROM department_2001 d ORDER BY d.DepartmentName ASC; ","""Retrieve the IDs and names of all departments and list them in alphabetical order by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2 AND EndDate IS NULL; ,Retrieve the list of Employee IDs for those who are currently working in department number 2 and have not yet ended their employment in that department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.StartDate < CURRENT_TIMESTAMP; ",Retrieve the employee IDs and department names of employees who have started working in a department before the current date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT COUNT(*) FROM employee_department_2002 WHERE DepartmentID = 1 GROUP BY EmployeeID; ,Count the number of employees who belong to department 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","List the names of departments and count how many employees are associated with each department, including departments that may have no employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", SELECT DepartmentID FROM department_2001 WHERE ManagerID = 5; ,Retrieve the IDs of departments that have a manager with the ID of 5.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT e.EmployeeID, e.StartDate FROM employee_department_2002 e WHERE e.EndDate IS NULL ORDER BY e.StartDate DESC; ","""Retrieve the Employee IDs and start dates of employees who are currently working in a department, sorting the results by the start date in descending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," SELECT DepartmentName FROM department_2001 WHERE DepartmentID IN (1, 2, 3);","Retrieve the names of departments that have the IDs 1, 2, or 3."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, COUNT(*) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) > 5","""List the names of departments that have more than five employees, along with the count of employees in each of those departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE e.ManagerID IS NOT NULL","Retrieve the IDs of employees along with the names of the departments they belong to, but only for those employees who have a manager assigned to them."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(ed.StartDate) AS FirstEmployeeStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",Identify the earliest start date of employees in each department and list the department names along with these dates.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName ORDER BY AverageSalary DESC","""Calculate the average salary of employees in each department and list the department names along with their average salaries, sorted from the highest average salary to the lowest."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 ed LEFT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NULL",Retrieve the IDs and names of employees who are currently assigned to a department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(*) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC","""Count the number of employees in each department and list the department names along with their employee counts, sorted from the most employees to the least."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, COUNT(ed.DepartmentID) FROM employee_department_2002 ed JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 1",Identify the employees who have worked in more than one department and count how many departments each employee has been part of.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.StartDate) AS LastEmployeeStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",Retrieve the names of departments along with the most recent start date of any employee who joined that department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.ManagerID, COUNT(ed.EmployeeID) AS ManagedEmployees FROM employee_department_2002 ed JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY e.ManagerID HAVING COUNT(ed.EmployeeID) > 3","Identify the manager IDs of managers who oversee more than three employees, along with the count of those employees they manage."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d WHERE d.ManagerID IN (SELECT e.EmployeeID FROM employee_1001 e WHERE e.Salary > 60000),"""Retrieve the names of departments that are managed by employees who earn more than 60,000."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(DISTINCT ed.EmployeeID) AS UniqueEmployees FROM employee_department_2002 ed WHERE ed.StartDate > '2023-01-01',"Count the number of unique employees who started in a department after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName, ed.StartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NULL ORDER BY ed.StartDate","Retrieve the employee IDs, department names, and start dates for employees who are currently in a department, meaning their end date is not specified, and list the results in order of their start dates."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) BETWEEN 2 AND 5","List the names of departments that have between 2 and 5 employees assigned to them, along with the count of employees in each department."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, COUNT(ed.DepartmentID) FROM employee_department_2002 ed GROUP BY ed.EmployeeID ORDER BY COUNT(ed.DepartmentID) DESC","""Count how many different departments each employee has worked in and list the employees in order from the one with the most departments to the least."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NOT NULL","""List the names of departments along with the IDs of employees who have finished working in those departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.EndDate IS NULL)","""List the employee IDs and names of all employees who are not currently assigned to any department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed RIGHT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName","List the names of all departments along with the number of employees in each department, including departments that may have no employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(*) AS ActiveEmployees FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate IS NULL GROUP BY d.DepartmentName",List the names of departments and the number of employees currently active in each department. Only include departments that have employees without an end date recorded.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate < '2023-01-01' AND ed.EndDate > '2023-01-01'","Find the employee IDs and department names of employees who were part of a department at any time around January 1, 2023, specifically those whose tenure started before that date and continued after that date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 50000","""Retrieve the names of departments and the average salary of employees in those departments, but only include departments where the average salary is greater than 50,000."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 0","""List the names of departments along with the number of employees assigned to each department, but only include departments that have at least one employee."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE d.ManagerID IS NOT NULL","""Retrieve the names of departments that have a manager, along with the IDs of employees working in those departments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(*) AS TotalEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalEmployees DESC","""Retrieve the names of departments and count how many employees work in each department, then arrange the results starting with the department that has the most employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID, ed.StartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NULL","Retrieve the names of departments, employee IDs, and the start dates of employees who are currently active in those departments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 60000","Find the names of departments and the average salary of their employees, but only include departments where the average salary is greater than 60,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(ed.StartDate) AS FirstEmployeeStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName",Retrieve the names of each department along with the earliest start date of an employee who joined that department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT d.DepartmentName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate < '2023-01-01',"""List the unique names of departments that had employees starting work before January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE e.EmployeeID IS NULL",List the names of departments that do not have any employees assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.ManagerID, COUNT(ed.EmployeeID) AS ManagedEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.ManagerID HAVING COUNT(ed.EmployeeID) > 5",Identify the managers who supervise more than five employees in their departments and count how many employees each manager supervises.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate > ed.StartDate","""Retrieve the employee IDs and department names for employees who have worked in a department for a time period where the end date is later than the start date."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName","Retrieve the total salary of employees in each department, along with the names of those departments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate < '2022-01-01' GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) >= 3","Count the number of employees in each department who started working before January 1, 2022, and list the department names where there are at least three employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID, ed.StartDate, ed.EndDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NOT NULL AND ed.StartDate < '2023-01-01'","Find the names of departments, the IDs of employees, and the start and end dates of their employment, for employees who have left their positions before January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS UniqueEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName","""List the names of departments and count how many unique employees work in each department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(*) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING EmployeeCount > 2 AND d.ManagerID IS NOT NULL",Retrieve the names of departments that have more than two employees and also have a manager assigned.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, COUNT(d.DepartmentID) AS DepartmentCount FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY e.EmployeeID HAVING DepartmentCount > 1",List the IDs of employees who are assigned to more than one department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.EndDate) AS LatestEndDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName",List the names of the departments along with the most recent end date of employee assignments in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName, ed.StartDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate = (SELECT MIN(StartDate) FROM employee_department_2002 WHERE EmployeeID = e.EmployeeID)","""Retrieve the employee IDs, department names, and start dates for each employee, specifically for the earliest department they joined, according to their records."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID, COUNT(ed.EmployeeID) AS CountPerDepartment FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName, e.EmployeeID HAVING COUNT(ed.EmployeeID) > 1","""List the names of departments along with the IDs of employees who have worked in those departments, but only include those employees who have worked in more than one department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC","List the names of all departments along with the number of employees working in each department, ordered by the number of employees from highest to lowest."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, e.DepartmentID, e.StartDate FROM employee_department_2002 e WHERE e.EndDate IS NULL AND e.StartDate < '2022-01-01'","Retrieve the employee IDs, department IDs, and start dates of employees who are currently in a department and started before January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID IS NOT NULL",Retrieve the employee IDs and department names for departments that have a manager assigned.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, e.StartDate, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.StartDate BETWEEN '2021-01-01' AND '2022-01-01'","Retrieve the employee IDs and their start dates along with the names of the departments for all employees who started in a department between January 1, 2021, and January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EndDate IS NOT NULL",Retrieve the names of departments along with the IDs of employees who have left their positions in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, COUNT(d.DepartmentID) AS DepartmentCount FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID GROUP BY e.EmployeeID HAVING COUNT(d.DepartmentID) > 1",Identify the employees who belong to more than one department and count how many departments each of them is associated with.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e LEFT JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID = e.EmployeeID",Retrieve the Employee IDs and department names for employees who are managers of their respective departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS ActiveEmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EndDate IS NULL GROUP BY d.DepartmentName",List the names of departments along with the count of active employees currently working in each department. An active employee is defined as someone whose end date is not specified.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.EndDate IS NOT NULL AND e.StartDate < e.EndDate",Find the IDs of employees who have a recorded end date for their department assignment and whose start date is earlier than the end date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, MAX(e.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName","""Find the latest start date for employees in each department, along with the corresponding department names."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e1.EmployeeID FROM employee_department_2002 e1 JOIN employee_department_2002 e2 ON e1.EmployeeID = e2.EmployeeID WHERE e1.DepartmentID <> e2.DepartmentID","""Identify the IDs of employees who have worked in more than one department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS UniqueEmployeeCount FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING UniqueEmployeeCount > 5","""Retrieve the names of departments that have more than five unique employees assigned to them."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, e.DepartmentID FROM employee_department_2002 e WHERE EXISTS (SELECT 1 FROM department_2001 d WHERE d.DepartmentID = e.DepartmentID AND d.ManagerID IS NOT NULL)",Find the Employee IDs and Department IDs of employees who work in departments that have an assigned manager.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentID, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE NOT EXISTS (SELECT 1 FROM employee_department_2002 e2 WHERE e2.EmployeeID = e.EmployeeID AND e2.DepartmentID <> e.DepartmentID)",Find the department IDs and employee IDs for employees who are only assigned to a single department and do not have any other department assignments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentID, AVG(e.salary) AS AvgSalary FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID HAVING AvgSalary > 60000","Find the average salary of employees in each department and identify the departments where the average salary is greater than 60,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT e.EmployeeID, d.DepartmentID FROM employee_department_2002 e LEFT JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL",List the EmployeeIDs and DepartmentIDs of employees who are associated with departments that no longer exist.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, SUM(CASE WHEN e.EndDate IS NULL THEN 1 ELSE 0 END) AS CurrentlyActive FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName","List the names of all departments and count how many employees are currently active in each department, where active is defined as having no end date recorded for their employment."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","
SELECT d.DepartmentName, MIN(e.StartDate) AS FirstEmployeeStartDate FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY FirstEmployeeStartDate ASC","List the names of departments along with the earliest start date of any employee in each department, and arrange the results by the earliest start date in ascending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003; ,"""Retrieve all details about the projects from the year 2003."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ProjectID, ProjectName FROM project_2003; ","""List the Project IDs and the names of all projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT StartDate, EndDate FROM project_2003 WHERE ProjectID = 1; ","""Retrieve the start and end dates for the project with an ID of 1."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT * FROM employee_projects_2004; ,"Retrieve all the information about the projects that employees were assigned to in 2004, including details like employee ID, project ID, and their roles in those projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Developer'; ",Find the IDs of employees who have the role of 'Developer' and the projects they are assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT DISTINCT Role FROM employee_projects_2004; ,"""List all the unique roles that employees have worked on projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ProjectID, COUNT(EmployeeID) FROM employee_projects_2004 GROUP BY ProjectID; ",Count the number of employees assigned to each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE AssignmentStart > '2023-01-01'; ","""Retrieve the Employee IDs and Project IDs for all employees who started their assignments on projects after January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT ProjectName FROM project_2003 WHERE StartDate < '2022-01-01'; ,"Find the names of projects that started before January 1, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ProjectID, Role FROM employee_projects_2004 WHERE AssignmentEnd IS NULL; ","Find the Project IDs and roles of employees who are currently assigned to projects, where their assignment has not yet ended."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID; ",Retrieve the names of projects along with the roles of employees who are assigned to those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT * FROM project_2003 WHERE EndDate > '2023-01-01'; ,"List all the projects that are still ongoing as of January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT COUNT(*) FROM employee_projects_2004 WHERE EmployeeID = 123; ,"""Count how many projects the employee with ID 123 is assigned to."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT EmployeeID, COUNT(ProjectID) FROM employee_projects_2004 GROUP BY EmployeeID; ",Count the number of projects each employee is assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT ProjectName FROM project_2003 WHERE ProjectName LIKE '%Project%'; ,"Find the names of projects that include the word ""Project"" in their title."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT EmployeeID FROM employee_projects_2004 WHERE Role = 'Manager' AND AssignmentStart < '2023-01-01'; ,"Find the IDs of employees who are assigned the role of 'Manager' and started their assignment before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT MAX(EndDate) FROM project_2003; ,Determine the latest end date of all projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT ProjectID FROM employee_projects_2004 WHERE AssignmentEnd < '2022-12-31'; ,"""Retrieve the Project IDs of all projects where the assignment of employees ended before December 31, 2022."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT DISTINCT ProjectID FROM employee_projects_2004 WHERE Role = 'Tester'; ,"""List the unique project IDs for projects where the role of the employee is 'Tester'."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, ep.EmployeeID FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Lead';","""List the names of projects along with the IDs of employees who have the role of 'Lead' in those projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003;,"""Retrieve all information about the projects listed in the database."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004;,"Retrieve all records from the employee projects table, including details about each employee's project assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectID = 1;,Retrieve the name of the project with the ID of 1.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Manager';",Find the Employee IDs and Project IDs of employees who have the role of Manager in the projects they are assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, StartDate FROM project_2003 WHERE EndDate > '2023-12-31';","Retrieve the names and start dates of projects that will end after December 31, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT Role FROM employee_projects_2004 WHERE EmployeeID = 1001;,"""Retrieve the role of the employee with the ID of 1001 in the project records."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 ORDER BY StartDate DESC;,"""List the names of projects and arrange them starting from the most recently begun."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE AssignmentStart < '2023-01-01';","Retrieve the Employee IDs and Project IDs for all employees who started their assignments before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004;,"""List all the unique roles that employees have in the projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) AS TotalProjects FROM project_2003;,"""Count the total number of projects listed in the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) FROM employee_projects_2004 GROUP BY ProjectID;","""Count the number of employees assigned to each project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectID IN (SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 1001);,Find the names of projects that are assigned to the employee with the ID 1001.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID;",Count the number of projects each employee is assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.Role = 'Developer';","Find the IDs of employees who worked as developers on projects, and also get the names of those projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, MAX(AssignmentEnd) FROM employee_projects_2004 GROUP BY ProjectID;",Retrieve the highest assignment end date for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31';,List the names of projects that started in the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 ORDER BY AssignmentStart;","List the Employee IDs and Project IDs from the employee projects table, and arrange the results by the start date of their assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT Role, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY Role;","""Count how many employees have each role by grouping the results based on their roles."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, p.ProjectName FROM project_2003 p LEFT JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID WHERE e.EmployeeID IS NULL;",Identify the projects from the year 2003 that do not have any assigned employees in 2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, MIN(AssignmentStart) AS FirstAssignment FROM employee_projects_2004 GROUP BY EmployeeID;",Identify the earliest assignment date for each employee from the employee projects data.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) as EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","""Count the number of employees assigned to each project and list the project names along with the employee counts."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(*) as NumberOfAssignments FROM employee_projects_2004 ep GROUP BY ep.Role HAVING COUNT(*) > 1;","""List the roles of employees in projects and count how many times each role has been assigned, but only include roles that have more than one assignment."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL;","""Find the employee IDs and project names for projects that employees are currently assigned to and have not yet ended."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MIN(ep.AssignmentStart) as FirstAssignment FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;",List the names of projects and the earliest assignment start date for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate > '2023-01-01';","""Retrieve the IDs of employees and the names of projects that started after January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, MAX(ep.AssignmentEnd) as LatestEndDate FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID;","""List the project IDs along with the latest end date of each project's assignments."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectName FROM project_2003 p WHERE EXISTS (SELECT 1 FROM employee_projects_2004 ep WHERE ep.ProjectID = p.ProjectID);,Find the names of projects that have employees assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) as RoleCount FROM employee_projects_2004 ep GROUP BY ep.Role ORDER BY RoleCount DESC;","""Count how many employees have each role in the projects and list the roles in order from the most common to the least common."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName FROM project_2003 p WHERE DATEDIFF(p.EndDate, p.StartDate) > 30;","""List the names of projects that have a duration longer than 30 days."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(*) as ProjectCount FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING COUNT(*) >= 2;",Identify the employee IDs of those who are involved in two or more projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, SUM(CASE WHEN Role = 'Manager' THEN 1 ELSE 0 END) as ManagerCount FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY ProjectName;","""List the names of projects along with the total number of employees assigned the role of 'Manager' for each project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart BETWEEN '2023-01-01' AND '2023-12-31';",Find the names of projects and the roles of employees assigned to those projects for assignments that started in the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.AssignmentEnd FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd IS NOT NULL ORDER BY ep.AssignmentEnd DESC;","List the names of projects along with their assignment end dates for employees, showing only those assignments that have an end date recorded, and sort the results by the assignment end date in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < p.StartDate;",Retrieve the employee IDs and project names for those projects where the assignment start date for the employee is before the project's start date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ep.Role FROM employee_projects_2004 ep GROUP BY ep.Role HAVING COUNT(*) = (SELECT MAX(RoleCount) FROM (SELECT COUNT(*) as RoleCount FROM employee_projects_2004 GROUP BY Role));,Identify the role that has been assigned to the most employees in the project assignments from 2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) as NumberOfEmployees FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING NumberOfEmployees > 0;","List the names of projects along with the number of employees assigned to each project, but only include projects that have at least one employee assigned to them."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) as ProjectCount FROM employee_projects_2004 ep GROUP BY ep.EmployeeID ORDER BY ProjectCount DESC;","Count the number of projects assigned to each employee and list them, showing the employees with the most projects first."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, COUNT(*) as AssignmentCount FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING AssignmentCount > 1;",Identify the project IDs of projects that have more than one employee assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MAX(ep.AssignmentStart) as LastAssignment FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING LastAssignment < '2023-01-01';","Find the names of projects and the most recent assignment start date for each project, but only include projects where the last assignment was before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) as RoleAssignments FROM employee_projects_2004 ep WHERE ep.AssignmentEnd IS NOT NULL GROUP BY ep.Role ORDER BY RoleAssignments DESC;","Count the number of employees assigned to each role in projects, only considering those whose assignment has ended, and list the roles in order from the most assigned to the least."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING COUNT(ep.EmployeeID) > 1","Retrieve the names of projects that have more than one employee assigned to them, along with a count of how many employees are working on each of those projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(*) AS TotalAssignments FROM employee_projects_2004 ep GROUP BY ep.Role ORDER BY TotalAssignments DESC","""Count the number of project assignments for each role in the employee projects and list them in order from the most assignments to the least."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, SUM(CASE WHEN ep.Role = 'Manager' THEN 1 ELSE 0 END) AS ManagerCount FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName","""List the names of projects along with the number of managers assigned to each project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep INNER JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart <= '2023-12-31' AND ep.AssignmentEnd >= '2023-01-01'",Retrieve the Employee IDs and Project names for employees who were assigned to projects anytime during the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, DATEDIFF(p.EndDate, p.StartDate) AS Duration FROM project_2003 p WHERE Duration > 30","""List the names of projects that have a duration longer than 30 days."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, MAX(ep.AssignmentEnd) AS LastAssignment FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING LastAssignment < '2023-01-01'","Identify the employee IDs and the date of their last project assignment for employees whose last assignment ended before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TotalEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > current_timestamp GROUP BY p.ProjectName ORDER BY TotalEmployees DESC","List the names of projects along with the total number of employees currently assigned to each project, and sort the results so that the projects with the most employees appear first. Only include projects that have ongoing employee assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Developer' AND p.StartDate >= '2022-01-01'","Find the IDs of employees who have the role of a Developer in projects that started on or after January 1, 2022, along with the names of those projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, SUM(CASE WHEN ep.Role = 'Tester' THEN 1 ELSE 0 END) AS TesterCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName","""List the names of projects and count how many testers are assigned to each project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, COUNT(ep.EmployeeID) FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) = 0",List the project IDs of projects that do not have any employees assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, MIN(ep.AssignmentStart) AS FirstAssignment FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING FirstAssignment < '2022-01-01'","Identify the Employee IDs of employees whose first assignment started before January 1, 2022, along with the date of that first assignment."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart BETWEEN '2022-01-01' AND '2023-12-31'","""Retrieve the names of projects and the roles of employees who were assigned to those projects between January 1, 2022, and December 31, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(p.ProjectID) AS TotalProjects FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY ep.EmployeeID HAVING TotalProjects > 3","Identify the employee IDs of those who are assigned to more than three projects, along with the total number of projects they are involved in."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.Role","Count how many employees have each role in projects that started before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectID FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.EndDate IS NOT NULL","Retrieve the employee IDs and project IDs for projects that have a defined end date, including all employees assigned to those projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > '2023-01-01' AND ep.AssignmentStart < '2023-12-31'",Find the names of projects and the roles of employees assigned to them for projects where the employee's assignment started before the end of 2023 and ended after the beginning of 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(DISTINCT p.ProjectID) AS ProjectsAssigned FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY ep.EmployeeID HAVING ProjectsAssigned >= 2",Identify the employees who have been assigned to two or more different projects and count how many unique projects each employee is involved in.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, AVG(DATEDIFF(ep.AssignmentEnd, ep.AssignmentStart)) AS AvgDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.Role","""Retrieve the average duration of assignments for different roles in projects that started before 2023, by calculating the length of time each employee spent on those assignments."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TotalActiveEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > current_timestamp GROUP BY p.ProjectName","""List the names of projects and count how many employees are currently assigned to each project that is still active."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd < '2023-01-01'","Retrieve the employee IDs and project names for all employees who completed their assignments on projects before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, SUM(CASE WHEN ep.Role = 'Lead' THEN 1 ELSE 0 END) AS LeadCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID","Count the number of employees assigned as 'Lead' for each project, and provide the project ID along with this count."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS NumberOfProjects FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING NumberOfProjects > 5",Identify employees who are assigned to more than five different projects and count the total number of projects each of those employees is involved in.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING EmployeeCount > 5 ","""List the names of projects that have more than five employees assigned to them."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ep.EmployeeID, e.FirstName, e.LastName, COUNT(p.ProjectID) FROM employee_projects_2004 ep JOIN employees e ON ep.EmployeeID = e.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.EmployeeID, e.FirstName, e.LastName HAVING COUNT(p.ProjectID) > 2 ","Identify the employees who have worked on more than two projects that started before the year 2023, and list their employee IDs along with their first and last names."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL ","""Retrieve the first and last names of employees who are currently assigned to projects and the names of those projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, DATEDIFF(p.EndDate, p.StartDate) AS ProjectDuration FROM project_2003 p WHERE DATEDIFF(p.EndDate, p.StartDate) > 30 ORDER BY ProjectDuration DESC ","""List the names of projects that lasted longer than 30 days, along with their duration, and sort the results by the duration in descending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_2004 ep) ",Find the IDs and names of employees who are not assigned to any projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, AVG(TIMESTAMPDIFF(DAY, ep.AssignmentStart, ep.AssignmentEnd)) AS AvgAssignmentDuration FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName ",Calculate the average duration of assignments for each project by finding the average number of days that employees worked on those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employees e WHERE EXISTS (SELECT 1 FROM employee_projects_2004 ep WHERE ep.EmployeeID = e.EmployeeID AND ep.Role = 'Manager') ",Find the first and last names of employees who have held a Manager role in any project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate > ep.AssignmentStart ","Retrieve the first and last names of employees along with the names of the projects they are working on, but only for those projects that started after the employees began their assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectID, COUNT(DISTINCT ep.EmployeeID) AS UniqueEmployees FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING UniqueEmployees > 1 ",Identify the projects from 2003 that have more than one unique employee assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.EmployeeID, e.FirstName FROM employees e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_2004 ep WHERE ep.AssignmentStart < '2023-01-01') ","""Retrieve the IDs and first names of employees who have not been assigned to any projects that started before January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TotalAssignments FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING TotalAssignments > 3 ",Find the names of projects that have more than three employee assignments.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, SUM(ep.AssignmentEnd - ep.AssignmentStart) AS TotalHoursAssigned FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName, e.LastName ","""Calculate the total hours assigned to each employee by summing their assignment durations on various projects, and list the first and last names of those employees."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NOT NULL AND ep.AssignmentStart <= ep.AssignmentEnd ","Retrieve the first and last names of employees along with the names of the projects they worked on, specifically for those projects where the employee's assignment has a recorded end date and the assignment start date is earlier than or equal to the end date."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employees e JOIN (SELECT ep.EmployeeID FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING COUNT(ep.ProjectID) > 3) AS sub ON e.EmployeeID = sub.EmployeeID ",Find the first and last names of employees who are assigned to more than three projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectID, SUM(CASE WHEN ep.Role = 'Developer' THEN 1 ELSE 0 END) AS DeveloperCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID ",Count the number of developers assigned to each project and list this information along with the project IDs.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employees e WHERE NOT EXISTS (SELECT * FROM employee_projects_2004 ep WHERE ep.EmployeeID = e.EmployeeID AND ep.AssignmentEnd IS NULL) ","""List the first and last names of employees who are not currently assigned to any active projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS CompletedProjects FROM employees e LEFT JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd < '2023-01-01' GROUP BY e.FirstName, e.LastName ","Find the first and last names of employees and count how many distinct projects they completed before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT p.ProjectName, e.FirstName, e.LastName FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID JOIN employees e ON ep.EmployeeID = e.EmployeeID WHERE p.EndDate < NOW() ORDER BY p.EndDate DESC;","Retrieve the names of projects that have already ended, along with the first and last names of the employees who worked on those projects, and arrange the results by the project end dates from most recent to oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005,"""Retrieve all the performance reviews from the year 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM employee_performance_2006,"""Retrieve all the records of employee performance reviews conducted in 2006, including details about each employee and their review scores."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, Rating FROM performance_review_2005","Retrieve the Review ID, Employee ID, and Rating for all performance reviews from the year 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006",Retrieve the IDs of employees and their corresponding review IDs from the employee performance data for the year 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT EmployeeID FROM performance_review_2005,"""Retrieve a list of unique employee IDs from the performance reviews conducted in 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, Comments FROM performance_review_2005 WHERE Rating > 4.0",Retrieve the review dates and comments from performance reviews for employees who received a rating higher than 4.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM performance_review_2005 WHERE Rating IS NOT NULL,Count the total number of performance reviews that have a rating recorded.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(Rating) FROM performance_review_2005,Calculate the average rating from all performance reviews conducted in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT Comments FROM performance_review_2005 WHERE ReviewerID = 1,Retrieve the comments from performance reviews that were written by the reviewer with an ID of 1.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, Rating FROM performance_review_2005 ORDER BY Rating DESC","Retrieve the Employee IDs and their corresponding ratings from the performance reviews for 2005, and list them in order from the highest rating to the lowest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, ReviewDate FROM performance_review_2005 WHERE EmployeeID = 101",Retrieve the review IDs and review dates for the performance reviews of the employee with the ID 101.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(ReviewScore) FROM employee_performance_2006 WHERE EmployeeID = 102,Calculate the average review score for the employee with ID 102.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005 WHERE ReviewDate >= '2005-01-01' AND ReviewDate < '2006-01-01',Retrieve all performance reviews from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore > 3.5",Find the employee IDs and review IDs of employees who received a performance score greater than 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT ReviewerID FROM performance_review_2005,"""Retrieve a list of unique reviewers from the performance reviews conducted in 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM performance_review_2005,Count the number of unique employees who received performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(ReviewID) FROM employee_performance_2006 GROUP BY EmployeeID",Count the number of performance reviews for each employee based on their performance data from 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT Rating, COUNT(*) FROM performance_review_2005 GROUP BY Rating",Count how many performance reviews have each rating in 2005 and show the ratings along with their respective counts.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Rating FROM performance_review_2005 WHERE Rating IS NOT NULL ORDER BY ReviewID","Retrieve the Review IDs and Ratings from the performance reviews for 2005 where the Ratings are provided, and organize the results by the Review IDs."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM performance_review_2005 WHERE Comments IS NOT NULL,Count the number of performance reviews in 2005 that have comments provided.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(Rating) FROM performance_review_2005 GROUP BY ReviewerID,Calculate the average rating given by each reviewer in the performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005; ,"""Retrieve all the details of performance reviews conducted in 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT * FROM employee_performance_2006; ","Retrieve all records of employee performance reviews from 2006, including details about each employee and their corresponding review scores."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, EmployeeID, ReviewDate FROM performance_review_2005 WHERE Rating > 3; ","Retrieve the review IDs, employee IDs, and review dates for all performance reviews that have a rating greater than 3."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore < 3; ",Find the Employee IDs and Review IDs of employees who received a review score less than 3.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewerID, COUNT(*) FROM performance_review_2005 GROUP BY ReviewerID; ",Count how many reviews each reviewer has given in the performance review records from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, AVG(Rating) FROM performance_review_2005 GROUP BY EmployeeID; ",Calculate the average rating for each employee based on their performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewID, e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID; ",Retrieve the review IDs along with the first and last names of the reviewers from the performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewDate, p.Rating FROM performance_review_2005 p ORDER BY p.ReviewDate DESC; ","Retrieve the dates and ratings of performance reviews from 2005, sorted from the most recent to the oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, COUNT(p.ReviewID) FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID GROUP BY e.EmployeeID; ",Count the number of performance reviews for each employee based on the review information from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT ReviewerID FROM performance_review_2005 WHERE Rating >= 4; ",List the unique IDs of reviewers who gave a rating of 4 or higher in the performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewID, p.Comments FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE e.ReviewScore > 4; ",Retrieve the Employee IDs and comments from performance reviews for employees who received a review score greater than 4.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, MAX(Rating) FROM performance_review_2005 GROUP BY ReviewID; ",Retrieve the highest rating for each performance review from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, SUM(ReviewScore) FROM employee_performance_2006 GROUP BY EmployeeID HAVING SUM(ReviewScore) > 10; ",Calculate the total review scores for each employee and list the employees whose total score is greater than 10.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewerID, AVG(p.Rating) FROM performance_review_2005 p GROUP BY p.ReviewerID HAVING AVG(p.Rating) > 4; ","Identify the reviewers who have given an average rating greater than 4 for employee performance reviews. For each of these reviewers, provide their ID and the average rating they have given."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.EmployeeID, COUNT(p.ReviewID) FROM performance_review_2005 p JOIN employee_1001 e ON p.EmployeeID = e.EmployeeID WHERE e.Department = 'Sales' GROUP BY p.EmployeeID; ",Count how many performance reviews each employee in the Sales department has received.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewID, p.Rating FROM performance_review_2005 p WHERE p.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31'; ",Retrieve the review IDs and ratings from performance reviews that were conducted in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewID FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE p.Rating IN (1, 2); ",Find the employee IDs and corresponding review IDs of employees whose performance reviews received a rating of either 1 or 2.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT COUNT(*) FROM performance_review_2005 WHERE Comments IS NOT NULL; ",Count the total number of performance reviews from 2005 that include comments.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT p.EmployeeID FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewScore >= 3; ","Identify the unique IDs of employees who received a performance review score of 3 or higher in 2006, based on their reviews from 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT AVG(e.ReviewScore) FROM employee_performance_2006 e;",Calculate the average review score from the employee performance reviews for 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID ",Calculate the average rating for each employee based on their performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID HAVING COUNT(*) > 5 ",Identify the reviewers who have conducted more than five performance reviews and count how many reviews each of them has done.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 WHERE Rating >= 3.5 GROUP BY EmployeeID ",Count how many performance reviews each employee received where the rating was 3.5 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.EmployeeID, e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' ",Retrieve the first and last names of employees who received performance reviews in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT ReviewID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY ReviewID ",Calculate the average review score for each performance review by grouping the scores based on their review IDs.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT EmployeeID, MAX(Rating) AS HighestRating FROM performance_review_2005 GROUP BY EmployeeID ","""Find the highest performance rating for each employee based on their review from 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.ReviewerID, e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID WHERE pr.Rating < 3 ",Identify the first and last names of reviewers who assigned a rating lower than 3 in the performance reviews for 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.ReviewID, pr.Rating, e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID ORDER BY pr.ReviewDate DESC ","Retrieve the review IDs and ratings from performance reviews along with the first and last names of the employees, and organize the results by the review dates from most recent to oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT e.EmployeeID, COUNT(ep.ReviewID) as ReviewScoresCount FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating >= 4 GROUP BY e.EmployeeID ","Count how many performance reviews each employee received that had a rating of 4 or higher, and provide the employee IDs along with the total count."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT ReviewID, COUNT(*) AS EmployeeCount FROM employee_performance_2006 WHERE ReviewScore > 80 GROUP BY ReviewID HAVING COUNT(*) >= 3 ",Find the review IDs for performance reviews that have received more than 80 as a score and have been reviewed by at least three employees.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageReviewScore FROM employee_performance_2006 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ",Calculate the average review score for each employee based on their performance reviews from 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM performance_review_2005 WHERE Rating < 2) ","""Find the first and last names of employees who received a performance rating lower than 2 in their review."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
", SELECT AVG(Rating) AS OverallAverage FROM performance_review_2005 ,Calculate the average rating from all performance reviews conducted in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.EmployeeID, COUNT(DISTINCT ep.ReviewID) AS UniqueReviews FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID GROUP BY pr.EmployeeID ",Count the number of unique performance reviews for each employee based on the reviews from 2005 and show the results by employee ID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.ReviewerID, MAX(pr.Rating) AS HighestRating FROM performance_review_2005 pr GROUP BY pr.ReviewerID ","""Find the highest performance rating given by each reviewer in the performance reviews from 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore = (SELECT MAX(ReviewScore) FROM employee_performance_2006) ",Identify the EmployeeID and ReviewID of the employee with the highest review score in the performance data for 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.ReviewDate, AVG(pr.Rating) AS AverageRating FROM performance_review_2005 pr GROUP BY strftime('%Y-%m', pr.ReviewDate) ","""Calculate the average rating of performance reviews for each month in the year 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT pr.EmployeeID, e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.Rating > 3.5 ORDER BY pr.ReviewDate ","Find the first and last names of employees who received a performance rating higher than 3.5, and arrange the results by the date of their review."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT ReviewerID, AVG(Rating) as AvgReviewerRating FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) < 3 ",Identify the reviewers who have an average rating of less than 3 for employee performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," SELECT e.FirstName, e.LastName, (SELECT COUNT(*) FROM employee_performance_2006 ep WHERE ep.EmployeeID = e.EmployeeID) AS ReviewCount FROM employee_1001 e WHERE EXISTS (SELECT 1 FROM performance_review_2005 pr WHERE pr.EmployeeID = e.EmployeeID AND pr.Rating < 3);","List the first and last names of employees who have received a performance rating of less than 3, along with the number of reviews they have in the year 2006."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY EmployeeID HAVING COUNT(*) > 2","""Identify the employees who have received more than two performance reviews and count how many reviews each of them has received."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID ORDER BY AverageRating DESC","Calculate the average rating given by each reviewer in the performance reviews from 2005, and list the reviewers in order from the highest to the lowest average rating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(Rating) AS MaxRating FROM performance_review_2005 GROUP BY EmployeeID",Identify each employee and determine their highest performance review rating from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewerID, e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID WHERE p.Rating > 4","""Retrieve the first and last names of reviewers who gave a performance rating greater than 4."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY EmployeeID HAVING AVG(ReviewScore) >= 3.5",Find the average review score for each employee and list those employees who have an average score of 3.5 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewDate, AVG(Rating) AS AvgRating FROM performance_review_2005 p WHERE p.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY p.ReviewDate",Find the average rating of performance reviews for each date in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, p.Rating FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID WHERE p.Comments IS NOT NULL","Retrieve the first and last names of employees, along with their performance review ratings, for those reviews that include comments."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewerID, COUNT(p.ReviewerID) AS TotalReviews FROM performance_review_2005 p GROUP BY p.ReviewerID HAVING TotalReviews > 1","""Count how many reviews each reviewer has written and list the reviewers who have written more than one review."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(p.Rating) AS HighestRating FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID GROUP BY e.EmployeeID","Retrieve the employee IDs, first names, and last names of all employees, along with their highest performance review ratings."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_performance_2006 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) < 3",Find the Employee IDs of employees who have an average review score of less than 3 based on their performance reviews from 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, AVG(ep.ReviewScore) AS AverageReviewScore FROM employee_performance_2006 ep JOIN performance_review_2005 p ON ep.ReviewID = p.ReviewID GROUP BY p.ReviewID",Calculate the average review score for each performance review from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, p.ReviewDate FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID WHERE p.Rating >= 4 ORDER BY p.ReviewDate DESC","Retrieve the first and last names of employees who received a performance review rating of 4 or higher, along with the date of their review, and present the results with the most recent reviews first."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, COUNT(p.ReviewID) AS NumberOfReviews FROM employee_1001 e LEFT JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID GROUP BY e.EmployeeID HAVING NumberOfReviews > 3","Identify the employees who have received more than three performance reviews. For each employee, list their ID and the total number of reviews they have received."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, AVG(p.Rating) AS AverageRating FROM performance_review_2005 p GROUP BY p.ReviewID HAVING AVG(p.Rating) < 2.5",Identify the review IDs of performance reviews that have an average rating lower than 2.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.ReviewerID WHERE p.Rating > (SELECT AVG(Rating) FROM performance_review_2005) ",Find the first and last names of employees who served as reviewers and gave ratings that are higher than the average rating from all performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(DISTINCT(e.EmployeeID)) AS NumEmployees FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM performance_review_2005 WHERE Rating >= 4),Count the number of distinct employees who received a performance review rating of 4 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AveragePerformance FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) > 3.5",Identify the employees and calculate their average performance scores from their reviews. Only include those employees whose average performance score is greater than 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, ep.ReviewScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ReviewScore IS NOT NULL","Retrieve the first names and last names of employees along with their review scores, but only include those who have a review score available."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 p LEFT JOIN employee_1001 e ON p.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(*) > 5","""Count how many performance reviews each employee received and list only those employees who have more than five reviews."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, p.ReviewDate, e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID WHERE p.ReviewDate >= '2005-01-01' AND p.ReviewDate <= '2005-12-31' ","Retrieve the review IDs and dates, along with the first and last names of the reviewers for all performance reviews conducted in the year 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(pr.Rating) AS AverageRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING AVG(pr.Rating) > 3.5 ",Find the names and employee IDs of employees who have an average performance review rating greater than 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.EmployeeID, e.FirstName, e.LastName, (SELECT COUNT(*) FROM performance_review_2005 pr WHERE pr.ReviewerID = e.EmployeeID) AS ReviewCount FROM employee_1001 e WHERE (SELECT COUNT(*) FROM performance_review_2005 pr WHERE pr.ReviewerID = e.EmployeeID) > 5 ","Identify the employee IDs, first names, and last names of employees who have reviewed more than five other employees."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, pr.ReviewDate, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' AND pr.Rating >= 4.0 ORDER BY pr.Rating DESC ","Retrieve the first and last names of employees along with their review dates and ratings for performance reviews conducted in 2005, where the ratings are 4.0 or higher, and sort the results by rating in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, SUM(ep.ReviewScore) AS TotalScore FROM employee_performance_2006 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.ReviewDate >= '2005-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(ep.ReviewScore) > 10.0 ","Find the first and last names of employees who received performance review scores in 2005, where the total score is greater than 10. Also, calculate the total score for each employee based on their reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT r.ReviewerID, e.FirstName, e.LastName, COUNT(pr.ReviewID) AS ReviewCount FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID JOIN employee_1001 r ON pr.ReviewerID = r.EmployeeID GROUP BY r.ReviewerID, e.FirstName, e.LastName HAVING COUNT(pr.ReviewID) > 3 ","Count how many performance reviews each reviewer has completed, and list the names of those reviewers who have conducted more than three reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, MAX(pr.Rating) AS HighestRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY HighestRating DESC LIMIT 5 ","Retrieve the names of the top five employees with the highest performance review ratings from 2005, including their first and last names."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e1.FirstName, e1.LastName, e2.FirstName AS ReviewerFirstName, e2.LastName AS ReviewerLastName, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e1 ON pr.EmployeeID = e1.EmployeeID JOIN employee_1001 e2 ON pr.ReviewerID = e2.EmployeeID WHERE pr.Rating < 2.5 ","Retrieve the first and last names of employees and their reviewers, along with the ratings given in performance reviews where the rating is less than 2.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) IS NOT NULL ","Retrieve the first and last names of employees along with their average review scores from the performance records, but only include those who have received reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, COUNT(pr.ReviewID) AS TotalReviews FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.Rating IS NOT NULL GROUP BY e.EmployeeID HAVING TotalReviews > 5 ORDER BY TotalReviews DESC ","List the first and last names of employees who have received more than five performance reviews, along with the total number of reviews they have received, but only include those reviews that have a rating. Sort the results so that employees with the most reviews appear first."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, COUNT(pr.ReviewID) AS ReviewCount FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE e.EmployeeID NOT IN (SELECT DISTINCT ReviewerID FROM performance_review_2005) GROUP BY e.EmployeeID ","List the first and last names of employees who have not reviewed anyone, along with the total number of performance reviews they have received."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, pr.ReviewDate, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.ReviewerID = (SELECT EmployeeID FROM employee_1001 WHERE FirstName = 'John' AND LastName = 'Doe') ","Retrieve the first and last names of employees along with the dates and ratings of their performance reviews, specifically for those reviews conducted by an employee named John Doe."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT pr.ReviewerID, COUNT(pr.ReviewID) AS ReviewCount, AVG(pr.Rating) AS AverageRating FROM performance_review_2005 pr GROUP BY pr.ReviewerID HAVING AVG(pr.Rating) < 3.0 ","Identify the reviewers who conducted performance reviews and count how many reviews each reviewer completed, along with the average rating they gave. Only include reviewers whose average rating is less than 3.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating >= 4.0) ",Find the first and last names of employees who received a performance review rating of 4.0 or higher in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, SUM(ep.ReviewScore) AS TotalScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ReviewID IN (SELECT ReviewID FROM performance_review_2005 WHERE Rating > 3.0) GROUP BY e.EmployeeID ","""List the first and last names of employees along with their total review scores from the year 2006, but only include those employees who had a performance review in 2005 with a rating greater than 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, AVG(pr.Rating) AS AvgRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.ReviewDate = (SELECT MAX(ReviewDate) FROM performance_review_2005) GROUP BY e.EmployeeID ",Find the first and last names of employees and calculate the average rating from their most recent performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM performance_review_2005 WHERE Rating IS NOT NULL) ","""List the first and last names of employees who did not receive a performance review with a rating."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.FirstName, e.LastName, COALESCE(AVG(ep.ReviewScore), 0) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AverageScore < 3.0 ","Retrieve the first and last names of employees who have an average performance review score of less than 3.0, even if they have not received any reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
SELECT e.EmployeeID, e.FirstName, COUNT(DISTINCT pr.ReviewID) AS DistinctReviewCount FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING DistinctReviewCount > 2 ",Find the Employee IDs and first names of employees who have received more than two distinct performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
```","Find the review ratings and comments for each employee from the performance reviews conducted in 2005, along with their corresponding review scores from the performance data of 2006."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001,"""Retrieve all the information about the different departments listed in the database."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM employee_3002,"""Retrieve all information about all employees, including their names, job titles, department IDs, and salaries."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM salary_history_3003,"""Retrieve all records from the salary history, including every salary entry along with the date it became effective."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002","""Retrieve the first and last names of all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001,"""List the names of all departments."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 50000","""Retrieve the first and last names of employees who have a salary greater than 50,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1,"""Get the name of the department that has the ID of 1."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, FirstName, LastName FROM employee_3002 WHERE DepartmentID = 2","""List the IDs, first names, and last names of employees who work in department 2."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE JobTitle = 'Manager',Count the number of employees who have the job title of 'Manager'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002,Retrieve a list of unique job titles from the employee records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM department_3001,"""Count the total number of departments in the database."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, SalaryAmount FROM salary_history_3003","""Retrieve the IDs of employees along with their corresponding salary amounts from the salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT LastName FROM employee_3002 ORDER BY LastName,Retrieve the last names of all employees and sort them in alphabetical order.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IS NOT NULL",Retrieve the first and last names of employees who are assigned to a department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT Salary FROM salary_history_3003 WHERE EmployeeID = 1,"""Retrieve the salary history for the employee with the ID of 1."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, COUNT(*) FROM employee_3002 GROUP BY DepartmentID","""Count how many employees work in each department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary < 40000","Find the first and last names of employees who earn less than 40,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID","""List the first and last names of employees along with the names of their respective departments."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID","""Retrieve the first and last names of employees along with their salary amounts from the salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IN (SELECT DepartmentID FROM department_3001 WHERE DepartmentName LIKE 'Sales%')",List the first and last names of employees who work in departments with names that start with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT e.JobTitle FROM employee_3002 e WHERE e.Salary >= (SELECT AVG(Salary) FROM employee_3002);,Identify the unique job titles of employees whose salary is above the average salary of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001,"""Retrieve all information about the departments from the database."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM employee_3002,"""Retrieve all information about all employees including their names, job titles, salaries, and department affiliations."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1,"""Retrieve the name of the department with the ID of 1."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE JobTitle = 'Manager'",Find the first and last names of employees who hold the job title of 'Manager'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 WHERE Salary > 50000","""Find the first and last names of employees who earn more than 50,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID",Retrieve the first names and last names of employees along with the names of their departments.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE DepartmentID = 2,Count the number of employees who work in the department with the ID of 2.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT DepartmentID FROM employee_3002,Retrieve a list of unique department identifiers from the employee records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, SalaryAmount FROM salary_history_3003 WHERE SalaryAmount > 60000","""Find the employee IDs and their salary amounts for employees who earn more than 60,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 ORDER BY LastName ASC","Retrieve the first and last names of all employees, and list them in alphabetical order by their last names."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID","Retrieve the first and last names of employees along with the names of the departments they belong to, including employees who may not be assigned to any department."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = 1,Calculate the average salary of employees who belong to the department with the ID of 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary < (SELECT AVG(Salary) FROM employee_3002)",Find the first and last names of employees whose salary is less than the average salary of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE JobTitle IS NOT NULL,Count the total number of employees who have a job title listed.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IN (1, 2)","""Retrieve the first and last names of employees who work in departments 1 and 2."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID","""Retrieve the first names and last names of employees along with their salary amounts from the employee records and their salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002,"""List all the unique job titles of employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'","Find the first and last names of employees who work in departments that start with the word 'Sales', along with the names of those departments."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE Salary IS NOT NULL;,"""Count the number of employees who have a recorded salary."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentName, COUNT(*) as EmployeeCount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY DepartmentName HAVING EmployeeCount > 5 ","""Identify the names of departments that have more than 5 employees and count how many employees are in each of those departments."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 60000 ORDER BY LastName ASC ","""List the first and last names of employees who earn more than 60,000, and arrange the names in alphabetical order by their last names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, AVG(e.Salary) as AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ",Calculate the average salary of employees in each department and list the department names along with their average salaries.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, sh.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID WHERE sh.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID) ",Retrieve the first and last names of employees along with their most recent salary from the salary history records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.JobTitle, COUNT(*) as JobTitleCount FROM employee_3002 e GROUP BY e.JobTitle HAVING JobTitleCount > 3 ","""Identify the job titles that have more than three employees working in those positions."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e ORDER BY e.Salary DESC LIMIT 10 ",Retrieve the names and salaries of the top ten highest-paid employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, SUM(e.Salary) as TotalSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING TotalSalary > 200000 ","List the names of departments and the total salaries of employees in those departments, but only include departments where the total salary exceeds 200,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(sh.SalaryID) as SalaryChanges FROM employee_3002 e LEFT JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID GROUP BY e.EmployeeID HAVING SalaryChanges > 1 ",Identify the first and last names of employees who have had more than one salary change in their history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName, e.JobTitle ","""Count the number of employees in each department for each job title, and list the department names along with the job titles."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IN (SELECT DepartmentID FROM department_3001 WHERE DepartmentName LIKE '%Sales%') ","""Find the first and last names of employees who work in departments with names that include 'Sales'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) ORDER BY e.Salary DESC ","Retrieve the first names, last names, and salaries of employees who earn more than the average salary, and list them in descending order of their salaries."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, MIN(e.Salary) as MinSalary, MAX(e.Salary) as MaxSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ",Retrieve the names of departments along with the minimum and maximum salaries of employees in each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, sh.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID WHERE sh.SalaryAmount > e.Salary ",Find the first and last names of employees who have a salary history record showing a salary amount greater than their current salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM salary_history_3003) ",Retrieve the first and last names of employees who do not have any recorded salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ","""List the names of departments and count how many unique employees work in each department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary = (SELECT MAX(Salary) FROM employee_3002) ","Find the first and last names of employees who have the highest salary in the company, along with their salary amount."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT d.DepartmentName, AVG(e.Salary) as AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING AverageSalary > 50000 ","Find the average salary of employees in each department and list those departments where the average salary is greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(sh.SalaryID) as SalaryHistoryCount FROM employee_3002 e LEFT JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID GROUP BY e.EmployeeID HAVING SalaryHistoryCount > 0 ","List the first and last names of employees who have salary history records, along with the count of those records for each employee."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT DepartmentID, COUNT(*) FROM employee_3002 GROUP BY DepartmentID HAVING COUNT(*) > 2 ","""Identify the departments that have more than two employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'HR' ORDER BY e.LastName;","""Retrieve the first and last names of employees who work in the HR department, and arrange the results by their last names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5 ",List the names of departments that have more than 5 employees working in them.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.JobTitle, AVG(e.Salary) AS AverageSalary FROM employee_3002 e GROUP BY e.JobTitle ORDER BY AverageSalary DESC ",Calculate the average salary for each job title and list them in order from highest to lowest average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID) ",Retrieve the first and last names of employees along with their most recent salary based on the latest effective date for each employee's salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ","""List the total salary for each department by adding up the salaries of all employees in that department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.JobTitle, COUNT(e.EmployeeID) AS JobTitleCount FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) GROUP BY e.JobTitle HAVING COUNT(e.EmployeeID) > 2 ",Find the job titles of employees who earn more than the average salary and have more than two employees in the same job title. Count how many employees hold each job title that meets these criteria.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) ORDER BY e.Salary DESC ","Find the first and last names of employees who earn more than the average salary, and display their salaries in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%' ",Find the first and last names of employees who work in departments with names that start with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount = (SELECT MAX(SalaryAmount) FROM salary_history_3003) ",Retrieve the first and last names of employees along with the date when they received their highest salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.DepartmentID, AVG(e.Salary) AS AverageDepartmentSalary FROM employee_3002 e GROUP BY e.DepartmentID ",Calculate the average salary of employees in each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) AS JobCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName, e.JobTitle ","""Count the number of employees for each job title in each department and list the department names along with the corresponding job titles and their employee counts."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary > (SELECT MAX(Salary) FROM employee_3002 WHERE JobTitle = 'Manager') ",Find the first and last names of employees who earn more than the highest salary of managers.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000 ORDER BY s.EffectiveDate DESC ","""Retrieve the first and last names of employees along with their salaries who have a salary greater than 60,000, and show the most recent salary first."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, SUM(s.SalaryAmount) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentName ","""Calculate the total salaries paid to employees in each department and display the department names along with their corresponding total salary amounts."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.JobTitle, COUNT(e.EmployeeID) AS EmployeeCount FROM employee_3002 e WHERE e.Salary < 30000 GROUP BY e.JobTitle HAVING COUNT(e.EmployeeID) > 0 ","Identify the job titles of employees who earn less than 30,000 and count how many employees hold each job title, showing only those job titles that have at least one employee."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.DepartmentID, AVG(e.Salary) AS AverageSalary FROM employee_3002 e WHERE e.DepartmentID IS NOT NULL GROUP BY e.DepartmentID HAVING AVG(e.Salary) > 50000 ","Calculate the average salary for each department, only including departments that have employees with salaries greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) AS MaxSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName, e.LastName HAVING MaxSalary < 70000 ","Find the first and last names of employees who have the highest salary in their history, but only include those whose highest salary is less than 70,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IN (SELECT DepartmentID FROM department_3001 WHERE DepartmentName = 'Marketing') ",Find the first and last names of employees who work in the Marketing department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.JobTitle, COUNT(DISTINCT e.DepartmentID) AS UniqueDepartments FROM employee_3002 e GROUP BY e.JobTitle HAVING UniqueDepartments > 1 ",List the job titles of employees who work in more than one unique department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary < (SELECT AVG(Salary) FROM employee_3002) ",Find the first and last names of employees and their department names for those who earn less than the average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 GROUP BY EmployeeID HAVING COUNT(SalaryID) > 1)",Find the first and last names of employees who have received multiple salary changes in the history records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002);","Retrieve the first and last names of employees along with their department names, but only include those employees whose salary is above the average salary of all employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID);","Retrieve the first names, last names, job titles, and latest salary amounts of employees based on their most recent salary information."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5;",List the names of departments that have more than 5 employees working in them.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary = (SELECT MAX(Salary) FROM employee_3002);",Find the first and last names of employees who have the highest salary in the company.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, SUM(s.SalaryAmount) AS TotalSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SUM(s.SalaryAmount) > 100000;","Retrieve the first and last names of employees whose total salary over time is greater than 100,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e INNER JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = e.DepartmentID);","Retrieve the first and last names of employees along with their department names, for those employees whose salary is higher than the average salary of their respective departments."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentID, SUM(e.Salary) AS TotalDepartmentSalary FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID ORDER BY TotalDepartmentSalary DESC;","Calculate the total salary for each department and list the departments in order of their total salary, starting with the highest total."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 80000);","""Find the first and last names of employees who have had a salary greater than 80,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName, e.JobTitle HAVING COUNT(e.EmployeeID) > 1;","List the names of departments and job titles where there are more than one employee, along with the count of employees in each department for those job titles."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY AverageSalary DESC;",Find the average salary of employees in each department and list the departments in order from highest to lowest average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT MIN(Salary) FROM employee_3002);",Find the first and last names of employees who earn less than the lowest salary among all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) AS MaxSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING MAX(s.SalaryAmount) > 90000;","Find the first and last names of employees who have a maximum salary greater than 90,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE EXISTS (SELECT 1 FROM salary_history_3003 s WHERE s.EmployeeID = e.EmployeeID AND s.SalaryAmount > 75000);","Find the first and last names of employees who have a salary history showing an amount greater than 75,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentID, AVG(s.SalaryAmount) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentID HAVING AVG(s.SalaryAmount) > 60000;","Determine the average salary for each department and list those departments where the average salary exceeds 60,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID));","Find the first names, last names, and job titles of employees who have a salary history recorded for the most recent effective date."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName IS NULL;",Find the first and last names of employees who do not belong to any department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryHistoryCount FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 3;",List the first and last names of employees who have more than three recorded salary history entries.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = e.DepartmentID) AND d.DepartmentName LIKE 'Marketing%';",List the first and last names of employees who work in departments with names starting with 'Marketing' and have a salary higher than the average salary of other employees in their department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT AVG(s.SalaryAmount) FROM salary_history_3003 s WHERE s.EmployeeID IN (SELECT EmployeeID FROM employee_3002 WHERE JobTitle = 'Manager');,Calculate the average salary amount for all employees who have the job title of 'Manager'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001,"""Retrieve all the information about the departments."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002,"""Retrieve all information about all employees in the database."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager'","Find the IDs, first names, and last names of all employees who have the job title of 'Manager.'"
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1,Find the name of the department that has the ID of 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID = 2",Retrieve the first and last names of employees who work in department number 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT * FROM employee_4002 WHERE EmployeeID IN (1, 2, 3)","Retrieve the information for employees with the IDs 1, 2, and 3."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT DepartmentID FROM employee_4002,List all the unique Department IDs from the employee records.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName","""List the first and last names of all employees, sorted by their last names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 3,"""Count the number of employees who work in department 3."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID",Retrieve the first and last names of employees along with the names of the departments they belong to.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT FirstName || ' ' || LastName AS FullName FROM employee_4002,Retrieve the full names of all employees by combining their first and last names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE JobTitle LIKE 'Dev%',"Count the number of employees whose job title begins with ""Dev""."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT DepartmentID, COUNT(*) AS NumEmployees FROM employee_4002 GROUP BY DepartmentID","""Count how many employees work in each department and list the department IDs along with the number of employees in those departments."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002 WHERE LastName LIKE 'S%',Retrieve all information about employees whose last names start with the letter 'S'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT JobTitle FROM employee_4002,"""List all unique job titles of employees."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID","""Get the first and last names of all employees along with the names of their respective departments, including employees who may not belong to any department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002 WHERE EmployeeID > 5,Retrieve the information of all employees whose EmployeeID is greater than 5.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT DepartmentID) FROM employee_4002,Count the number of unique departments that have employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NULL",Retrieve the first and last names of employees who do not belong to any department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e ORDER BY e.JobTitle;","Retrieve the first names, last names, and job titles of all employees, and organize the results by their job titles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001; ,"""Retrieve all the details about the departments."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT * FROM employee_4002; ,"""Retrieve all information about every employee in the database."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT * FROM employee_projects_4003; ,"""Retrieve all details about the projects that employees are working on, including their roles, start dates, and end dates."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager'; ",Find the first and last names of employees whose job title is Manager.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1; ,Retrieve the name of the department with an ID of 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID; ",Retrieve the first and last names of employees along with the names of their respective departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2; ,Count the number of employees who work in the department with the ID of 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 WHERE LastName LIKE 'S%'; ",Find the first and last names of employees whose last names start with the letter 'S'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT DISTINCT JobTitle FROM employee_4002; ,Retrieve a list of unique job titles from all employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL; ",Retrieve the first and last names of employees who are assigned to a department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","List the names of each department along with the number of employees working in each department, including departments that may have no employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e ORDER BY e.LastName ASC; ","""Retrieve the first and last names of all employees and arrange them in alphabetical order by their last names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.FirstName IN ('John', 'Jane'); ","""Retrieve the first and last names of employees whose first names are either John or Jane."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'IT'); ",Find the first and last names of employees who work in the IT department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID; ","Retrieve the first and last names of employees along with the roles they have in their projects, including those who are not assigned to any projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT COUNT(*) FROM employee_projects_4003 WHERE Role = 'Developer'; ,"""Count the total number of employees who have the role of 'Developer' in their projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ep.EmployeeID, COUNT(ep.ProjectID) FROM employee_projects_4003 ep GROUP BY ep.EmployeeID; ","""Count how many projects each employee has worked on and list their employee IDs."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003); ",List the first and last names of employees who are not assigned to any projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID = 3 AND e.JobTitle = 'Analyst'; ",Find the first and last names of employees who work in department 3 and have the job title 'Analyst'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5;","""List the names of departments that have more than five employees working in them."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC","List the names of all departments along with the number of employees in each department, and arrange the results so that the departments with the most employees appear first."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.JobTitle = 'Manager' ORDER BY e.LastName","""List the first and last names of all employees who have the job title 'Manager', and arrange the names in order by their last names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Engineering'",Retrieve the first and last names of employees who work in the Engineering department along with the department name.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(*) AS NumEmployees FROM employee_4002 e GROUP BY e.JobTitle HAVING COUNT(*) > 5","""Find the job titles of employees and count how many employees hold each job title, but only include job titles that have more than five employees."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",Calculate the average salary of employees in each department and show the department names along with their average salaries.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_projects_4003 WHERE Role = 'Lead')",Find the first and last names of employees who have the role of 'Lead' in any project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT e.JobTitle FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL,"""List the unique job titles of employees who are assigned to a department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 1",Retrieve the first and last names of employees who are involved in more than one project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(e.StartDate) AS LatestEmployeeStartDate FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",List the names of departments along with the most recent start date of employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'Sales')","Retrieve the first names, last names, and job titles of employees who work in the Sales department."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(*) AS NumEmployees FROM employee_4002 e GROUP BY e.JobTitle HAVING AVG(e.Salary) > 70000","""Count the number of employees for each job title and only include those job titles where the average salary of the employees is greater than 70,000."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2023-01-01'","Retrieve the first and last names of employees along with their roles in projects that started before January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, SUM(ep.StartDate IS NOT NULL) AS EmployeesWithProjects FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName",List each department's name along with the total number of employees who are working on projects in that department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IN (SELECT DepartmentID FROM department_4001 WHERE DepartmentName LIKE '%Tech%')","Retrieve the first and last names of employees who work in departments that have ""Tech"" in their name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM employee_projects_4003)","""List the first names, last names, and job titles of employees who are not assigned to any projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 3","List the names of departments that have more than three employees, along with the number of employees in each of those departments."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID ORDER BY e.LastName, ep.Role","Retrieve the first and last names of employees along with their roles in projects, and organize the results by the employees' last names and their roles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL","Retrieve the first and last names of employees who are currently working on projects, along with the start dates of those projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS TotalEmployees FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalEmployees DESC","List the names of departments along with the total number of distinct employees working in each department, and arrange the result starting from the department with the most employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) as EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC ","List the names of all departments along with the number of employees in each department, and sort the results so that the departments with the most employees appear first."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL ORDER BY e.LastName ASC ","""Retrieve the first names, last names, and job titles of employees who are assigned to a department, and list them in order by last name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.JobTitle, COUNT(*) as NumberOfEmployees FROM employee_4002 e GROUP BY e.JobTitle HAVING COUNT(*) > 5 ",Count the number of employees for each job title and only include job titles that have more than five employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, AVG(e.Salary) as AverageSalary FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ",Calculate the average salary of employees for each department and show the department names along with their average salaries.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.LastName LIKE 'S%' ORDER BY e.FirstName ","Retrieve the first and last names of employees whose last name starts with the letter 'S', and sort the results by their first names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, p.Role FROM employee_4002 e JOIN employee_projects_4003 p ON e.EmployeeID = p.EmployeeID WHERE p.Role = 'Manager' ","""Retrieve the first and last names of employees who have a role of 'Manager' in their projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) as TotalEmployees FROM department_4001 d INNER JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING TotalEmployees > 3 ",Find the names of departments that have more than three employees working in them and count how many employees are in each of those departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.JobTitle, COUNT(*) as EmployeeCount FROM employee_4002 e WHERE e.JobTitle IS NOT NULL GROUP BY e.JobTitle ORDER BY EmployeeCount DESC ","Count the number of employees for each job title and list them in order from the most to the least employees, excluding any job titles that are not specified."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ProjectID IS NULL ",List the first and last names of employees who are not assigned to any projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.JobTitle FROM employee_4002 e WHERE e.JobTitle IN ('Developer', 'Tester') ORDER BY e.FirstName ","""List the first names and job titles of employees who are either Developers or Testers, and sort the results by their first names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'HR' ",Retrieve the first and last names of employees who work in the Human Resources department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, MAX(e.StartDate) as LatestStartDate FROM department_4001 d JOIN employee_projects_4003 ep ON d.DepartmentID = ep.DepartmentID GROUP BY d.DepartmentName ",Find the latest project start date for each department by looking up the department names and the most recent start date of projects assigned to employees in those departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.FirstName NOT LIKE '%a%' ",Find the first and last names of employees whose first names do not contain the letter 'a'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(ep.ProjectID) as TotalProjects FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName ","""Count the total number of projects for each department and list the department names along with their project counts."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.JobTitle, COUNT(ep.ProjectID) as ProjectsCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.JobTitle HAVING ProjectsCount > 2 ","Retrieve job titles of employees who have worked on more than two projects, along with the count of how many projects each employee has participated in."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName IN ('Sales', 'Marketing') ORDER BY e.LastName ","""List the first and last names of employees who work in the Sales or Marketing departments, along with the names of those departments, and organize the results by the employees' last names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, MIN(ep.StartDate) as FirstProjectStart FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName, e.LastName ","Retrieve the first name, last name, and the earliest start date of the projects for each employee."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) as ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName, e.LastName HAVING ProjectCount > 1 ",List the first and last names of employees who have worked on more than one project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) as EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING EmployeeCount < 5 ",Find the names of departments that have fewer than 5 employees working in them.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE e.LastName LIKE 'B%' ORDER BY d.DepartmentName;","Retrieve the first and last names of employees whose last names start with the letter 'B', along with the names of their departments. Organize the results by the department names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID, d.DepartmentName ORDER BY ProjectCount DESC ","Find the first and last names of employees, along with their department names, and count how many projects they have been involved in. Organize the results by the number of projects each employee has, starting with those who have the most."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, AVG(CASE WHEN ep.Role = 'Manager' THEN 1 ELSE 0 END) AS ManagerCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName ",Find the average number of managers in each department by department name.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.EndDate < CURRENT_TIMESTAMP) ",Retrieve the first and last names of employees who have completed all of their projects as of now.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING EmployeeCount > 5 ","""Get the names of departments that have more than 5 employees and count how many employees work in each of those departments."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate BETWEEN '2023-01-01' AND '2023-12-31' ",Retrieve the first and last names of employees along with their roles in projects that started in the year 2023.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep) ","List the first names and last names of employees along with their department names, but only include those employees who are not currently assigned to any projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, SUM(CASE WHEN ep.Role = 'Developer' THEN 1 ELSE 0 END) AS DeveloperProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING DeveloperProjectCount > 3 ",Identify the first and last names of employees who have worked on more than three projects in the role of 'Developer'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%' ","Retrieve the first and last names of employees who work in departments that start with the name 'Sales', along with the names of those departments."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS TotalProjects FROM employee_projects_4003 ep GROUP BY ep.EmployeeID HAVING TotalProjects = (SELECT MAX(ProjectCount) FROM (SELECT COUNT(ProjectID) AS ProjectCount FROM employee_projects_4003 GROUP BY EmployeeID)) ",Identify the employee who has worked on the highest number of projects and provide their employee ID along with the total count of projects they have participated in.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE EXISTS (SELECT 1 FROM employee_projects_4003 ep WHERE ep.EmployeeID = e.EmployeeID AND ep.EndDate IS NULL) ",Find the first and last names of employees who are currently assigned to an active project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, COUNT(ep.Role) AS RoleCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName HAVING RoleCount > 0 ","Retrieve the first names of employees along with the count of projects they are involved in, specifically for those who are assigned to at least one project."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, SUM(CASE WHEN ep.EndDate < CURRENT_TIMESTAMP THEN 1 ELSE 0 END) AS CompletedProjects FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName ","Calculate the total number of completed projects for each department by counting how many projects have ended before the current date, and provide the name of each department along with this count."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, DENSE_RANK() OVER (ORDER BY COUNT(ep.ProjectID) DESC) as ProjectRank FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID ","Retrieve the first and last names of employees, and rank them based on the number of projects they are involved in, with those who have the most projects ranked highest."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, MIN(ep.StartDate) AS EarliestProject FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName ","""List the names of all departments along with the start date of the earliest project associated with their employees."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IN (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'HR') ",Find the first and last names of employees who work in the Human Resources department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT AVG(pg.Padding) FROM (SELECT e.EmployeeID, SUM(CASE WHEN ep.StartDate < '2023-01-01' THEN 1 ELSE 0 END) AS Padding FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID) pg ",Calculate the average number of projects that each employee started before the year 2023.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Lead' AND ep.StartDate > (SELECT AVG(StartDate) FROM employee_projects_4003) ","Find the first names of employees who have the role of 'Lead' on their projects, and only include those who started their projects after the average start date of all employee projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING ProjectCount < 2 ",List the first and last names of employees who are working on fewer than two projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep GROUP BY ep.EmployeeID HAVING COUNT(ep.ProjectID) > 5) ",Retrieve the first and last names of employees who are involved in more than five projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", SELECT COUNT(DISTINCT ep.ProjectID) FROM employee_projects_4003 ep WHERE ep.EmployeeID IN (SELECT e.EmployeeID FROM employee_4002 e WHERE e.DepartmentID = 1) ,Count the number of unique projects that employees in department 1 have worked on.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE NOT EXISTS (SELECT * FROM employee_projects_4003 ep WHERE ep.EmployeeID = e.EmployeeID) ",List the first and last names of employees who are not assigned to any projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT d.DepartmentName, MAX(ep.EndDate) AS LatestProjectEndDate FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName ",Retrieve the names of departments and the latest project end date for each department based on employee project involvement.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," SELECT e.FirstName, e.LastName, COUNT(DISTINCT ep.ProjectID) AS UniqueProjectCount FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING UniqueProjectCount > 3",Find the first and last names of employees who have worked on more than three unique projects.
