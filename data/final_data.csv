schema,sql_query,natural_language_query
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001;,Get all employee details from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001;",Get the first and last names of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle;",Count the number of employees for each job title in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department;",Retrieve the average salary of employees for each department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > 50000;","Get the first and last names of employees and their salaries where the salary exceeds 50,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Department = 'Sales';,Retrieve all details of employees in the Sales department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001;,Get the unique departments from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC;","Retrieve the first and last names of all employees, sorted by hire date in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Department FROM employee_1001 WHERE Department LIKE '%Engineering%';","Get the first names, last names, and departments of employees in departments that contain 'Engineering'."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT MAX(Salary) FROM employee_1001;,Get the highest salary from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT MIN(Salary) FROM employee_1001 WHERE JobTitle = 'Manager';,Get the minimum salary of employees with the job title 'Manager' from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01';,"Count employees hired before January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 40000 AND 60000;","Get the first and last names of employees with salaries between 40,000 and 60,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC LIMIT 5;","Retrieve the first names, last names, and salaries of the top 5 employees with the highest salaries from the employee_1001 table, sorted by salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 2;","Get the departments and the number of employees in each department from the employee_1001 table, including only departments with more than 2 employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Department IS NOT NULL;","Retrieve the first names, last names, and salaries of employees in non-null departments from the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE FirstName IS NOT NULL;",Get the first and last names of employees from the employee_1001 table where first names are not null.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, JobTitle FROM employee_1001 WHERE JobTitle IN ('Developer', 'Analyst');","Retrieve the first names, last names, and job titles of employees whose job titles are 'Developer' or 'Analyst'."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName FROM employee_1001 WHERE LastName LIKE 'S%'","Get the EmployeeID, FirstName, and LastName of employees whose LastName begins with 'S'."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(DISTINCT Department) FROM employee_1001;,Count the distinct departments in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName, JobTitle, Department, Salary, HireDate FROM employee_1001;","Select EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate of all employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001;,Select all columns for every employee from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department = 'Sales';",Get the first and last names of employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) as EmployeeCount FROM employee_1001 GROUP BY JobTitle;",Count the number of employees for each job title in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 50000;","Get the first and last names of employees with a salary over 50,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01';,"Count employees hired before January 1, 2020, in the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department;",What is the average salary for each department in the employee_1001 table?
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC;","Get the first names, last names, and salaries of employees sorted by salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE JobTitle LIKE '%Manager%;,Select all rows from employee_1001 where the job title includes 'Manager'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001;,Get distinct departments from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2021-12-31';","Get the first and last names of employees hired between January 1, 2019, and December 31, 2021."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MAX(Salary) AS MaxSalary FROM employee_1001 GROUP BY Department;",Get the maximum salary for each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE Department = 'HR';,Count the employees in the HR department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE EmployeeID IN (1, 2, 3);","Get the first and last names of employees with EmployeeID 1, 2, or 3 from the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 30000 AND 70000;","Get the EmployeeID, FirstName, and LastName of employees with salaries between 30,000 and 70,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT MIN(Salary) FROM employee_1001;,Get the minimum salary from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE JobTitle IS NOT NULL;,Count the number of employees in the employee_1001 table with a non-null job title.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001)",Get the first and last names of employees with salaries above the average salary.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 5;",Get the departments and the number of employees for departments with more than 5 employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate;","Retrieve the first and last names of employees from the employee_1001 table, sorted by hire date."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary = (SELECT MAX(Salary) FROM employee_1001)","Retrieve the first names, last names, and salaries of employees with the highest salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName, JobTitle, Department, Salary, HireDate FROM employee_1001;","Select EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate from the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department;",Count employees in each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department;",Get the average salary for each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, MAX(Salary) AS MaxSalary FROM employee_1001 GROUP BY JobTitle.",Get the maximum salary for each job title from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 70000 ORDER BY LastName;","Get the first and last names of employees with a salary over 70,000, sorted by last name."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE HireDate BETWEEN '2020-01-01' AND '2021-12-31'","Get the first names, last names, and hire dates of employees hired from January 1, 2020, to December 31, 2021."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department HAVING TotalSalary > 500000;","Get the total salary for each department from employee_1001 where it exceeds 500,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001 WHERE Department = 'Sales';,Select distinct job titles of employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT COUNT(*) AS TotalEmployees, JobTitle FROM employee_1001 GROUP BY JobTitle ORDER BY TotalEmployees DESC;","Count the number of employees for each job title in the employee_1001 table, ordered by the count in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE FirstName LIKE 'A%'",Get the first and last names of employees whose first names start with 'A' from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) >= 3;",Count the number of employees in each department with three or more employees from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary < (SELECT AVG(Salary) FROM employee_1001);","Retrieve the first names, last names, and salaries of employees earning below the average salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle ORDER BY EmployeeCount DESC;","Get the job titles and the number of employees for each job title from the employee_1001 table, grouped and sorted by the number of employees in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT MAX(HireDate) FROM employee_1001;,Get the latest hire date from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MIN(Salary) AS MinSalary FROM employee_1001 GROUP BY Department;",Get the minimum salary for each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC;","Get the first and last names of all employees, sorted by hire date in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING COUNT(*) > 2;","Count the number of employees for each job title in the employee_1001 table, including only job titles with more than 2 employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MAX(Salary) AS HighestSalary FROM employee_1001 GROUP BY Department;",Retrieve the department names and the highest salary in each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 WHERE Salary >= 60000 GROUP BY Department;","Count the number of employees in each department with a salary of 60,000 or more."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE JobTitle = 'Manager' AND Salary > 80000;","Retrieve the first names, last names, and salaries of employees with the job title 'Manager' earning over $80,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT AVG(Salary) FROM employee_1001 WHERE Department = 'IT';,What is the average salary of employees in the IT department?
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName, JobTitle, Department, Salary, HireDate FROM employee_1001;","Select EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate from the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department;",Count employees by department in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department HAVING AVG(Salary) > 70000;","Retrieve the departments and the average salary of employees where the average salary exceeds 70,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC;","Get the first names, last names, and salaries of employees sorted by salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle ORDER BY EmployeeCount DESC;","Count the number of employees for each job title in the employee_1001 table, sorted by the count in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate >= '2021-01-01'","Get the first and last names of employees hired on or after January 1, 2021."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001;,Get distinct job titles of employees from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department;",Get the total salary of employees by department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001)",Get the first and last names of employees with salaries above the average salary.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 WHERE Salary > 50000 GROUP BY Department;","Count employees with a salary over 50,000 in each department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, JobTitle FROM employee_1001 WHERE Department = 'IT' ORDER BY HireDate;","Get the first names, last names, and job titles of IT department employees, sorted by hire date."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM employee_1001;",Get the minimum and maximum salaries from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS Count FROM employee_1001 GROUP BY JobTitle HAVING COUNT(*) > 5;",Count the number of employees for job titles with more than 5 employees in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE LastName LIKE 'S%'",Get the first and last names of employees with last names starting with 'S' from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AvgSalary FROM employee_1001 GROUP BY Department ORDER BY AvgSalary DESC;","Get the average salary for each department from the employee_1001 table, ordered by average salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2020-12-31';","Get the first and last names of employees hired between January 1, 2019, and December 31, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE Department = 'Sales' AND Salary < 50000;,"Count employees in the Sales department with a salary under 50,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary IN (SELECT Salary FROM employee_1001 WHERE Department = 'HR')",Get the first and last names of employees who have the same salary as those in the HR department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(DISTINCT Department) FROM employee_1001;,Count distinct departments in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC LIMIT 10;","Get the first and last names of the 10 most recently hired employees, ordered by hire date descending."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 WHERE HireDate < '2015-01-01' GROUP BY Department;","Count employees hired before January 1, 2015, by department and list the department names with their employee counts."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, JobTitle, Department, Salary FROM employee_1001;","Get the first names, last names, job titles, departments, and salaries of employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department = 'Sales';",Get the first and last names of employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001;,Count all employees in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department;",What is the average salary by department in the employee_1001 table?
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC LIMIT 5;","Get the first names, last names, and salaries of the top 5 highest-paid employees from the employee_1001 table, sorted by salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01';,"Count employees hired before January 1, 2020, in the employee_1001 table."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 5;","Get the departments and the number of employees in each department from the employee_1001 table, where the count of employees exceeds 5."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001;,Get distinct departments from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001),Select all employees from the employee_1001 table with salaries above the average salary.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%';",Get the first and last names of employees with 'Manager' in their job title from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2015-01-01' AND '2020-12-31';","Get the first and last names of employees hired from January 1, 2015, to December 31, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalaries FROM employee_1001 GROUP BY Department;",Calculate the total salaries for each department in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 80000;","Retrieve the first and last names of employees earning more than 80,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle ORDER BY EmployeeCount DESC;","Retrieve job titles and the count of employees for each job title from the employee_1001 table, grouped and sorted by employee count in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001 AS e2 WHERE e2.Department = employee_1001.Department);",Get the first and last names of employees earning more than the average salary in their department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(DISTINCT Department) FROM employee_1001;,Count the distinct departments in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT MAX(Salary) AS HighestSalary, Department FROM employee_1001 GROUP BY Department;",Find the highest salary in each department from the employee records.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC LIMIT 1;",Retrieve the first and last names of the most recently hired employee from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Salary, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Salary HAVING COUNT(*) >= 2;","Retrieve the salaries of employees and the count of employees earning each salary from the employee_1001 table, including only salaries with an employee count of at least 2."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MIN(Salary) AS MinSalary FROM employee_1001 GROUP BY Department;",Get the minimum salary for each department from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING COUNT(*) > 3;","Retrieve job titles and the count of employees for each job title from the employee_1001 table, grouping by job title, where the count of employees per job title is greater than 3."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, FirstName, LastName, JobTitle, Department, Salary, HireDate FROM employee_1001;","Retrieve EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate of all employees."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002;,Select all columns from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE Status = 'Present';",Retrieve Attendance IDs and Employee IDs from attendance_1002 where the status is 'Present'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 1;",Get the check-in and check-out times for EmployeeID 1 from attendance_1002.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID;","Count the attendance records for each employee, grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002;,Get the unique EmployeeIDs from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AttendanceID FROM attendance_1002 WHERE CheckInTime > '2023-01-01 08:00:00';,"Get the AttendanceIDs from attendance_1002 where CheckInTime is after January 1, 2023, at 08:00 AM."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE Status = 'Absent' AND CheckOutTime IS NULL;,Select records from attendance_1002 where the status is 'Absent' and the check-out time is missing.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_1001);,Select all attendance records for employees listed in the employee table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC;","Get Employee IDs with their check-in times from the attendance_1002 table, sorted by check-in time in descending order."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Leave';,Count the number of attendance records with a status of 'Leave' in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckInTime) AS MaxCheckInTime FROM attendance_1002 GROUP BY EmployeeID;",Retrieve each employee's maximum check-in time from the attendance records.
"CREATE TABLE attendance_1022 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""EmployeeName"" TEXT,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1022 WHERE EmployeeID = (SELECT EmployeeID FROM employee_1001 WHERE EmployeeName = 'John Doe'),Select all attendance records for the employee named John Doe.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, Status FROM attendance_1002 WHERE CheckOutTime < '2023-05-01';","Get the AttendanceID and Status of attendance records from attendance_1002 where CheckOutTime is before May 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime < '2024-01-01';,"Get the Employee IDs of those who checked in from January 1, 2023, to December 31, 2023, in the attendance_1002 table."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE DATE(CheckInTime) = '2023-06-15';,"Count the total number of attendance records for June 15, 2023, from the attendance_1002 table."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE Status IS NOT NULL;",Get Attendance ID and Employee ID from attendance_1002 where Status is present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE AttendanceID > 10;",Get the check-in and check-out times for attendance records with AttendanceID greater than 10.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgWorkHours FROM attendance_1002 GROUP BY EmployeeID;",Select the EmployeeID and the average work hours for each employee based on the difference between CheckOutTime and CheckInTime from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE EmployeeID = 5 AND Status = 'Present';,Select all attendance records for EmployeeID 5 with a status of 'Present'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalRecords FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) >= 15;",Retrieve the Employee IDs and the total number of attendance records for employees with 15 or more records from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002;,Retrieve all records from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002;",Get the Employee IDs and Check-In times from attendance_1002.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, Status FROM attendance_1002 WHERE Status = 'Present';",Get the Attendance IDs and statuses of records with status 'Present' from attendance_1002.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 1;",Get the check-in and check-out times for EmployeeID 1 from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT DATE(CheckInTime)) AS TotalDaysWorked FROM attendance_1002 GROUP BY EmployeeID;","Count the distinct days worked by each employee and their EmployeeIDs from the attendance_1002 table, grouping by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckInTime) AS EarliestCheckIn, MAX(CheckOutTime) AS LatestCheckOut FROM attendance_1002 GROUP BY EmployeeID;","Retrieve employee IDs with their earliest check-in and latest check-out times from attendance records, grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 ORDER BY CheckInTime DESC;,"Get all attendance records from attendance_1002, sorted by CheckInTime in descending order."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Status FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-01-31 23:59:59';","Retrieve the Employee IDs and their statuses from attendance records for check-ins between January 1 and January 31, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCheckIns FROM attendance_1002 WHERE CheckInTime > '09:00:00' GROUP BY EmployeeID;","Get the Employee IDs and count of late check-ins for employees who checked in after 9:00 AM, grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Status FROM attendance_1002;,Get the distinct status values from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime)) / 3600) AS AverageWorkHours FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average work hours for each employee based on the difference between CheckOutTime and CheckInTime, grouped by EmployeeID, from the attendance_1002 table."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE CheckOutTime IS NULL;,Select all records from attendance_1002 where CheckOutTime is null.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 WHERE CheckInTime < '2023-01-15' AND Status = 'Absent';,"Get Employee IDs from attendance records for employees who checked in before January 15, 2023, with a status of 'Absent'."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AbsentDays FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID;","Get Employee IDs and the count of days they were absent, where the status is 'Absent', grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-01-31 23:59:59';,"Retrieve all attendance records from January 1 to January 31, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE Status = 'Late' ORDER BY CheckInTime;","Retrieve the EmployeeID, CheckInTime, and CheckOutTime of employees marked as late, ordered by CheckInTime."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PresentDays FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID HAVING COUNT(*) > 10;","Retrieve Employee IDs and the count of days marked as 'Present', grouping by Employee ID, for those with more than 10 present days."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Sick';,Count the attendance records with status 'Sick' in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 WHERE CheckOutTime < CheckInTime;,Retrieve Employee IDs from attendance_1002 where CheckOutTime is less than CheckInTime.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID, CheckInTime, CheckOutTime, Status FROM attendance_1002;","Retrieve AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from the attendance_1002 table."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID;","Get the EmployeeIDs and the count of attendance records for each employee from the attendance_1002 table, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AverageDuration FROM attendance_1002 GROUP BY EmployeeID;",Calculate the average duration between check-in and check-out times for each employee in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Count FROM attendance_1002 GROUP BY Status;",Count the occurrences of each attendance status in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckInTime) AS LatestCheckIn FROM attendance_1002 GROUP BY EmployeeID;",Get the EmployeeIDs and the latest check-in times for each employee from the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckOutTime) AS EarliestCheckOut FROM attendance_1002 GROUP BY EmployeeID;",Get the Employee IDs and the earliest check-out times for each employee from the attendance table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PresentDays FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID;","Get the EmployeeIDs and the number of days they were present from attendance records, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AbsentDays FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID;","Get the EmployeeIDs and the number of days absent for each employee from attendance records where the status is 'Absent', grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS TotalRecords FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' GROUP BY Status;","Retrieve the attendance status and count of records for each status from the attendance table for check-in times on or after January 1, 2023, grouped by status."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCheckIns FROM attendance_1002 WHERE CheckInTime > '09:00:00' GROUP BY EmployeeID;","Retrieve Employee IDs and the number of their late check-ins, defined as check-ins after 09:00:00, grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, EXTRACT(DOW FROM CheckInTime) AS Weekday, COUNT(*) AS CheckInCount FROM attendance_1002 GROUP BY EmployeeID, Weekday;","Retrieve Employee IDs, the weekdays of their check-in times, and count of check-ins per employee grouped by Employee ID and weekday."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalCheckIns FROM attendance_1002 WHERE CheckInTime IS NOT NULL GROUP BY EmployeeID;","Get the Employee IDs and count of check-ins for each employee from the attendance_1002 table, considering only records with non-null CheckInTime, grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS OnTimeCheckIns FROM attendance_1002 WHERE CheckInTime <= '09:00:00' GROUP BY EmployeeID;","Count the on-time check-ins (check-in time before or equal to 09:00:00) for each employee, grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS TotalRecords FROM attendance_1002 WHERE CheckOutTime IS NOT NULL GROUP BY Status;","Retrieve the attendance status and the total number of records from attendance_1002 where the check-out time is not null, grouped by status."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Status = 'Present') AS PresentDays, SUM(Status = 'Absent') AS AbsentDays FROM attendance_1002 GROUP BY EmployeeID;","Count the days employees were marked as 'Present' and 'Absent' from the attendance_1002 table, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, DATEDIFF('2023-02-01', MIN(CheckInTime)) AS DaysWorked FROM attendance_1002 GROUP BY EmployeeID HAVING DATEDIFF('2023-02-01', MIN(CheckInTime)) > 10;","Retrieve Employee IDs and the number of days worked by each employee from attendance_1002, where the days worked exceed 10, calculated as the difference in days between February 1, 2023, and the earliest CheckInTime for each employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime)) / 3600) AS AvgHoursWorked FROM attendance_1002 GROUP BY EmployeeID;","Retrieve the employee IDs and the average hours worked for each employee, based on the difference between CheckOutTime and CheckInTime, from the attendance_1002 table, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCount FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID;","Count how many times each employee is marked as 'Late' in their attendance records, grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 WHERE Status IN ('Present', 'Absent') GROUP BY EmployeeID HAVING COUNT(*) > 5;","Retrieve the Employee IDs and the count of attendance records for each employee with status 'Present' or 'Absent', including only those with more than 5 records."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) AS UniqueEmployees FROM attendance_1002;,Count the distinct employees in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Frequency FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5;","Retrieve the count of attendance occurrences for each status in the attendance_1002 table, including only statuses with more than 5 occurrences."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime, Status FROM attendance_1002;","Retrieve all records from the attendance_1002 table, including employee IDs, check-in times, check-out times, and statuses."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID;",Get the EmployeeID and count of attendance records for each employee in attendance_1002.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckOutTime) AS LatestCheckOut FROM attendance_1002 GROUP BY EmployeeID;",Get the latest check-out time for each Employee ID from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Count FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5;","Count the occurrences of each status in the attendance records, including only those with more than 5 occurrences."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG((CheckOutTime - CheckInTime) * 24) AS AverageHours FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average hours worked by each employee based on the difference between their check-out and check-in times, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS DaysPresent FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID;","Count the days each employee was present by EmployeeID from the attendance_1002 table, filtering for 'Present' status."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCount FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID HAVING LateCount > 3;","Retrieve Employee IDs and the count of late arrivals, where a late arrival is defined as a status of 'Late', for employees with more than 3 late arrivals."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckInTime > '2023-01-01' AND CheckOutTime < '2024-01-01';,"Retrieve distinct Employee IDs from attendance records of employees who checked in after January 1, 2023, and checked out before January 1, 2024."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalAttendance FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime <= '2023-12-31' GROUP BY EmployeeID;","Retrieve the EmployeeIDs and total attendance records for employees who checked in between January 1, 2023, and December 31, 2023, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC LIMIT 10;","Get the Employee IDs and check-in times from attendance_1002, sorted by check-in time in descending order, for the most recent 10 entries."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Status FROM attendance_1002 WHERE CheckInTime < '2023-01-01 09:00:00' AND Status = 'Late';","Get the Employee IDs and statuses of employees who checked in before January 1, 2023, at 09:00:00 with a status of 'Late'."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckInTime) AS EarliestCheckIn FROM attendance_1002 GROUP BY EmployeeID;","Get the EmployeeID and the earliest CheckInTime for each employee from the attendance_1002 table, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE Status = 'Sick' ORDER BY CheckInTime;","Select the EmployeeID, CheckInTime, and CheckOutTime from the attendance_1002 table for employees with a status of 'Sick', ordered by CheckInTime."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Count FROM attendance_1002 WHERE CheckInTime >= DATE('now', '-30 days') GROUP BY Status;","Get the count of each attendance status from the attendance_1002 table for check-in times within the last 30 days, grouped by status."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(CASE WHEN Status = 'Absent' THEN 1 END) > 2;,Select the Employee IDs from attendance records where the count of 'Absent' statuses for each Employee ID is greater than 2.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE CheckOutTime - CheckInTime > INTERVAL '8 HOURS';","Retrieve Employee IDs, check-in times, and check-out times from attendance_1002 where the duration between check-out and check-in is greater than 8 hours."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM attendance_1002 WHERE Status = 'Present' AND CheckInTime >= '2023-01-01' AND CheckInTime < '2023-02-01' GROUP BY EmployeeID;","Get Employee IDs and the count of attendance records for employees present from January 1 to January 31, 2023, grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(CASE WHEN Status = 'OnTime' THEN 1 END) = 0;,Retrieve the EmployeeID of employees who have never been 'OnTime' in the attendance_1002 table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID FROM attendance_1002 WHERE Status IN ('Present', 'Late') AND CheckInTime > '2023-02-01' ORDER BY CheckInTime DESC;","Retrieve the Employee IDs from attendance records with Status 'Present' or 'Late', and Check-In Time after February 1, 2023, ordered by Check-In Time desc."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPresent FROM attendance_1002 WHERE Status = 'Present' AND CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID HAVING COUNT(*) > 20;","Retrieve EmployeeIDs and the count of days marked as 'Present' from attendance records in 2023, grouped by EmployeeID, where this count exceeds 20."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID, CheckInTime, CheckOutTime, Status FROM attendance_1002;","Select AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from the attendance_1002 table."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(a.AttendanceID) > 5;",Select Employee IDs and count attendance records for employees with more than 5 records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, SUM(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS TotalHoursWorked FROM attendance_1002 a WHERE a.Status = 'Present' GROUP BY a.EmployeeID;","Retrieve the total hours worked for each employee by summing the duration between check-in and check-out times from attendance records where the status is 'Present', grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY a.CheckInTime;","Get the first and last names of employees and their check-in times for 2023, sorted by check-in time."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS AverageHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department;","Calculate the average hours worked by employees in each department, based on the difference between check-out and check-in times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT a.EmployeeID FROM attendance_1002 a WHERE a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31');",Retrieve the first and last names of employees from the employee_1001 table who did not check in during 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status IS NULL;",Retrieve the first and last names of employees who have no recorded attendance status.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(a.AttendanceID) AS Absences FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID AND a.Status = 'Absent' GROUP BY e.EmployeeID HAVING COUNT(a.AttendanceID) > 3;","Retrieve the first and last names of employees who have been marked as absent more than 3 times, including those with no absences, by counting attendance records grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, MAX(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS MaxHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department;","Get the maximum hours worked by employees in each department by calculating the difference between their check-out and check-in times, using data from the employee_1001 and attendance_1002 tables."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime < '2023-01-01' AND a.Status = 'Late' ORDER BY a.CheckInTime;","Get the first and last names of employees and their check-in times from the employee and attendance tables for check-ins before January 1, 2023, with a status of 'Late', sorted by check-in time."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(a.Status = 'Present') AS TotalPresentDays, SUM(a.Status = 'Absent') AS TotalAbsentDays FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID;","Retrieve Employee IDs with the total count of days marked as 'Present' and 'Absent', by joining the employee data from the employee_1001 table with the attendance records from the attendance_1002 table, grouped by Employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(att.AttendanceID) AS TotalAttendances FROM employee_1001 e LEFT JOIN attendance_1002 att ON e.EmployeeID = att.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalAttendances DESC LIMIT 10;","Get the first and last names of employees, along with their total attendances, including those with no attendances, sorted by total attendances in descending order, limited to the top 10."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, a.CheckOutTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckOutTime IS NOT NULL AND a.CheckInTime IS NOT NULL ORDER BY a.CheckOutTime DESC;","Retrieve the first and last names of employees and their checkout times from the attendance records, filtering for records where both checkout and check-in times are not null, sorted by checkout time in descending order."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime)) / 3600) AS AverageWorkingHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.EmployeeID;","Retrieve the first and last names of employees and their average working hours, based on the difference between check-out and check-in times, for those who have a status of 'Present', grouped by employee ID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(DISTINCT a.EmployeeID) AS EmployeesPresent FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Department;","Count distinct employees marked 'Present' in attendance records, grouped by department."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(a.AttendanceID) AS TotalCheckIns FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime IS NOT NULL GROUP BY e.EmployeeID HAVING COUNT(a.AttendanceID) > 10;",Get the first and last names of employees with more than 10 valid check-ins.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ARRAY_AGG(a.CheckInTime) AS CheckInTimes FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID;",Retrieve the Employee IDs and the list of Check-In times for each employee by joining the employee_1001 and attendance_1002 tables.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, STRING_AGG(a.Status, ', ') AS AttendanceStatus FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.FirstName, e.LastName ORDER BY e.LastName;","Retrieve the first names and last names of employees along with a concatenated list of their attendance statuses, grouped by employee and sorted by last name."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime)) / 3600) AS AverageWorkingHours FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckOutTime IS NOT NULL;,"Calculate the average working hours for employees who checked in on or after January 1, 2023, and have a recorded check-out time, by finding the average duration between check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID HAVING AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) < 4","Get the Employee IDs and count of attendance records for each employee, including those with no records, and show only those with an average attendance duration less than 4 hours."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID, CheckInTime, CheckOutTime, Status FROM attendance_1002;","Select AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from attendance_1002."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003;,Get all data from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, BaseSalary FROM salary_1003;",Get the SalaryID and BaseSalary from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Bonus FROM salary_1003 WHERE Bonus > 1000;",Get Employee IDs and bonuses from salary_1003 where the bonus exceeds 1000.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Commission FROM salary_1003 WHERE BaseSalary < 50000;","Get the base salaries and commissions of employees in salary_1003 with a base salary under 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003;,Select distinct Employee IDs from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003;,Count the total number of entries in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003;,Calculate the total BaseSalary from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(Bonus) FROM salary_1003;,What is the average bonus in the salary_1003 table?
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT MAX(Commission) FROM salary_1003;,Get the highest Commission from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT MIN(BaseSalary) AS MinBaseSalary FROM salary_1003;,Retrieve the minimum base salary from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC;,"Retrieve payment dates from salary_1003, sorted in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 ORDER BY BaseSalary;,"Get Employee IDs from salary_1003, sorted by BaseSalary in ascending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID FROM salary_1003 WHERE EmployeeID = 1;",Get the SalaryID and EmployeeID from salary_1003 for EmployeeID 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus FROM salary_1003 WHERE EmployeeID IN (1, 2, 3);","Get the base salary and bonus for employees 1, 2, and 3 from the salary_1003 table."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE PaymentDate >= '2023-01-01' AND PaymentDate <= '2023-12-31';,Retrieve all records from salary_1003 where the payment date is in 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SalaryID FROM salary_1003 WHERE BaseSalary != 0;,Get the SalaryID of entries in salary_1003 where BaseSalary is not 0.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID;","Get the Employee IDs and total of their base salaries from the salary_1003 table, grouped by Employee ID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003 WHERE BaseSalary > 60000;,"Count the records in salary_1003 where the base salary exceeds 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT BaseSalary FROM salary_1003;,Retrieve distinct base salaries from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Bonus FROM salary_1003 ORDER BY Bonus DESC;","Get Employee IDs and their Bonuses from the salary_1003 table, sorted by Bonus in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID, BaseSalary, Bonus, Commission FROM salary_1003;","Select SalaryID, EmployeeID, BaseSalary, Bonus, and Commission for all employees from the salary_1003 table."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003;,Get all records from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, BaseSalary FROM salary_1003 WHERE BaseSalary > 50000;","Get the SalaryID and BaseSalary of records in salary_1003 where BaseSalary exceeds 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Bonus FROM salary_1003 WHERE Bonus IS NOT NULL;",Get Employee IDs and bonuses from salary_1003 where the bonus is not null.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003;,Count the number of records in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003;,Calculate the total of all base salaries in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(Commission) FROM salary_1003;,What is the average commission in the salary_1003 table?
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 ORDER BY PaymentDate DESC;,Retrieve all columns from the salary_1003 table and sort by PaymentDate in descending order.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003;,Retrieve distinct Employee IDs from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003 WHERE PaymentDate > '2023-01-01'","Get Employee IDs and base salaries from salary_1003 for payments made after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID FROM salary_1003 WHERE EmployeeID = 1;",Get the SalaryID and EmployeeID from salary_1003 where EmployeeID is 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + Bonus AS TotalCompensation FROM salary_1003;",Calculate the total compensation for each employee by summing their base salary and bonus from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE BaseSalary < 60000;,"Count distinct EmployeeIDs in salary_1003 with a BaseSalary under 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE BaseSalary BETWEEN 40000 AND 80000;,"Select all records from salary_1003 where the base salary is between 40,000 and 80,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PaymentDate FROM salary_1003 WHERE Commission <> 0;",Retrieve Employee IDs and Payment Dates from salary_1003 where Commission is not zero.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT MAX(BaseSalary) FROM salary_1003;,Get the highest base salary from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID;",Select the Employee IDs and names of employees from the employee_1001 table who have salaries in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS RecordCount FROM salary_1003 GROUP BY EmployeeID;",Count the records for each employee in the salary_1003 table by their EmployeeID.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(Bonus) AS TotalBonus FROM salary_1003 WHERE PaymentDate >= '2023-01-01' AND PaymentDate <= '2023-12-31';,Sum the bonuses from the salary_1003 table for payments made in 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID;",Get the average base salary for each EmployeeID from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 WHERE BaseSalary < (SELECT AVG(BaseSalary) FROM salary_1003);,Get the EmployeeIDs of employees with a BaseSalary below the average BaseSalary in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID, BaseSalary, Bonus, Commission FROM salary_1003;","Select SalaryID, EmployeeID, BaseSalary, Bonus, and Commission from the salary_1003 table."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID HAVING SUM(BaseSalary + Bonus + Commission) > 50000;","Retrieve Employee IDs and total compensation, defined as the sum of BaseSalary, Bonus, and Commission, for employees with total compensation exceeding 50,000 from the salary_1003 table."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 GROUP BY EmployeeID ORDER BY PaymentCount DESC;","Retrieve the Employee IDs and the number of payment records for each employee from the salary_1003 table, grouped by Employee ID and sorted by payment count in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) AS HighestBaseSalary FROM salary_1003 GROUP BY EmployeeID;",Retrieve the maximum base salary for each EmployeeID from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 WHERE PaymentDate >= '2023-01-01' AND PaymentDate <= '2023-12-31';,What is the average base salary from the salary_1003 table for payments made in 2023?
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING SUM(Commission) > 10000;","Retrieve Employee IDs and the total commissions for each employee from the salary_1003 table, where total commissions exceed 10,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003 WHERE Bonus IS NOT NULL;,Retrieve distinct EmployeeIDs from salary_1003 where Bonus is not null.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPayments FROM salary_1003 WHERE BaseSalary > 30000 GROUP BY EmployeeID HAVING COUNT(*) > 1;","Retrieve the EmployeeIDs and the count of payments from salary_1003 for employees with a base salary over 30,000, grouped by EmployeeID, where the count of payments exceeds 1."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + COALESCE(Bonus, 0) + COALESCE(Commission, 0) AS TotalEarnings FROM salary_1003 ORDER BY TotalEarnings DESC LIMIT 10;","Retrieve the Employee IDs and their total earnings, calculated as the sum of base salary, bonus (nulls as zero), and commission (nulls as zero) from the salary_1003 table, sorted by total earnings in descending order, showing the top 10 results."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) > 5;",Get the Employee IDs and total base salary for employees with more than 5 salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(PaymentDate) AS EarliestPaymentDate FROM salary_1003 GROUP BY EmployeeID;",Retrieve each Employee ID and their earliest payment date from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentRecords FROM salary_1003 WHERE PaymentDate >= '2023-01-01' GROUP BY EmployeeID ORDER BY PaymentRecords DESC;","Retrieve the Employee IDs and the count of payment records for each employee from the salary_1003 table with payment dates on or after January 1, 2023, grouped by Employee ID and sorted by count in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalCompensation FROM salary_1003 WHERE PaymentDate < '2023-01-01' GROUP BY EmployeeID HAVING TotalCompensation > 60000;","Retrieve EmployeeIDs and total compensation (base salary plus bonus) for each employee in the salary_1003 table with a payment date before January 1, 2023, where total compensation exceeds 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) AS TotalSalaries FROM salary_1003 WHERE PaymentDate >= '2022-01-01' AND PaymentDate < '2023-01-01';,"Calculate the total base salaries from salary_1003 for payments made from January 1, 2022, to December 31, 2022."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary, Bonus FROM salary_1003 WHERE Bonus IS NOT NULL ORDER BY Bonus DESC;","Retrieve the Employee IDs, base salaries, and bonuses of employees with non-null bonuses from the salary_1003 table, sorted by bonuses in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(DISTINCT strftime('%Y', PaymentDate)) = 2;","Select EmployeeID from the salary_1003 table, grouping results by EmployeeID, to include only those employees who have received payments in two different years."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID HAVING AVG(BaseSalary) < 50000;","Retrieve the Employee IDs and average base salary for employees from the salary_1003 table, including only those with an average salary less than 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(PaymentDate) AS LastPaymentDate FROM salary_1003 GROUP BY EmployeeID;",Get the Employee IDs and the most recent payment date for each employee from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING SUM(Commission) > (SELECT AVG(Commission) FROM salary_1003);","Retrieve Employee IDs and total commissions for each employee from the salary_1003 table, grouped by Employee ID, where total commissions exceed the average commission."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS CountPayments FROM salary_1003 WHERE Commission > 0 GROUP BY EmployeeID HAVING COUNT(*) > 2;","Retrieve the Employee IDs and count of payment records from the salary_1003 table where Commission is greater than 0, grouped by Employee ID, and only include groups with more than 2 payments."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID FROM salary_1003 WHERE COALESCE(BaseSalary, 0) + COALESCE(Bonus, 0) > 80000 ORDER BY PaymentDate DESC;","Retrieve Employee IDs from the salary_1003 table where the sum of BaseSalary and Bonus (counting null Bonus as 0) exceeds 80,000, sorted by PaymentDate in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID, BaseSalary, Bonus, Commission FROM salary_1003;","Select SalaryID, EmployeeID, BaseSalary, Bonus, and Commission from the salary_1003 table."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID;",Get the EmployeeID and total BaseSalary for each employee from the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus, Commission FROM salary_1003 WHERE PaymentDate >= '2023-01-01';","Get the base salary, bonus, and commission of employees from salary_1003 for payment dates on or after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, s.BaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' AND s.PaymentDate <= '2023-12-31';","Retrieve Employee IDs, names, and base salaries for employees with salary records where payment dates are in 2023, by joining employee records with salary records on EmployeeID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AvgBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING AVG(BaseSalary) > 50000;","Get the Employee IDs and average base salary for employees in the salary_1003 table, excluding those with an average base salary of 50,000 or less."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID ORDER BY TotalCompensation DESC;","Calculate the total compensation for each employee by summing their base salary, bonus, and commission from the salary_1003 table, grouping by EmployeeID, and sorting the results in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 WHERE PaymentDate < '2023-01-01' GROUP BY EmployeeID HAVING COUNT(*) > 3;","Get the Employee IDs and count of payment records for each employee in salary_1003 with a payment date before January 1, 2023, including only those with more than 3 records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) AS HighestBaseSalary FROM salary_1003 GROUP BY EmployeeID;","Get the highest base salary per employee from the salary_1003 table, listed by Employee ID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Bonus) AS TotalBonus FROM salary_1003 WHERE Bonus IS NOT NULL GROUP BY EmployeeID;","Retrieve the Employee IDs and total bonuses for each employee from salary_1003 where the bonus is not null, grouped by Employee ID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, SUM(s.BaseSalary) AS TotalBaseSalary FROM salary_1003 s INNER JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID WHERE e.Department = 'Sales' GROUP BY s.EmployeeID;","Retrieve Employee IDs and the total base salaries for employees in the Sales department from the salary_1003 table, grouped by Employee ID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS SalaryCount FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) >= 5 ORDER BY SalaryCount DESC;","Get the Employee IDs with their count of salary entries, for employees who have 5 or more entries, sorted by the count in descending order."
"CREATE TABLE salary_1033 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""Name"" TEXT,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, s.BaseSalary FROM employee_1001 e LEFT JOIN salary_1033 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate IS NULL;",Retrieve the names and base salaries of employees who do not have a recorded payment date in the salary table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 WHERE PaymentDate >= '2023-01-01' GROUP BY EmployeeID ORDER BY TotalBaseSalary DESC;","Get the Employee IDs and total base salaries for employees from the salary_1003 table for payments on or after January 1, 2023, grouped by Employee ID and sorted by total base salary in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(Commission) AS AvgCommission FROM salary_1003 WHERE Commission IS NOT NULL GROUP BY EmployeeID HAVING AvgCommission < 2000;","Select Employee IDs and the average commission from salary_1003 for employees with a non-null commission, including only those with an average commission under 2000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalEarnings FROM salary_1003 GROUP BY EmployeeID HAVING TotalEarnings > 100000 ORDER BY TotalEarnings;","Retrieve the Employee IDs and total earnings (base salary plus bonuses) for each employee, where total earnings exceed 100,000, grouped by Employee ID and sorted by total earnings."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(PaymentDate) AS FirstPaymentDate FROM salary_1003 GROUP BY EmployeeID;","Get the Employee IDs and their first payment date from the salary_1003 table, grouped by Employee ID."
"CREATE TABLE salary_1013 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""Name"" TEXT,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1013 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name HAVING SUM(s.BaseSalary) > 75000;","Retrieve the Employee IDs and names of employees with a total base salary exceeding 75,000, combined from the employee and salary tables."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT PaymentDate) AS DistinctPaymentDates FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(DISTINCT PaymentDate) > 1;","Retrieve the EmployeeIDs and the count of distinct payment dates for each employee from the salary_1003 table, where this count is greater than 1."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(Commission) AS MaxCommission FROM salary_1003 GROUP BY EmployeeID HAVING MAX(Commission) IS NOT NULL;","Retrieve Employee IDs and their maximum commission from the salary_1003 table, excluding groups where the maximum commission is null."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalIncentives FROM salary_1003 WHERE Bonus IS NOT NULL GROUP BY EmployeeID HAVING SUM(BaseSalary + Bonus) >= 60000;","Get Employee IDs and total incentives (sum of BaseSalary and Bonus) for employees with a non-null Bonus, grouped by Employee ID, where total incentives are 60,000 or more."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentRecords FROM salary_1003 WHERE PaymentDate < '2023-06-01' GROUP BY EmployeeID ORDER BY PaymentRecords DESC;","Retrieve the Employee IDs and the count of payment records for each employee from the salary_1003 table, where the payment date is before June 1, 2023, grouped by Employee ID and sorted by the count of payment records in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, s.BaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01';","Retrieve the EmployeeID, first name, last name, and base salary of employees with salary records dated on or after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(s.BaseSalary + s.Bonus + s.Commission) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalCompensation > 100000;","Retrieve the Employee IDs and total compensation (sum of base salary, bonus, and commission) for employees where total compensation exceeds 100,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 5;",Get the first and last names of employees with more than 5 salary records by joining the employee and salary tables.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, AVG(s.BaseSalary) AS AverageBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.Department = 'Sales' GROUP BY e.FirstName;",Get the average base salary of employees grouped by their first names from the Sales department.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT MAX(BaseSalary) FROM salary_1003 WHERE PaymentDate BETWEEN '2022-01-01' AND '2023-01-01';,"Retrieve the maximum base salary from the salary_1003 table for payment dates between January 1, 2022, and January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate < '2022-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalBaseSalary DESC LIMIT 10;","Retrieve the first and last names of employees and their total base salary from salary records before January 1, 2022, grouped by employee ID, and limit the results to the top 10 based on total base salary in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(*) AS EmployeeCount FROM employee_1001 e INNER JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2022-06-01' GROUP BY e.Department ORDER BY EmployeeCount DESC;","Get the department names and the number of employees in each department from the employee table, where the payment date in the salary table is on or after June 1, 2022, sorted by employee count in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, (SUM(s.BaseSalary) + SUM(s.Bonus)) AS TotalEarnings FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING TotalEarnings > 150000 ORDER BY TotalEarnings DESC;","Retrieve the first and last names of employees and their total earnings, which is the sum of base salary and bonus, from the employee table joined with the salary table, grouped by employee ID, where total earnings exceed 150,000, sorted in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, s.PaymentDate FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.Commission IS NOT NULL ORDER BY s.PaymentDate DESC;","Retrieve the Employee IDs, first names, last names, and payment dates of employees with commissions, joining data from employee_1001 and salary_1003, sorted by payment dates in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(DISTINCT strftime('%Y-%m', s.PaymentDate)) AS PaymentMonths FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT strftime('%Y-%m', s.PaymentDate)) > 6;","Select the first and last names of employees who received payments in more than 6 different months, counting distinct months from the salary records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.Bonus) AS TotalBonus FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(s.Bonus) > 20000;","Retrieve the EmployeeID, first name, last name, and total bonuses of employees, grouped by EmployeeID, from the employee and salary tables, where total bonuses exceed 20,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.EmployeeID IS NULL;",Select the first and last names of employees who do not have records in the salary table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryCount, AVG(s.BaseSalary) AS AvgBaseSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 1 AND AVG(s.BaseSalary) < 50000;","Retrieve the first and last names of employees, the count of their salary records, and the average base salary, including only those with more than one salary record and an average base salary of less than 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, MAX(s.Commission) AS MaxCommission FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING MaxCommission IS NOT NULL ORDER BY MaxCommission DESC;","Retrieve the first and last names of employees and their maximum commission from the employee table for salary records with a payment date on or after January 1, 2023. Group by employee ID and include only those with a non-null maximum commission, sorted by maximum commission in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM employee_1001) ORDER BY BaseSalary DESC;","Select the Employee IDs and base salaries of employees from salary_1003 that do not exist in the employee_1001 table, ordered by base salary in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE BaseSalary > (SELECT AVG(BaseSalary) FROM salary_1003);,Count the distinct employees in salary_1003 whose base salary exceeds the average base salary in the table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.Bonus IS NULL ORDER BY e.LastName;","Retrieve the first and last names of employees who do not have a recorded bonus, joining the employee table with the salary table, and sort by last names in ascending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, SUM(s.BaseSalary) AS TotalSalaries FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING SUM(s.BaseSalary) > 500000 ORDER BY TotalSalaries DESC;","Retrieve the total base salaries for each department of employees, only including departments with total base salaries over 500,000, and sorted by total salaries in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT s.EmployeeID FROM salary_1003 s GROUP BY s.EmployeeID HAVING COUNT(*) > 3;,Select the EmployeeID of employees with more than 3 payment records in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,Please provide an SQL query for conversion to a natural language query.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004;,Select all records from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004;",Retrieve ContactID and PhoneNumber from employee_contacts_1004.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;",Select the employee IDs and their email addresses from employee_contacts_1004 where phone numbers are present.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Address FROM employee_contacts_1004;,Retrieve distinct addresses from employee contacts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE EmployeeID = 1;,Get all contact details for the employee with EmployeeID 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,Count all records in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID;",Get the Employee IDs and the count of contact records for each employee from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 ORDER BY ContactID;,"Retrieve all columns from employee_contacts_1004, sorted by ContactID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@example.com';,Select all records from employee_contacts_1004 where the email ends with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 WHERE Address LIKE '%Street%';,Get the phone numbers of employees with addresses that include 'Street'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3);","Retrieve ContactIDs from employee_contacts_1004 for EmployeeIDs 1, 2, or 3."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,Get distinct non-null phone numbers from employee_contacts_1004.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL ORDER BY EmployeeID;","Retrieve Employee IDs and email addresses from employee_contacts_1004 where a phone number is present, sorted by Employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM employee_contacts_1004 WHERE Address IS NOT NULL;,Retrieve Employee IDs from employee_contacts_1004 where the Address is not null.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT PhoneNumber) FROM employee_contacts_1004;,Count distinct phone numbers in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE ContactID > 10;,Retrieve all records from employee_contacts_1004 where ContactID is greater than 10.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Address FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;",Select EmployeeID and Address from employee_contacts_1004 where PhoneNumber is not null.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE EmployeeID < 5;,Retrieve all contact information for employees with an EmployeeID less than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Email FROM employee_contacts_1004 WHERE Email IS NOT NULL;,Retrieve non-null email addresses from employee_contacts_1004.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 ORDER BY PhoneNumber DESC;","Get ContactID and PhoneNumber from employee_contacts_1004, sorted by PhoneNumber in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE EmployeeID = 2;,Retrieve the contact information for the employee with EmployeeID 2.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email, Address FROM employee_contacts_1004;","Select the phone number, email, and address from all employee contacts."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004;,Retrieve all records from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber, Email FROM employee_contacts_1004;","Get the ContactID, PhoneNumber, and Email from employee_contacts_1004."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID = 1;,Get the phone numbers for employees with EmployeeID 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID;","Get the Employee IDs and the count of their contact entries from the employee_contacts_1004 table, grouped by Employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@example.com';,Select all contact details from employee_contacts_1004 where the email ends with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Address FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,Retrieve the addresses of employees where phone numbers are available.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM employee_contacts_1004;,Get the unique EmployeeIDs from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber LIKE '%123%';",Get the EmployeeID and PhoneNumber from employee_contacts_1004 where PhoneNumber includes '123'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, Email FROM employee_contacts_1004 ORDER BY ContactID DESC;","Get the Contact IDs and email addresses from employee_contacts_1004, sorted by Contact ID in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,Count the entries in employee_contacts_1004 where PhoneNumber is not null.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(ContactID) AS MinContactID FROM employee_contacts_1004 GROUP BY EmployeeID;","Retrieve the EmployeeID and the minimum ContactID for each EmployeeID from employee_contacts_1004, grouped by EmployeeID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Address LIKE '%Main St%';,Select all records from employee_contacts_1004 where the address includes 'Main St'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_contacts_1004);,Select all records from the employee_contacts_1004 table that have an EmployeeID matching any EmployeeID in the same table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalContacts FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1;","Retrieve the Employee IDs and count of contact entries for each employee from the employee_contacts_1004 table, including only those with more than one contact."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE ContactID > 5;,Select all columns from employee_contacts_1004 for contacts with ContactID greater than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT MAX(ContactID) FROM employee_contacts_1004;,Get the highest ContactID from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE Email IS NOT NULL ORDER BY Email;","Select Employee IDs and email addresses from employee_contacts_1004 where email addresses are not null, sorted by email addresses."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Address FROM employee_contacts_1004 ORDER BY EmployeeID;","Retrieve Employee IDs and addresses from employee_contacts_1004, sorted by Employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL AND Email IS NOT NULL;,Retrieve contact information from employee_contacts_1004 where both the phone number and email are provided.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PhoneNumber FROM employee_contacts_1004;,Retrieve distinct phone numbers from employee_contacts_1004.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, EmployeeID, PhoneNumber, Email, Address FROM employee_contacts_1004;","Retrieve the contact ID, employee ID, phone number, email, and address from employee_contacts_1004."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID;",Retrieve the Employee IDs and phone numbers by joining the employee table with the contacts table on Employee ID.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS contact_count FROM employee_contacts_1004 GROUP BY EmployeeID;","Get the EmployeeID and the number of contact records for each employee from the employee_contacts_1004 table, grouped by EmployeeID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL;",Select the Employee IDs and email addresses of employees from employee_1001 who have a non-null email in employee_contacts_1004.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Address, COUNT(*) FROM employee_contacts_1004 GROUP BY Address HAVING COUNT(*) > 1;","Count the occurrences of each address from the employee_contacts_1004 table, including only addresses that appear more than once."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.LastName;","Retrieve employees' first and last names with their phone numbers, sorted by last names."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber AS LatestPhone FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.ContactID = (SELECT MAX(ContactID) FROM employee_contacts_1004 WHERE EmployeeID = e.EmployeeID) GROUP BY e.EmployeeID;",Select the Employee IDs and their latest phone numbers by joining the employee table with the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Email, e.FirstName FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@company.com';","Retrieve the email addresses and first names of employees who have an email address ending with '@company.com', joining the employee contacts table on employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber LIKE '555%';",Select Employee IDs and phone numbers of contacts where the phone number starts with '555'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID HAVING COUNT(ec.ContactID) > 2;","Retrieve Employee IDs and the count of their contact records from employee_contacts_1004, including only those with more than 2 contacts."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, ec.Address FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID;","Retrieve the first names and last names of employees along with their addresses from the employee table, including all employees even if they do not have a listed address."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY ec.PhoneNumber;","Select the EmployeeID and PhoneNumber of employees, joining the employee table with the employee contacts table, ordered by PhoneNumber."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, AVG(LENGTH(ec.PhoneNumber)) AS AvgPhoneLength FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID;","Retrieve the Employee IDs and the average length of their phone numbers from employee contacts, grouped by Employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL ORDER BY ec.Email DESC;","Retrieve the Employee IDs and email addresses of employees with non-null email addresses from the employee contacts table, sorted by email addresses in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Address, COUNT(ec.ContactID) AS CountPerAddress FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING COUNT(ec.ContactID) > 3;",Retrieve addresses and count the contact records for each address with more than three records from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.FirstName LIKE 'A%';",Retrieve the first and last names of employees whose first names start with 'A' and their phone numbers.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS contact_count FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) < 3;","Select EmployeeIDs from employee_contacts_1004 and count the contacts for each EmployeeID, including those with fewer than 3 contacts."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Address AS LastAddress FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY ec.ContactID DESC GROUP BY e.EmployeeID, ec.Address;",Get the Employee IDs and the most recent address for each employee by joining the employee table with the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL ORDER BY e.EmployeeID;","Select the EmployeeID and Email of employees from the employee_1001 table who have a non-null email address in the employee_contacts_1004 table, joined by EmployeeID, and sorted by EmployeeID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, COUNT(ec.ContactID) FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.FirstName HAVING COUNT(ec.ContactID) > 1;","Get the first names of employees and the count of their contact entries, including only those with more than one contact entry."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.PhoneNumber, ec.EmployeeID FROM employee_contacts_1004 ec WHERE LENGTH(ec.PhoneNumber) > 10;",Select the phone numbers and employee IDs from employee_contacts_1004 where the phone number length is greater than 10.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, EmployeeID, PhoneNumber, Email, Address FROM employee_contacts_1004;","Select the ContactID, EmployeeID, PhoneNumber, Email, and Address from the employee_contacts_1004 table."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID;",Retrieve Employee IDs and phone numbers by joining the employee table with the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,Count the contact records in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1;",Retrieve Employee IDs with more than one associated contact and their contact count from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL;",Retrieve the Employee IDs and email addresses of employees who have an email address by left joining the employee table with the employee contacts table on Employee IDs.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Address, COUNT(EmployeeID) AS NumberOfEmployees FROM employee_contacts_1004 GROUP BY Address ORDER BY NumberOfEmployees DESC;","Retrieve addresses from employee contacts and count the number of employees for each address, sorting the results by employee count in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber LIKE '555%';",Retrieve the Employee IDs and phone numbers of employees whose phone numbers begin with '555'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Email FROM employee_contacts_1004 WHERE Email IS NOT NULL ORDER BY Email;,"Retrieve distinct non-null email addresses from employee_contacts_1004, sorted alphabetically."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.LastName;","Retrieve the EmployeeID, FirstName, and LastName of employees in the employee_1001 table linked to the employee_contacts_1004 table, sorted by LastName."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Address FROM employee_contacts_1004 WHERE Address LIKE '%Street%';",Get Employee IDs and addresses from employee_contacts_1004 where the address includes 'Street'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID;","Retrieve the Employee IDs and the number of contact entries for each employee, including those without contacts."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.FirstName;","Retrieve the EmployeeID, FirstName, LastName, and PhoneNumber of employees from the employee_1001 table, joined with employee_contacts_1004 on EmployeeID, sorted by FirstName."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(ContactID) AS TotalContacts FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(ContactID) > 3;",Retrieve EmployeeIDs and the count of contacts for each employee from the employee_contacts_1004 table where the count is greater than 3.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec LEFT JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.EmployeeID IS NULL;",Select the EmployeeID and PhoneNumber from the employee_contacts_1004 table where there is no corresponding EmployeeID in the employee_1001 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Address, COUNT(ContactID) FROM employee_contacts_1004 GROUP BY Address HAVING COUNT(ContactID) > 1;",Retrieve the addresses from employee_contacts_1004 and count contacts for addresses with more than one contact.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@example.com';",Retrieve the first and last names of employees and their email addresses from the employee and contacts tables where emails end with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL ORDER BY PhoneNumber;,Retrieve non-null phone numbers from the employee_contacts_1004 table and sort them.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ec.ContactID) as ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.FirstName, e.LastName HAVING COUNT(ec.ContactID) > 2;","Retrieve the first and last names of employees with more than two contact records, along with the count of their contact records."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber, Email FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL AND Email IS NOT NULL;","Get the Employee IDs, phone numbers, and email addresses of employees where both phone numbers and email addresses are available."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, e.FirstName, e.LastName FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.Address IS NOT NULL;","Retrieve the EmployeeID, first name, and last name of employees with a non-null address from the employee_contacts_1004 table, joining with the employee_1001 table on EmployeeID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber LIKE '123%';,Get distinct phone numbers from employee_contacts_1004 that start with '123'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email, Address FROM employee_contacts_1004;","Retrieve contact information, including phone numbers, emails, and addresses, for employees."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber, Email, Address FROM employee_contacts_1004 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE Department = 'Sales');","Retrieve the ContactID, PhoneNumber, Email, and Address of contacts for employees in the Sales department."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 2","Retrieve Employee IDs with more than two contact records, including employees with no contacts."
"CREATE TABLE employee_contacts_1204 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""Name"" TEXT,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1204 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL;",Retrieve the EmployeeID and Name from the employee_1001 table along with the PhoneNumber from the employee_contacts_1004 table for employees with a valid PhoneNumber.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, e.EmployeeID, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@company.com';","Retrieve the names, Employee IDs, and email addresses of employees from the employee and employee contacts tables where the email addresses contain '@company.com'."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Address FROM employee_contacts_1004 WHERE Address IS NOT NULL ORDER BY Address;,"Retrieve distinct non-null addresses from the employee_contacts_1004 table, sorted in ascending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%New York%' ORDER BY e.Name;","Retrieve the Employee IDs and names along with their phone numbers for employees living in New York, sorted by name."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Department;","Get the departments of employees and the count of their contact records by joining the employee and employee contacts tables, grouped by department."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, COUNT(EmployeeID) AS PhoneContactCount FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(EmployeeID) > 1;","Count the number of employees associated with each phone number in the employee contacts table, including only phone numbers that are associated with more than one employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT DISTINCT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.EmployeeID IS NULL;",Retrieve the EmployeeIDs and PhoneNumbers from the employee_contacts_1004 table where the EmployeeIDs do not exist.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.ContactID, ec.Email FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.HireDate < '2020-01-01';","Select the ContactID and Email of employees from employee_contacts_1004 who were hired before January 1, 2020."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Address FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL AND Address IS NOT NULL;",Select the EmployeeID and Address of employees from the employee_contacts_1004 table where PhoneNumber and Address are both not null.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) = 0;","Retrieve the EmployeeID of employees without any contact entries, along with a count of their contact entries, which should be zero."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 WHERE LENGTH(PhoneNumber) > 10;",Get the ContactID and phone numbers of employees with phone numbers longer than 10 characters.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Email, COUNT(ec.EmployeeID) AS EmailCount FROM employee_contacts_1004 ec GROUP BY ec.Email HAVING COUNT(ec.EmployeeID) > 1;","Retrieve email addresses from employee_contacts_1004 and count the employees for each email, including only those emails associated with more than one employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, e.Department FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address IS NOT NULL ORDER BY e.Department ASC;","Select the names and departments of employees with a non-null address in the employee_contacts_1004 table, ordered by department."
"CREATE TABLE employee_contacts_1014 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""Name"" TEXT,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN employee_contacts_1014 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.EmployeeID IS NULL;",Retrieve the EmployeeID and Name of employees from the employee_1001 table who lack contact information in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%2020%'",Retrieve the Employee IDs and names along with their addresses from the employee table where the address contains '2020'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.ContactID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IN (SELECT PhoneNumber FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(*) > 1)",Select ContactID and PhoneNumber from employee_contacts_1004 for phone numbers that appear more than once.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.Department FROM employee_1001 e JOIN employee_contacts_1004 ec ON ec.EmployeeID = e.EmployeeID WHERE ec.Email LIKE '%@gmail.com';","Retrieve the Employee ID, Name, and Department of employees who have at least one contact with a Gmail email address."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalContacts DESC;","Retrieve Employee IDs and the count of contact entries for each employee, including those with no contacts, grouped by Employee ID and sorted by contact count in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email, Address FROM employee_contacts_1004","Retrieve phone numbers, emails, and addresses for all employees from the employee_contacts_1004 table."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005;,Select all columns from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Manager';,Retrieve project names where the employee's role is 'Manager'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate > '2022-01-01'","Get Employee IDs and project names from project_assignments_1005 for assignments starting after January 1, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005;,Count the total number of records in the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005;,Get the unique roles from the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 GROUP BY ProjectName;",Get the project names and the total number of assignments for each project from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE EndDate IS NOT NULL;,Select all records from project_assignments_1005 where EndDate is not null.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE EndDate < '2023-08-01';","Get Employee IDs and their roles for project assignments with an End Date before August 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE EmployeeID = 101;,Count the total project assignments for EmployeeID 101.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC;","Get the project names and start dates from the project_assignments_1005 table, sorted by start dates in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE ProjectName LIKE '%Research%';",Get the Employee IDs and project names from project_assignments_1005 where the project name contains 'Research'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY Role;","Count the number of assignments for each role in project_assignments_1005, grouped by role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE Role = 'Developer' AND StartDate < '2023-01-01';,"Get all project assignments where the role is 'Developer' and the start date is before January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName;","Retrieve the project names and their latest end dates from the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM project_assignments_1005 WHERE EndDate IS NULL;,Retrieve the EmployeeIDs of employees with ongoing project assignments where the EndDate is not specified.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31';,"Retrieve project names from project_assignments_1005 where the start date is between January 1, 2022, and December 31, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM project_assignments_1005;,Count distinct employees assigned to projects in the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 2;",Count roles with more than 2 assignments in the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE Role = 'Analyst';,Retrieve all project assignments for employees with the role 'Analyst' from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, StartDate, EndDate FROM project_assignments_1005 WHERE EndDate > StartDate;","Retrieve the project names, start dates, and end dates from project_assignments_1005 where the end date is after the start date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, Role FROM project_assignments_1005;","Select AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, and Role from the project_assignments_1005 table."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005;,Retrieve all records from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Manager';,Get project names from project_assignments_1005 where the role is 'Manager'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005;,Retrieve distinct roles from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE EndDate IS NOT NULL;,Count the project assignments with a non-null EndDate.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID;",Count the number of projects assigned to each employee and return the EmployeeID with the project count.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01';,"Retrieve all assignments from project_assignments_1005 that started on or after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC;","Get the project names and start dates from project_assignments_1005, sorted by start dates in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, Role FROM project_assignments_1005 WHERE EmployeeID = 1;",Get the project names and roles for assignments of employee ID 1 from project_assignments_1005.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE EndDate < StartDate;,Select all records from project_assignments_1005 where the EndDate is before the StartDate.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName LIKE 'Alpha%';",Retrieve the Employee IDs and roles of employees assigned to projects starting with 'Alpha' in the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName;","Get the project names and their latest end dates from the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE Role = 'Developer' AND EndDate > '2023-12-31',"Count the number of project assignments for the role 'Developer' with an end date after December 31, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3;",Fetch Employee IDs and the count of project assignments for employees with more than 3 assignments from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MIN(StartDate) AS EarliestStart FROM project_assignments_1005 GROUP BY ProjectName;","Retrieve the earliest start date for each project from the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT * FROM project_assignments_1005 WHERE Role IN ('Developer', 'Tester');",Retrieve all records from project_assignments_1005 where the employee's role is 'Developer' or 'Tester'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM project_assignments_1005 WHERE EndDate IS NULL;,Get distinct Employee IDs from project_assignments_1005 where EndDate is null.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY ProjectName ORDER BY AssignmentCount DESC;","Get project names and the number of assignments for each project, sorted by assignment count in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate < '2023-01-01' AND EndDate > '2023-01-01',"Select all records from project_assignments_1005 where the start date is before January 1, 2023, and the end date is after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS DeveloperCount FROM project_assignments_1005 WHERE Role = 'Developer' GROUP BY EmployeeID;","Count the number of project assignments for each employee with the role 'Developer', grouped by EmployeeID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS Count FROM project_assignments_1005 GROUP BY Role ORDER BY Count DESC;","Count the assignments for each role in the project_assignments_1005 table, grouped by role and sorted by the count in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005;,Retrieve all records from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 GROUP BY ProjectName;",Retrieve project names and the total number of assignments for each project from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(StartDate) AS FirstProjectStart FROM project_assignments_1005 GROUP BY EmployeeID;","Retrieve the EmployeeIDs and the start date of their first project from project_assignments_1005, grouped by EmployeeID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 5;","List the Employee IDs and the count of projects assigned to each employee from the project_assignments_1005 table, for employees assigned to more than 5 projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName HAVING MAX(EndDate) < '2023-12-31';","Get project names and their latest end dates from the project_assignments_1005 table for projects ending before December 31, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role;","Get the count of employees assigned to each role from the project_assignments_1005 table, grouped by role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY EmployeeID;",Calculate the average duration of project assignments for each employee by subtracting the start date from the end date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate >= '2023-01-01' AND EndDate <= '2023-12-31';","Get Employee IDs and project names for assignments starting on or after January 1, 2023, and ending on or before December 31, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 WHERE Role = 'Manager' GROUP BY ProjectName;","Retrieve the project names and the number of assignments for projects where the role is 'Manager', grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL ORDER BY EndDate DESC;","Get Employee IDs and project names from project assignments with a non-null end date, sorted by end date in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM project_assignments_1005 WHERE Role = 'Developer' GROUP BY EmployeeID HAVING COUNT(*) > 3;,Select the EmployeeIDs of employees assigned to more than three projects as 'Developer' from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS NumberOfProjects FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 10;","Count the number of projects for each role in the project_assignments_1005 table, including only roles with more than 10 projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, StartDate, EndDate FROM project_assignments_1005 WHERE Role LIKE '%Lead%';","Retrieve the Employee IDs, Start Dates, and End Dates of project assignments with a role containing 'Lead'."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 WHERE StartDate < '2023-01-01' GROUP BY ProjectName;","Retrieve project names and the count of assignments for projects starting before January 1, 2023, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005 WHERE EmployeeID IS NOT NULL;,Retrieve distinct roles from project_assignments_1005 where EmployeeID is not null.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(julianday(EndDate) - julianday(StartDate)) AS TotalDaysWorked FROM project_assignments_1005 GROUP BY EmployeeID;","Calculate the total days each employee worked on projects by summing the difference between EndDate and StartDate, grouped by EmployeeID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignedEmployees FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(*) < 5;","Retrieve the names of projects and the count of employees assigned to each project, filtering for projects with fewer than 5 employees."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, Role FROM project_assignments_1005 WHERE EndDate > CURRENT_TIMESTAMP;","Retrieve Employee IDs, project names, and roles from project assignments with future End Dates."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM project_assignments_1005 WHERE StartDate >= '2023-01-01' AND StartDate <= '2023-12-31';,Count distinct EmployeeIDs from project_assignments_1005 for assignments starting in 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, MIN(StartDate) AS EarliestStartDate FROM project_assignments_1005 GROUP BY Role;",Retrieve the earliest start dates for each role from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS Count FROM project_assignments_1005 GROUP BY Role ORDER BY Count DESC;","Get the count of assignments by role from the project_assignments_1005 table, sorted by count in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, Role FROM project_assignments_1005;","Select AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, and Role from the project_assignments_1005 table."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 GROUP BY ProjectName;","Retrieve project names and the total assignments for each project from the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3;","Get the Employee IDs and the count of projects assigned to each employee, only for those with more than 3 projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, AVG(JULIANDAY(EndDate) - JULIANDAY(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName;","Calculate the average duration of projects in days, grouped by project name, from the project_assignments_1005 table."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role ORDER BY EmployeeCount DESC;","Count the number of employees for each role in the project_assignments_1005 table, grouping by role and sorting the results in descending order of count."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate < '2023-01-01' AND EndDate > '2023-01-01';","Get Employee IDs and Project Names from project_assignments_1005 where Start Date is before January 1, 2023, and End Date is after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName;",Retrieve the project names and the latest end date for each project from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, 
       SUM(DATEDIFF(EndDate, StartDate)) AS TotalWorkTime 
FROM project_assignments_1005 
GROUP BY EmployeeID 
HAVING TotalWorkTime > 365;
","Retrieve the EmployeeIDs and the total work time in days for each employee from the project_assignments_1005 table, where the total work time exceeds 365 days."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, MIN(StartDate) AS EarliestStartDate FROM project_assignments_1005 GROUP BY Role;","Retrieve each role and the earliest start date from the project_assignments_1005 table, grouped by role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID;",Get the Employee IDs and the count of distinct project names for each employee from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 WHERE StartDate >= '2022-01-01' GROUP BY ProjectName;","Get the project names and the number of assignments for projects that started on or after January 1, 2022, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, Role FROM project_assignments_1005 WHERE EndDate IS NULL;","Retrieve Employee IDs, project names, and roles for assignments with no specified end date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS RoleCount FROM project_assignments_1005 WHERE Role IS NOT NULL GROUP BY Role;","Get the count of assignments grouped by role from project_assignments_1005, excluding null roles."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE StartDate < EndDate;,Get project names where the start date is before the end date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC;","Get Employee IDs, project names, and start dates from project_assignments_1005, sorted by start dates descending."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role;",Retrieve the count of distinct employees for each role from the project_assignments_1005 table.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS ActiveAssignments FROM project_assignments_1005 WHERE StartDate <= CURRENT_TIMESTAMP AND (EndDate >= CURRENT_TIMESTAMP OR EndDate IS NULL) GROUP BY ProjectName;","Retrieve project names and the count of active assignments for each project with a start date before or on the current timestamp, and an end date on or after the current timestamp or unspecified, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName LIKE '%Release%';",Get Employee IDs and roles from project_assignments_1005 where ProjectName contains 'Release'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS OngoingProjects FROM project_assignments_1005 WHERE EndDate IS NULL GROUP BY ProjectName;","Retrieve project names and the count of ongoing projects with no specified end date, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > (SELECT AVG(ProjectCount) FROM (SELECT COUNT(*) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID)),Select the EmployeeIDs from project_assignments_1005 for employees assigned to more projects than the average.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE EndDate < CURRENT_TIMESTAMP;,Count the number of assignments in the project_assignments_1005 table with an EndDate before the current time.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, Role FROM project_assignments_1005;","Retrieve all project assignments with their IDs, employee IDs, project names, start dates, end dates, and roles."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(EmployeeID) AS NumberOfEmployees FROM project_assignments_1005 GROUP BY ProjectName;","Get the project names and the count of employees assigned to each project, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate < CURRENT_TIMESTAMP;",Retrieve Employee IDs and project names for projects that ended before the current time.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY EmployeeID;","Calculate the average duration of project assignments for each employee by finding the difference between the start and end dates of each assignment, grouped by employee ID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT p1.ProjectName, p2.ProjectName FROM project_assignments_1005 p1 JOIN project_assignments_1005 p2 ON p1.EmployeeID = p2.EmployeeID WHERE p1.AssignmentID < p2.AssignmentID;",Select the names of two different projects assigned to the same employee with different assignment IDs.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Manager' AND StartDate >= '2022-01-01';,"Retrieve project names from project_assignments_1005 where the role is 'Manager' and the start date is on or after January 1, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 GROUP BY EmployeeID, Role HAVING COUNT(*) > 3;",Retrieve the Employee IDs and roles of employees assigned to more than 3 projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(CASE WHEN Role = 'Developer' THEN 1 END) AS CountDevelopers FROM project_assignments_1005 GROUP BY ProjectName;","Retrieve the project names and the count of developers assigned to each project in the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(EndDate) AS MaxEndDate FROM project_assignments_1005 GROUP BY EmployeeID HAVING MaxEndDate < '2022-01-01';","Retrieve each EmployeeID and their maximum EndDate of project assignments before January 1, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ActiveAssignments FROM project_assignments_1005 WHERE StartDate <= CURRENT_TIMESTAMP AND (EndDate IS NULL OR EndDate > CURRENT_TIMESTAMP) GROUP BY EmployeeID;","Count the active project assignments for each employee, with a start date on or before today and an end date that is either unspecified or after today."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(julianday(EndDate) - julianday(StartDate)) AS AvgProjectLength FROM project_assignments_1005 WHERE EndDate IS NOT NULL GROUP BY EmployeeID;","Get the Employee IDs and the average project duration in days for each employee from the project_assignments_1005 table, considering only projects that have a non-null end date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005 WHERE ProjectName LIKE '%Alpha%';,Retrieve distinct roles of employees with assignments on projects named 'Alpha'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(EmployeeID) AS Collaborators FROM project_assignments_1005 GROUP BY ProjectName;",Retrieve the names of projects and the count of employees assigned to each project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 WHERE Role = 'Tester' GROUP BY ProjectName HAVING COUNT(*) > 5;",Retrieve project names and the count of assignments for projects with more than 5 assignments where the role is 'Tester'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalAssignments FROM project_assignments_1005 GROUP BY EmployeeID ORDER BY TotalAssignments DESC LIMIT 5;","Retrieve the Employee IDs and the count of their project assignments from the project_assignments_1005 table, sorted by the number of assignments in descending order, limiting the results to the top 5 employees."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(EmployeeID) <= 2;","Get the project names and the count of employees assigned to each project from the project_assignments_1005 table, where the count of employees is less than or equal to 2."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NULL;",Retrieve the Employee IDs and project names for projects that have not yet ended.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT p1.EmployeeID FROM project_assignments_1005 p1 JOIN project_assignments_1005 p2 ON p1.ProjectName = p2.ProjectName WHERE p1.Role != p2.Role;,Select distinct EmployeeIDs of employees who worked on the same project with different roles.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MIN(StartDate) AS EarliestStartDate FROM project_assignments_1005 GROUP BY ProjectName;","Retrieve project names and the earliest start date for each project from the project_assignments_1005 table, grouped by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AssignmentCount FROM project_assignments_1005 WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY EmployeeID ORDER BY AssignmentCount DESC;","Get the Employee IDs and count of project assignments for assignments starting in 2022, grouped by Employee ID and sorted by assignment count in descending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS RoleCount FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 2;","Get the count of assignments for each role in the project_assignments_1005 table, including only roles with more than 2 assignments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001;,Retrieve all records from the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002;,Retrieve all records from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1;,Get the names of departments where the DepartmentID is 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2;,Get the EmployeeIDs of employees in DepartmentID 2.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001 ORDER BY DepartmentName ASC;,"Get all columns from the department_2001 table, ordered by DepartmentName."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT DepartmentID FROM employee_department_2002;,Get the unique DepartmentIDs from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID;",Get employee IDs and department names from employee_department_2002 and department_2001 by joining on DepartmentID.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT ManagerID FROM department_2001 WHERE DepartmentName = 'Sales';,Get the ManagerID for the 'Sales' department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM employee_department_2002;,Count the total records in the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE StartDate > '2023-01-01';","Retrieve Employee IDs and Department IDs from employee_department_2002 where Start Date is after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName;","Get the department names and the number of employees in each department, including those with no employees, by left joining department_2001 with employee_department_2002 and grouping by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT StartDate, EndDate FROM employee_department_2002 WHERE EmployeeID = 3;",Get the start and end dates of employment for employee ID 3.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentID FROM employee_department_2002 GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 5;,Retrieve DepartmentIDs from employee_department_2002 where the count of EmployeeIDs is greater than 5.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EmployeeID IS NULL;","Get the names of departments and Employee IDs for employees not associated with any department, using a left join on department_2001 and employee_department_2002 where Employee IDs are null."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002 WHERE EndDate IS NULL;,Retrieve all records from employee_department_2002 where EndDate is null.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE d.ManagerID = 1;",List the department names and employee IDs for employees in departments managed by the manager with ID 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31';,Get the EmployeeIDs of employees with a StartDate in 2023 from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT ManagerID FROM department_2001;,Select the unique ManagerIDs from the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(DISTINCT d.DepartmentID) AS TotalDepartments FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID;,Count the distinct departments from the department_2001 table by joining it with the employee_department_2002 table on DepartmentID.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID IN (SELECT DepartmentID FROM employee_department_2002 WHERE EmployeeID = 2);,Get the names of departments for EmployeeID 2.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001 WHERE ManagerID IS NOT NULL;",Select the DepartmentID and DepartmentName from department_2001 where the ManagerID is present.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001;,Retrieve all records from the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002;,Retrieve all records from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1;,Get the department name for DepartmentID 1 from the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE StartDate < '2023-01-01';","Get Employee IDs and Department IDs from employee_department_2002 where Start Date is before January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT DepartmentName FROM department_2001;,Retrieve distinct department names.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT ManagerID FROM department_2001 WHERE DepartmentName = 'Sales';,Get the ManagerID of the 'Sales' department from department_2001.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID;",Retrieve employee IDs and their department names by joining the employee_department_2002 and department_2001 tables on DepartmentID.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM employee_department_2002;,Count the number of employees in the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","Retrieve department names and the number of employees in each department, using a left join between department_2001 and employee_department_2002, grouped by department names."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, AVG(EmployeeID) AS AverageEmployeeID FROM employee_department_2002 GROUP BY DepartmentID;","Calculate the average EmployeeID for each DepartmentID from the employee_department_2002 table, grouped by DepartmentID."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE EndDate IS NULL;,Retrieve the EmployeeIDs of employees whose EndDate is null in the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.StartDate > '2023-02-01';","Get the department names and employee IDs for employees who started after February 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2 AND StartDate >= '2022-01-01';,"Get the EmployeeIDs of employees in department 2 who started on or after January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, MAX(StartDate) FROM employee_department_2002 GROUP BY DepartmentID;",Retrieve the DepartmentID and the latest StartDate for each DepartmentID from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EmployeeID IS NULL;,Select the DepartmentID from the department table for departments that have no associated employees.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ManagerID, COUNT(*) AS DepartmentCount FROM department_2001 GROUP BY ManagerID;",Count the number of departments managed by each ManagerID in the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002 ORDER BY StartDate;","Retrieve employee IDs and department IDs from employee_department_2002, ordered by start date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31';","Select Employee and Department IDs from employee_department_2002 where Start Date is from January 1, 2022, to December 31, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM employee_department_2002 WHERE EndDate >= '2023-01-01',"Count the number of employees in the employee_department_2002 table with an EndDate on or after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;",Get the names of departments and the total count of employees in each department by joining department_2001 with employee_department_2002 and grouping by department names.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Retrieve the department names and total employee counts by joining the employee_department_2002 and department_2001 tables, grouping by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE d.ManagerID IS NOT NULL;",Retrieve the Employee IDs and department names of employees who belong to departments with an assigned manager.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Get the latest start date of employees grouped by department names from the department_2001 and employee_department_2002 tables.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE EndDate IS NULL;",Select Employee IDs and Department IDs from employee_department_2002 where EndDate is NULL.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d WHERE d.ManagerID IS NOT NULL AND d.ManagerID IN (SELECT EmployeeID FROM employee_1001);,Retrieve department names where the ManagerID is among non-null EmployeeIDs in the employee_1001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, COUNT(ed.DepartmentID) AS DepartmentCount FROM employee_department_2002 ed GROUP BY ed.EmployeeID HAVING COUNT(ed.DepartmentID) > 1;",Retrieve the Employee IDs and count of departments for employees associated with more than one department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName;","Retrieve Employee IDs and Department names by joining the employee, employee_department, and department tables, sorted by Department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(DISTINCT EmployeeID) AS UniqueEmployees FROM employee_department_2002 WHERE StartDate >= '2023-01-01';,"Count the distinct employees with a start date on or after January 1, 2023, from the employee_department_2002 table."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.StartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate < '2023-01-01' ORDER BY ed.EndDate DESC;","Retrieve department names and employee start dates from employee_department_2002, joined with department_2001 on DepartmentID, for records where end dates are before January 1, 2023, sorted by end dates in descending order."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%';",Retrieve the first and last names of employees in departments starting with 'Sales' along with the department names.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentID, COUNT(ed.EmployeeID) AS TotalEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentID ORDER BY TotalEmployees DESC;","Retrieve the Department IDs and the count of employees from department_2001, joining with employee_department_2002 on Department ID, grouped by Department ID, and sorted by employee count in descending order."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed);","Select the EmployeeID, FirstName, and LastName of employees not associated with any department."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, MIN(StartDate) AS EarliestStartDate FROM employee_department_2002 GROUP BY DepartmentID;","Get the Department IDs and the earliest Start Date from employee_department_2002, grouped by Department ID."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, COUNT(*) AS ActiveDepartments FROM employee_department_2002 WHERE EndDate IS NULL GROUP BY EmployeeID HAVING COUNT(*) > 1;","Get the Employee IDs and count of active departments for each employee with no EndDate, including only those with more than one active department."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS CurrentEmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate IS NULL GROUP BY d.DepartmentName;","Select department names and count the current employees in each department from the department_2001 table, joining with employee_department_2002 on DepartmentID where EndDate is null, grouped by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(strftime('%Y', 'now') - strftime('%Y', ed.StartDate)) AS AvgYearsInDepartment FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Retrieve department names and the average years employees have been in those departments, based on the difference between the current year and the start year."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID, e.FirstName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate BETWEEN '2022-01-01' AND '2022-12-31';","Get the department names and employee IDs with first names for employees assigned to those departments between January 1, 2022, and December 31, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT COUNT(CASE WHEN ed.EndDate IS NULL THEN 1 END) AS ActiveEmployees, COUNT(CASE WHEN ed.EndDate IS NOT NULL THEN 1 END) AS InactiveEmployees FROM employee_department_2002 ed;",Count the number of active employees (with a null EndDate) and inactive employees (with a non-null EndDate) from the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID ORDER BY d.DepartmentName, e.LastName;","Retrieve department names and the first and last names of associated employees, sorted by department names and employee last names."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001 WHERE ManagerID IS NOT NULL;",Select the DepartmentID and DepartmentName from department_2001 where the ManagerID is set.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Get the names of departments and the number of employees in each department by joining the employee department table with the department table and grouping by department name.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE d.ManagerID IS NOT NULL;","Retrieve the names of departments and the employee IDs of employees in those departments, where the departments have a manager."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE ManagerID = (SELECT EmployeeID FROM employee_1001 WHERE LastName = 'Smith'),Get the names of departments managed by the employee with the last name 'Smith'.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(ed.StartDate) AS EarliestStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Get the department names and the earliest start date for employees in each department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, ed.StartDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NULL ORDER BY ed.StartDate;","Get the Employee IDs, first names, last names, and start dates of employees currently in a department, sorted by start date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS ActiveEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID AND ed.EndDate IS NULL LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName;","Retrieve department names and the count of active employees in each department, considering employees with a null end date as active, grouped by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate < '2023-01-01' AND (ed.EndDate IS NULL OR ed.EndDate > '2023-01-01');","Retrieve the Employee IDs and Department Names of employees who started in their department before January 1, 2023, and either have no End Date or an End Date after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 5;","Get department names and the number of employees in each department, including only those with more than 5 employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName, e.LastName;","Retrieve the first and last names of employees and their department names, sorted by department name and last name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS AverageEmployees FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Retrieve the names of departments and the count of employees in each department, grouping the results by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, ed.StartDate, ed.EndDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NULL AND e.DateOfBirth < '1990-01-01';","Retrieve the Employee IDs, start dates, and end dates of currently active employees (with no end date) born before January 1, 1990."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.DepartmentID IS NULL;",Retrieve the first and last names of employees who are not associated with any department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate < '2023-01-01' GROUP BY d.DepartmentName;","Retrieve department names and the count of employees who ended their employment before January 1, 2023, grouped by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT ed.EmployeeID) AS TotalEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate >= '2020-01-01' GROUP BY d.DepartmentName;","Get department names and the count of distinct employees assigned since January 1, 2020, by joining department and employee assignment data, grouped by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName",Get department names and the latest employee start date for each department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, COUNT(*) AS DepartmentCount FROM employee_department_2002 GROUP BY EmployeeID HAVING COUNT(*) > 1;","Retrieve EmployeeIDs of employees associated with multiple departments, along with the department count for each."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d WHERE d.ManagerID IN (SELECT e.EmployeeID FROM employee_1001 e WHERE e.HireDate > '2020-01-01'),"Select the names of departments managed by employees hired after January 1, 2020."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NOT NULL;",Retrieve the first and last names of employees from the employee_1001 table who have an EndDate associated with their records in the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentID, d.DepartmentName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID;",Select the DepartmentID and DepartmentName from department_2001 where the EmployeeID matches in employee_department_2002.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 5;","Get the names of departments and the number of employees in each department, including only those with more than 5 employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE d.ManagerID IS NOT NULL;","Retrieve the names of departments and their employee IDs from the department_2001 table, where the departments have a manager assigned."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID LEFT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate IS NULL;","Select the EmployeeID, FirstName, LastName, and DepartmentName of employees who currently have no EndDate in the employee_department_2002 table by joining the employee_1001 table with employee_department_2002 and department_2001."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS ActiveEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate IS NOT NULL GROUP BY d.DepartmentName;","Retrieve department names and the number of active employees (with a non-null EndDate) in each department, grouping by department name."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.EndDate IS NOT NULL);","Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who are not currently assigned to any department, as indicated by a non-null EndDate in the employee_department_2002 table."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName;",Retrieve department names and the latest start date of employees in each department by joining the department_2001 and employee_department_2002 tables and grouping by department name.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, COUNT(ed.DepartmentID) AS DepartmentCount FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 2;",Get Employee IDs and the number of departments for each employee in employee_1001 who are associated with more than 2 departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, ManagerID FROM department_2001 WHERE ManagerID IS NULL;",Retrieve the names and manager IDs of departments where the manager ID is NULL.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.StartDate < '2022-01-01';","Get department names along with the first and last names of employees assigned to those departments before January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(ed.DepartmentID) AS TotalDepartments FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 1;","Select the EmployeeID, first name, and last name of employees who are associated with more than one department, along with the count of departments, from the employee_1001 table."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC;","Retrieve department names and the number of employees in each department, including those with no employees, sorted by employee count in descending order."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.StartDate BETWEEN '2021-01-01' AND '2021-12-31';","Select department names and employee first and last names for employees assigned to those departments between January 1, 2021, and December 31, 2021."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.StartDate <= '2020-12-31' AND ed.EndDate >= '2020-01-01');","Retrieve the Employee IDs, first names, and last names of employees from the employee_1001 table who are not associated with any department during 2020."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.DepartmentID, COUNT(*) FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY ed.DepartmentID HAVING COUNT(*) > 3;","Get the Department IDs and the number of employees in each department from the employee_department_2002 table, joined with the department_2001 table, where the number of employees exceeds 3."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NULL;","Retrieve the employee IDs, first names, and last names of employees who are currently assigned to a department, indicated by a null end date in the employee_department_2002 table."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS Total, AVG(ed.EndDate - ed.StartDate) AS AverageDuration FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName;","Retrieve department names, the total number of employees, and the average employment duration calculated as the difference between end date and start date, by joining department_2001 and employee_department_2002."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.FirstName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.DepartmentID IS NULL;",Select the EmployeeID and FirstName of employees who are not assigned to any department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COALESCE(e.FirstName, 'No Employees') AS ManagerName FROM department_2001 d LEFT JOIN employee_1001 e ON d.ManagerID = e.EmployeeID;","Select department names and their managers' names from department_2001, showing 'No Employees' if a department has no manager."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT COUNT(*) AS ActiveCount, d.DepartmentName FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate IS NULL GROUP BY d.DepartmentName;","Count the total number of active employees in each department by department name, where an employee is active if their end date is not specified."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > (SELECT AVG(EmployeeCount) FROM (SELECT COUNT(*) AS EmployeeCount FROM employee_department_2002 GROUP BY DepartmentID))","Retrieve department names and the count of employees in each department, including only those departments where the employee count exceeds the average number of employees per department."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003;,Select all data from the project_2003 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004;,Retrieve all records from employee_projects_2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectID = 1;,Get the project name from project_2003 where ProjectID is 1.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT StartDate, EndDate FROM project_2003 WHERE ProjectName = 'Project A';",Get the start and end dates of 'Project A'.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Developer';",Get the EmployeeID and ProjectID of employees with the role 'Developer'.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT EmployeeID FROM employee_projects_2004 WHERE ProjectID = 2;,Get the EmployeeIDs of employees assigned to ProjectID 2.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004;,Get distinct roles from the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_projects_2004;,Count the total records in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 5;,Get the Project IDs for Employee ID 5 from employee_projects_2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, StartDate FROM project_2003 ORDER BY StartDate;","Get the names and start dates of all projects from the project_2003 table, ordered by start date."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY ProjectID;","Count the number of employees assigned to each project, grouped by ProjectID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectID FROM employee_projects_2004 WHERE AssignmentStart < '2023-01-01',"Get Project IDs from employee_projects_2004 where the assignment start date is before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE EndDate > '2023-12-31';,"Get project names from project_2003 where the end date is after December 31, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd IS NULL;",Get the Employee IDs and roles from employee_projects_2004 for current assignments.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, Role FROM employee_projects_2004 WHERE EmployeeID = 10;",Get the Project IDs and roles of employees assigned to projects for Employee ID 10.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT StartDate FROM project_2003 WHERE ProjectID IN (SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 1);,Get the start dates of projects linked to EmployeeID 1 in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT EndDate FROM project_2003 WHERE ProjectID = (SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 8 LIMIT 1);,"Get the end date of the project for the employee with ID 8, by finding their project ID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","Get the project names and the number of employees assigned to each project by joining the employee_projects_2004 table with the project_2003 table, grouping by project name."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, MAX(AssignmentEnd) AS LatestAssignmentEnd FROM employee_projects_2004 GROUP BY EmployeeID;",Retrieve each EmployeeID and their latest assignment end date from the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectID NOT IN (SELECT ProjectID FROM employee_projects_2004);,Get the names of projects in the project_2003 table that are unassigned to any employees in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(*) AS ManagerCount FROM employee_projects_2004 WHERE Role = 'Manager' GROUP BY EmployeeID;","Count how many times each employee has the role of 'Manager' in the employee_projects_2004 table, grouped by EmployeeID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName, StartDate, EndDate FROM project_2003;","Retrieve the ProjectID, ProjectName, StartDate, and EndDate from the project_2003 table."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003;,Retrieve all records from the project_2003 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE StartDate >= '2023-01-01',"Get project names that started on or after January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, StartDate FROM project_2003 ORDER BY StartDate;","Get project names and their start dates from the project_2003 table, sorted by start date."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004;,Retrieve all records from the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, Role FROM employee_projects_2004 WHERE Role = 'Manager';",Retrieve the Employee IDs and roles of employees with the role 'Manager' from the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY ProjectID;","Count the number of employees assigned to each project, grouped by project ID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004;,Get the unique roles assigned to employees in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003 WHERE EndDate IS NULL;,Retrieve all records from the project_2003 table where the EndDate is null.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName FROM project_2003 WHERE ProjectID IN (1, 2, 3);","Get the names of projects with ProjectID 1, 2, or 3."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID;",Get the employee IDs and project names for projects with employee assignments by joining employee_projects_2004 and project_2003 on ProjectID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(*) AS TotalAssignments FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(*) > 5;","Retrieve the ProjectID and count of assignments for each project from the employee_projects_2004 table, including only projects with more than 5 assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd < CURRENT_TIMESTAMP;",Get the Employee IDs and roles of employees whose assignments have ended before now.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(e.EmployeeID) AS EmployeeCount FROM project_2003 p LEFT JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID GROUP BY p.ProjectName;","Get project names and the number of employees assigned to each project, including those with no employees, by counting entries from the employee_projects_2004 table."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE StartDate < EndDate;,Select project names with a start date earlier than the end date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004 WHERE AssignmentStart >= '2023-01-01' AND AssignmentEnd <= '2023-12-31';,"Select all records from employee_projects_2004 where the assignment start date is on or after January 1, 2023, and the assignment end date is on or before December 31, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, e.Role FROM project_2003 p JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID WHERE e.EmployeeID = 1;",Retrieve the project names and roles of the employee with ID 1.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_projects_2004 WHERE AssignmentEnd IS NULL;,Count the records in employee_projects_2004 where AssignmentEnd is null.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT EmployeeID FROM employee_projects_2004 GROUP BY EmployeeID HAVING COUNT(ProjectID) > 2;,Retrieve the EmployeeID of employees assigned to more than two projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, MAX(AssignmentEnd) AS MaxAssignmentEnd FROM employee_projects_2004 GROUP BY ProjectID;","Retrieve ProjectIDs and their maximum AssignmentEnd dates from employee_projects_2004, grouped by ProjectID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2022-01-01';","Retrieve Employee IDs and Project Names of employees assigned to projects that started before January 1, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003;",Select ProjectID and ProjectName from the project_2003 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 ORDER BY StartDate;","Get the Project IDs and names from the project_2003 table, ordered by the project start dates."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, ep.ProjectID, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2024-01-01';","Retrieve Employee IDs, Project IDs, and Roles of employees assigned to projects that started before January 1, 2024."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;",Retrieve project names and the total number of employees assigned to each project by joining the project_2003 and employee_projects_2004 tables and grouping by project name.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalProjects FROM employee_projects_2004 GROUP BY EmployeeID HAVING COUNT(*) > 2;",Get the Employee IDs and the count of projects for employees assigned to more than 2 projects in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, MAX(AssignmentEnd) AS LatestEndDate FROM employee_projects_2004 GROUP BY ProjectID;","Retrieve the Project IDs and the latest assignment end dates for each project from the employee_projects_2004 table, grouped by Project ID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL;",Get the employee IDs and project names of employees with ongoing assignments.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004 WHERE AssignmentStart > '2023-01-01',"Retrieve the distinct roles of employees in the employee_projects_2004 table with an assignment start date after January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, AVG(JULIANDAY(AssignmentEnd) - JULIANDAY(AssignmentStart)) AS AverageAssignmentDuration FROM employee_projects_2004 GROUP BY ProjectID;","Calculate the average assignment duration in days for each project by finding the difference between assignment end and start dates, grouped by project ID, from the employee_projects_2004 table."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","Retrieve project names from the project_2003 table and count the number of assigned employees from the employee_projects_2004 table, including projects with no employees assigned."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM employee_projects_2004 WHERE ProjectID = 1;,Count distinct employees assigned to project ID 1 in employee_projects_2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName, ep.Role FROM employee_projects_2004 ep INNER JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < '2023-12-01' AND ep.AssignmentEnd IS NOT NULL;","Select employee IDs, project names, and roles from employee_projects_2004, joining with project_2003 on ProjectID, where assignment start is before December 1, 2023 and assignment end is not null."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT Role, COUNT(*) AS RoleCount FROM employee_projects_2004 GROUP BY Role HAVING COUNT(*) > 1;",Count and list roles of employees in employee_projects_2004 that appear more than once.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, StartDate FROM project_2003 WHERE EndDate > CURRENT_TIMESTAMP ORDER BY StartDate;","Get the project names and start dates of ongoing projects, sorted by start date."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Manager';",Get the Employee IDs and Project Names of employees with the role 'Manager' by joining employee_projects_2004 and project_2003 on ProjectID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, SUM(JULIANDAY(AssignmentEnd) - JULIANDAY(AssignmentStart)) AS TotalDaysAssigned FROM employee_projects_2004 GROUP BY EmployeeID HAVING TotalDaysAssigned > 30;",Get the Employee IDs and total days assigned to projects for employees who have more than 30 days of assignment.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, ep.ProjectID FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.ProjectID IS NULL;",Select the Employee IDs and Project IDs from employee_projects_2004 with no matching ProjectID in project_2003.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(EmployeeID) >= 3;","Get the Project IDs and the number of employees assigned to each project from employee_projects_2004, for projects with three or more assigned employees."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart < p.StartDate;",Get the project names and the roles of employees assigned to those projects where the employee's assignment start date is before the project's start date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT ProjectID) FROM employee_projects_2004 WHERE AssignmentEnd < CURRENT_TIMESTAMP;,Count the distinct projects assigned to employees with an assignment end date before the current timestamp.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID ORDER BY ProjectCount DESC;","Retrieve the Employee IDs and the number of projects assigned to each employee, sorted in descending order by project count."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectName FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.Role = 'Developer';,Retrieve project names from project_2003 that have assignments as 'Developer' in employee_projects_2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 WHERE StartDate < EndDate",Select the ProjectID and ProjectName from project_2003 where the StartDate is earlier than the EndDate.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 ORDER BY StartDate;","Get the Project IDs and Names from project_2003, ordered by their Start Dates."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd IS NULL;",Retrieve the Employee IDs and roles of employees whose assignments are still ongoing.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID, p.ProjectName HAVING COUNT(ep.EmployeeID) > 2;","Get project names and employee counts for projects with more than 2 assigned employees, from the project_2003 and employee_projects_2004 tables, grouped by project ID and name."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE AssignmentStart < '2023-01-01' AND AssignmentEnd > '2023-01-01';","Select the Employee IDs and Project IDs of employees with an assignment start date before January 1, 2023, and an assignment end date after January 1, 2023, from employee_projects_2004."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004 ORDER BY Role;,"Get distinct roles from employee_projects_2004, sorted alphabetically."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS AssignedEmployees FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(EmployeeID) > 3;","Retrieve the Project IDs and the count of employees assigned to each project, including only those projects with more than 3 assigned employees."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.AssignmentStart BETWEEN p.StartDate AND p.EndDate;",Get the Employee IDs and project names for assignments that started within the project's start and end dates.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MIN(ep.AssignmentStart) AS FirstAssignment FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;",Retrieve the project names and the earliest assignment start dates for each project by joining the project_2003 and employee_projects_2004 tables on ProjectID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, e.Role, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.AssignmentEnd IS NOT NULL ORDER BY e.AssignmentEnd DESC;","Get the Employee IDs, roles, and project names from employee_projects_2004 where the assignment end date is present, joined with project_2003 on ProjectID, and sort by assignment end date in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, AVG(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) / 365 AS AvgDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY p.ProjectID;",Retrieve the Project IDs and the average duration of assignments in years for employees on each project by grouping results by Project ID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, p.ProjectName FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.ProjectID IS NULL;",Select the ProjectID and ProjectName of projects from the project_2003 table without any employee assignments in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(*) AS TotalProjects FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY ep.EmployeeID HAVING COUNT(*) > 0;","Select the Employee IDs and the count of projects assigned to each employee from the employee_projects_2004 table, joining with the project_2003 table on ProjectID, grouping by EmployeeID, and including employees assigned to at least one project."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(Role) AS RoleCount FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(Role) > 1;","Count the number of roles per project from the employee_projects_2004 table, grouped by Project ID, and include only projects with more than one role."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, EndDate FROM project_2003 ORDER BY EndDate DESC;","Retrieve the names of projects and their end dates from the project_2003 table, sorted by end date in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < p.StartDate;",Get the Employee IDs and Project Names for employees whose assignment start date is earlier than the corresponding project start date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT ep.EmployeeID) FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate > '2022-01-01';,"Count distinct EmployeeIDs from employee_projects_2004 where the corresponding ProjectID in project_2003 has a StartDate after January 1, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, SUM(strftime('%Y', ep.AssignmentEnd) - strftime('%Y', ep.AssignmentStart)) AS TotalExperience FROM employee_projects_2004 ep GROUP BY ep.EmployeeID;","Retrieve the Employee IDs and the total experience in years, calculated as the difference in years between the assignment start and end dates, summed for each employee."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, (MAX(ep.AssignmentEnd) - MIN(ep.AssignmentStart)) AS TotalDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY p.ProjectID;","Get the Project IDs and the total duration of assignments for each project, calculated as the difference between the maximum assignment end date and the minimum assignment start date, from the employee_projects_2004 table joined with the project_2003 table on ProjectID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeesInProject FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING COUNT(ep.EmployeeID) > 0;","Retrieve project names and the count of employees assigned, only for projects with at least one employee, including those without assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) > 5;","Get the project names and the number of employees assigned to each project, only including projects with more than 5 assigned employees."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.EndDate < '2023-01-01' AND ep.AssignmentEnd IS NOT NULL;","Select Employee IDs, project names, and roles from employee_projects_2004, joining project_2003 for projects that ended before January 1, 2023, and with non-null assignment end dates."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 WHERE ProjectID NOT IN (SELECT ProjectID FROM employee_projects_2004);",Get the Project IDs and Project Names of projects in the project_2003 table that have no entries in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, SUM(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) AS TotalDays FROM employee_projects_2004 ep GROUP BY ep.EmployeeID ORDER BY TotalDays DESC LIMIT 10;","Retrieve Employee IDs and the total days assigned to projects for each employee, grouped by Employee ID, sorted by total days in descending order, and limited to the top 10 results."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS ProjectCount FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING COUNT(ep.ProjectID) = (SELECT MAX(ProjectCount) FROM (SELECT COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID))","Retrieve the Employee IDs of employees and the count of projects they are assigned to, grouped by Employee ID, where this count equals the maximum count of projects assigned to any employee."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MAX(ep.AssignmentEnd) AS LatestEndDate FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName ORDER BY LatestEndDate DESC;","Retrieve project names and the latest assignment end date for each project, sorted by latest end date in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart BETWEEN '2022-01-01' AND '2022-12-31';","Get the Employee IDs and Project Names of employees whose assignments started between January 1, 2022, and December 31, 2022, using a left join between the employee_projects_2004 and project_2003 tables on ProjectID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(DISTINCT ep.ProjectID) AS UniqueProjectsAssigned FROM employee_projects_2004 ep GROUP BY ep.Role;","Count the distinct projects assigned to employees and the roles associated with those assignments, grouped by role."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, COUNT(ep.ProjectID) AS ProjectsCount FROM employee_1001 e LEFT JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) = 0;","Retrieve the Employee IDs of employees who are not assigned to any projects, along with the count of projects assigned to each employee."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, AVG(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) AS AvgDuration FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING AvgDuration > 30;","Retrieve the Employee IDs and the average assignment duration in days for each employee from employee_projects_2004, where the average duration exceeds 30 days."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd IS NULL GROUP BY p.ProjectName;","Get project names and count the employees assigned to each project with no specified end date, grouping by project name."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < '2022-01-01' AND ep.AssignmentEnd > '2023-01-01';","Retrieve employee IDs and project names for assignments starting before January 1, 2022, and ending after January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(*) AS ActiveProjects FROM employee_projects_2004 WHERE AssignmentEnd IS NULL GROUP BY EmployeeID HAVING COUNT(*) > 3;","Retrieve Employee IDs and the count of active projects for each employee from the employee_projects_2004 table, where the assignment end date is not specified and include only those with more than 3 active projects."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart > '2022-01-01' GROUP BY p.ProjectID ORDER BY EmployeeCount DESC LIMIT 5;","Retrieve the project names and the count of employees assigned to projects with assignments starting after January 1, 2022, grouped by project ID, sorted by employee count in descending order, limiting results to the top 5."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) AS RoleCount FROM employee_projects_2004 ep GROUP BY ep.Role HAVING COUNT(ep.EmployeeID) > (SELECT AVG(RoleCount) FROM (SELECT COUNT(EmployeeID) AS RoleCount FROM employee_projects_2004 GROUP BY Role) AS avg_counts);","Retrieve each employee role along with the number of employees in that role, filtering to include only roles with more employees than the average count across all roles."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID ORDER BY p.ProjectName;","Retrieve the Project IDs and names from the project 2003 table, along with the count of assigned employees for each project, grouped by Project ID and sorted by Project Name."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(*) AS RecentAssignments FROM employee_projects_2004 WHERE AssignmentStart >= '2020-01-01' GROUP BY EmployeeID;","Select each EmployeeID and count the total number of assignments that started on or after January 1, 2020, from the employee_projects_2004 table, grouping by EmployeeID."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, StartDate, EndDate FROM project_2003 ORDER BY StartDate ASC LIMIT 1;","Retrieve the ProjectID, StartDate, and EndDate of the project with the earliest StartDate from the project_2003 table."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS ProjectCount FROM employee_projects_2004 ep GROUP BY ep.EmployeeID LIMIT 5;","Retrieve Employee IDs and the count of projects assigned to each employee from the employee_projects table, grouping the results by Employee ID, and limit the results to 5 entries."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005;,Select all columns from the performance_review_2005 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM employee_performance_2006;,Retrieve all records from employee_performance_2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, Rating FROM performance_review_2005 WHERE Rating >= 4;","Get the ReviewID, EmployeeID, and Rating from performance_review_2005 for ratings of 4 or higher."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore > 3.5;",Select EmployeeID and ReviewID from employee_performance_2006 where ReviewScore exceeds 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(Rating) AS AverageRating FROM performance_review_2005;,Find the average rating from the performance reviews in the performance_review_2005 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT ReviewerID FROM performance_review_2005;,Get distinct ReviewerIDs from the performance_review_2005 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY EmployeeID;",Count the performance reviews for each employee in the performance_review_2005 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID;",Select the EmployeeID and ReviewDate by joining the performance_review_2005 and employee_performance_2006 tables on ReviewID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT Rating, COUNT(*) AS Count FROM performance_review_2005 GROUP BY Rating;","Count how many times each rating appears in the performance_review_2005 table, grouped by rating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Comments FROM performance_review_2005 WHERE Comments IS NOT NULL;",Get the ReviewID and Comments from performance_review_2005 where Comments are present.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, ep.ReviewID FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating < 3;",Select EmployeeID and ReviewID from employee_performance_2006 where the Rating in performance_review_2005 is less than 3.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(ReviewScore) AS MaxReviewScore FROM employee_performance_2006 GROUP BY EmployeeID;","Get the maximum review score for each employee from the employee_performance_2006 table, grouped by EmployeeID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT r.ReviewDate, e.ReviewScore FROM performance_review_2005 r LEFT JOIN employee_performance_2006 e ON r.ReviewID = e.ReviewID;","Retrieve the review dates from the 2005 performance reviews and their corresponding scores from the 2006 employee performance, using a left join on ReviewID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY EmployeeID HAVING AVG(ReviewScore) >= 4;",Get Employee IDs and their average review scores from employee_performance_2006 where the score is at least 4.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT EmployeeID FROM employee_performance_2006 WHERE ReviewScore BETWEEN 3 AND 5;,Retrieve distinct EmployeeIDs from employee_performance_2006 where ReviewScore is between 3 and 5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, p.Rating, e.ReviewScore FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE p.Rating = e.ReviewScore;","Retrieve the ReviewID and Rating from performance_review_2005 and the ReviewScore from employee_performance_2006, joining on ReviewID where Rating equals ReviewScore."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID ORDER BY ReviewCount DESC;","Count the performance reviews by each reviewer in the performance_review_2005 table, grouped by ReviewerID and sorted by the count in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 q ON p.ReviewID = q.ReviewID WHERE q.ReviewScore IS NOT NULL;",Retrieve Employee IDs and review dates from performance_review_2005 for reviews that have a non-null ReviewScore in employee_performance_2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT Rating, COUNT(*) AS Count FROM performance_review_2005 GROUP BY Rating HAVING COUNT(*) > 1;","Count the ratings from the 2005 performance reviews, including only those ratings that appear more than once."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT EmployeeID FROM employee_performance_2006 WHERE ReviewScore < 2.5;,Retrieve EmployeeIDs from employee_performance_2006 with a ReviewScore less than 2.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewScore FROM employee_performance_2006 WHERE ReviewID IN (SELECT ReviewID FROM performance_review_2005)",Select EmployeeID and ReviewScore from employee_performance_2006 for reviews listed in performance_review_2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005;,Fetch all records from the performance review table for 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM employee_performance_2006;,Retrieve all records from employee_performance_2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID FROM performance_review_2005 WHERE Rating >= 4.0;",Get the Review IDs and Employee IDs from performance_review_2005 for ratings of 4.0 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewScore FROM employee_performance_2006 WHERE ReviewScore < 3.0;",Get Employee IDs and review scores from employee_performance_2006 where the review scores are below 3.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID;",Retrieve Employee IDs and review dates by joining performance_review_2005 with employee_performance_2006 on ReviewID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewID;",Count the reviews for each review ID in the performance_review_2005 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID;","Calculate the average rating for each employee from the 2005 performance reviews, grouped by employee ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID;","Count the reviews given by each reviewer from the performance_review_2005 table, grouped by reviewer ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewScore > 3.5;","Get the Employee IDs and review dates from performance_review_2005 where the review score is above 3.5, joining with employee_performance_2006 on ReviewID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT Rating, COUNT(*) FROM performance_review_2005 GROUP BY Rating HAVING COUNT(*) > 5;",Count the number of times each rating appears in the 2005 performance reviews and retrieve only ratings that occur more than 5 times.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore IS NOT NULL;",Select EmployeeIDs and ReviewIDs from employee_performance_2006 where ReviewScore is not null.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.*, e.ReviewScore FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewScore > 4.0;","Select all columns from performance review 2005 and the review scores from employee performance 2006 for reviews with a score greater than 4.0, joining both tables on ReviewID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT EmployeeID FROM performance_review_2005 WHERE Comments IS NOT NULL;,Select distinct EmployeeIDs from performance_review_2005 where Comments are present.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(ReviewScore) AS MaxScore FROM employee_performance_2006 GROUP BY EmployeeID;","Get the maximum review score for each employee from the performance data for 2006, grouped by employee ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID;","Retrieve the average ratings of performance reviews, grouped by Reviewer ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT EmployeeID FROM employee_performance_2006 WHERE ReviewID IN (SELECT ReviewID FROM performance_review_2005 WHERE Rating = 5.0);,Get EmployeeIDs from employee_performance_2006 where the ReviewID matches any ReviewID in performance_review_2005 with a Rating of 5.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, SUM(e.ReviewScore) AS TotalScore FROM performance_review_2005 p LEFT JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID GROUP BY p.ReviewID;","Select the Review IDs from performance_review_2005 and the total review score from employee_performance_2006 for each review, grouped by Review ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, EmployeeID FROM performance_review_2005 WHERE ReviewerID IN (SELECT EmployeeID FROM employee_performance_2006);",Select ReviewerID and EmployeeID from performance_review_2005 where ReviewerID exists as an EmployeeID in employee_performance_2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM employee_performance_2006 WHERE ReviewScore BETWEEN 3.0 AND 4.0;,Count the employee performance reviews from 2006 with scores between 3.0 and 4.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE p.ReviewID IS NOT NULL;","Select Employee IDs and review dates from performance_review_2005 and employee_performance_2006 where the Review ID is not null, joining the tables on Review ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewID, pr.EmployeeID, pr.ReviewDate, pr.ReviewerID, pr.Rating, pr.Comments, ep.ReviewScore FROM performance_review_2005 pr JOIN employee_performance_2006 ep ON pr.EmployeeID = ep.EmployeeID;","Select ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, Comments from performance_review_2005 and ReviewScore from employee_performance_2006 where the EmployeeID matches in both tables."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID;","Calculate the average rating for each employee from the performance_review_2005 table, grouped by EmployeeID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS TotalReviews FROM performance_review_2005 GROUP BY ReviewerID HAVING COUNT(*) > 5;",Count the number of reviews for each reviewer in the performance_review_2005 table where the total reviews exceed 5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewID, pr.EmployeeID, pr.Rating FROM performance_review_2005 pr WHERE pr.Rating >= 4.0;","Select the Review IDs, Employee IDs, and Ratings from performance reviews where the Ratings are 4.0 or higher."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, SUM(ep.ReviewScore) AS TotalScore FROM employee_performance_2006 ep GROUP BY ep.EmployeeID ORDER BY TotalScore DESC;","Retrieve the Employee IDs and total review scores from the employee_performance_2006 table, grouping by Employee ID and sorting the scores in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewDate ORDER BY ReviewDate DESC;","Retrieve the review dates and average ratings from the 2005 performance reviews, grouped by review date and sorted in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY EmployeeID;","Count the performance reviews for each employee in 2005, grouping by EmployeeID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, pr.Rating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.ReviewDate = (SELECT MAX(ReviewDate) FROM performance_review_2005)","Retrieve the EmployeeID, first name, last name, and rating of employees who have the most recent performance reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) < 3.0;","Retrieve the Reviewer IDs and average ratings from the performance_review_2005 table, including only those with an average rating below 3.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(DISTINCT ReviewID) AS UniqueReviews FROM employee_performance_2006 GROUP BY EmployeeID;",Count the distinct performance reviews by EmployeeID in the employee_performance_2006 table.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ReviewScore IS NULL;","Retrieve the EmployeeID, FirstName, and LastName of employees who lack a ReviewScore in the employee_performance_2006 table."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Comments FROM performance_review_2005 WHERE Rating BETWEEN 3.5 AND 4.5 ORDER BY ReviewDate;","Get the Review IDs and comments from the performance review table for ratings between 3.5 and 4.5, ordered by review date."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) IS NOT NULL;","Select the Employee ID and the average review score from the employee table, while left joining with the employee performance table on Employee ID, including only those with a non-null average review score."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(ReviewID) AS TotalReviews FROM performance_review_2005 WHERE Rating < 2.5 GROUP BY ReviewerID;","Get the ReviewerIDs and the count of reviews with a rating below 2.5 from the performance_review_2005 table, grouped by ReviewerID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT DISTINCT e.EmployeeID, e.FirstName FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID WHERE p.Rating >= 4.0;",Select the distinct Employee IDs and first names of employees who received a performance review rating of 4.0 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewDate ORDER BY ReviewCount DESC;","Get the review dates and the number of reviews for each date from the performance_review_2005 table, sorted by review count in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(pr.Rating) AS AverageRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING AVG(pr.Rating) >= 3.0;","Get the Employee IDs, first names, last names, and average performance review ratings of employees from 2005 who have an average rating of at least 3.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, SUM(Rating) AS TotalRating FROM performance_review_2005 WHERE ReviewDate >= '2005-07-01' GROUP BY ReviewerID;","Get Reviewer IDs and total ratings from performance reviews on or after July 1, 2005, grouped by Reviewer ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, MAX(ep.ReviewScore) AS HighestScore FROM employee_performance_2006 ep GROUP BY ep.EmployeeID ORDER BY HighestScore DESC;","Retrieve Employee IDs and their highest review scores from the employee performance records, grouped by Employee ID and sorted in descending order of scores."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, COUNT(*) AS EntryCount FROM employee_performance_2006 GROUP BY ReviewID HAVING COUNT(*) > 1;",Count the entries for each ReviewID in employee_performance_2006 and show those with more than one entry.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.EmployeeID, pr.ReviewDate FROM performance_review_2005 pr JOIN employee_performance_2006 ep ON pr.ReviewID = ep.ReviewID WHERE ep.ReviewScore > 4.0;",Retrieve Employee IDs and Review Dates from performance_review_2005 for employees with a ReviewScore over 4.0 in employee_performance_2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, Comments FROM performance_review_2005;","Retrieve the Review ID, Employee ID, Review Date, Reviewer ID, Rating, and Comments from the 2005 performance review data."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID;","Get employee IDs and their average ratings from 2005 performance reviews, grouped by employee ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, ReviewerID, COUNT(Comments) AS CountComments FROM performance_review_2005 GROUP BY ReviewID, ReviewerID HAVING COUNT(Comments) > 5;","Select Review IDs and Reviewer IDs from performance_review_2005, counting comments for each Review ID and Reviewer ID pair, including only those with more than 5 comments."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, Rating FROM performance_review_2005 WHERE Rating > 4.5 ORDER BY ReviewDate DESC;","Retrieve Employee IDs and ratings from the performance review table for ratings greater than 4.5, sorted by review date in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, p.ReviewScore FROM employee_performance_2006 p JOIN performance_review_2005 e ON p.ReviewID = e.ReviewID WHERE p.ReviewScore < 3.0;","Get the Employee IDs and review scores of employees from employee_performance_2006 with a review score less than 3.0, joining with performance_review_2005 on ReviewID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Comments FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31';","Fetch the Review IDs and comments from the 2005 performance reviews with review dates between January 1 and December 31, 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, COUNT(p.ReviewID) AS TotalReviews FROM employee_performance_2006 p JOIN performance_review_2005 r ON p.ReviewID = r.ReviewID GROUP BY p.EmployeeID;",Count the total reviews for each employee by EmployeeID by joining employee_performance_2006 and performance_review_2005 on ReviewID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageReviewerRating FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) < 3.0;","Retrieve Reviewer IDs and their average ratings from the performance review table for 2005, including only those with an average rating under 3.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) AS TotalReviews FROM performance_review_2005 WHERE ReviewerID IS NOT NULL;,Count the total reviews in the performance_review_2005 table with a non-null ReviewerID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewDate FROM performance_review_2005 WHERE ReviewDate = (SELECT MAX(ReviewDate) FROM performance_review_2005);",Select the EmployeeID and ReviewDate of the most recent performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY EmployeeID HAVING AVG(ReviewScore) >= 4.0;","Calculate the average review score for each employee in 2006, including only employees with an average score of 4.0 or higher."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID ORDER BY ReviewCount DESC;","Count the performance reviews for each reviewer from the performance_review_2005 table, sorted in descending order by the review count."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT EmployeeID FROM employee_performance_2006 WHERE ReviewScore > (SELECT AVG(ReviewScore) FROM employee_performance_2006);,Select Employee IDs from employee_performance_2006 where the ReviewScore exceeds the average ReviewScore.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.ReviewerID, COUNT(e.ReviewID) AS NumReviews FROM performance_review_2005 e JOIN employee_performance_2006 p ON e.ReviewID = p.ReviewID GROUP BY e.ReviewerID;","Get the ReviewerIDs and count of reviews for each reviewer from the performance_review_2005 table, joined with employee_performance_2006 on ReviewID, grouped by ReviewerID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore = (SELECT MIN(ReviewScore) FROM employee_performance_2006);",Select the EmployeeID and ReviewID of employees from employee_performance_2006 with the lowest ReviewScore.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewDate FROM performance_review_2005 WHERE Rating > (SELECT AVG(Rating) FROM performance_review_2005);",Get the Employee IDs and Review Dates from the performance_review_2005 table where Ratings exceed the average Rating.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, p.Rating FROM performance_review_2005 e JOIN employee_performance_2006 p ON e.ReviewID = p.ReviewID WHERE e.Comments IS NOT NULL;","Select Employee IDs and Ratings from the performance review table for entries with comments, joined with the employee performance table by Review IDs."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(DISTINCT ReviewID) AS ReviewCount FROM employee_performance_2006 GROUP BY EmployeeID HAVING ReviewCount > 1;","Count the distinct performance reviews for each employee in the employee_performance_2006 table, and provide the Employee IDs of those with more than one review."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AvgRating FROM performance_review_2005 GROUP BY ReviewerID ORDER BY AvgRating DESC;","Retrieve Reviewer IDs and their average ratings from the performance_review_2005 table, grouped by Reviewer ID and sorted by average ratings in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(ReviewDate) AS LastReviewDate FROM performance_review_2005 GROUP BY EmployeeID;","Get the Employee IDs and the latest review dates from the performance_review_2005 table, grouped by Employee ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, SUM(Rating) AS TotalRating FROM performance_review_2005 GROUP BY ReviewerID HAVING TotalRating > 20;","Get the Reviewer IDs and total ratings from performance reviews where the total ratings exceed 20, grouped by Reviewer ID."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, Comments FROM performance_review_2005 WHERE Rating >= 4.0;","Select ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, and Comments from performance_review_2005 where Rating is at least 4.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.EmployeeID, pr.ReviewerID, AVG(pr.Rating) AS AverageRating FROM performance_review_2005 pr GROUP BY pr.EmployeeID, pr.ReviewerID HAVING AVG(pr.Rating) > 4.0;","Select Employee IDs and Reviewer IDs from performance reviews and calculate the average rating, including only groups with an average rating greater than 4.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, EmployeeID, ReviewerID, Rating FROM performance_review_2005 WHERE Rating < 3.0 ORDER BY ReviewDate DESC;","Retrieve the review dates, employee IDs, reviewer IDs, and ratings of performance reviews from 2005 with ratings less than 3.0, sorted by review dates in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, SUM(ep.ReviewScore) AS TotalScore FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID GROUP BY ep.EmployeeID HAVING SUM(ep.ReviewScore) > 10;","Retrieve Employee IDs and total review scores from 2006 where the score exceeds 10, by joining employee performance and performance reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(pr.ReviewID) = 0;",Retrieve the first and last names of employees who have not received any performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, pr.ReviewerID, COUNT(pr.ReviewID) AS ReviewCount FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, pr.ReviewerID HAVING COUNT(pr.ReviewID) > 3;","Retrieve the Employee IDs, first names, last names, and Reviewer IDs of employees, along with the count of performance reviews by each reviewer, where the count of reviews exceeds 3."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, AVG(Rating) AS AverageRating FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY ReviewDate ORDER BY ReviewDate;","Retrieve the review dates and average ratings from performance reviews in 2005, grouped by review date and sorted chronologically."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(pr.Rating) AS HighestRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING MAX(pr.Rating) > 4.5;","Get the Employee IDs, first names, and last names of employees with their highest performance review ratings above 4.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, COUNT(ep.ReviewScore) AS TotalReviews FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ReviewScore) < 2;","Count the number of performance reviews for each employee, selecting those with fewer than 2 reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) > 3.5;","Select Employee IDs and their average review scores from employee_1001, joining with employee_performance_2006 on EmployeeID, grouped by Employee ID, where the average score is greater than 3.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(pr.ReviewID) > 5 ORDER BY COUNT(pr.ReviewID) DESC;","Retrieve the Employee IDs, first names, and last names of employees with more than 5 performance reviews, sorted by the number of reviews in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewerID, e.FirstName, e.LastName, COUNT(pr.ReviewID) AS ReviewCount FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID GROUP BY pr.ReviewerID, e.FirstName, e.LastName HAVING COUNT(pr.ReviewID) > 10;","Retrieve the IDs, first names, and last names of reviewers who have given more than 10 reviews, along with the count of their reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, COUNT(DISTINCT pr.ReviewDate) AS DistinctReviewDates FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT pr.ReviewDate) > 1;","Select the EmployeeID and count of distinct review dates for each employee from the employee_1001 table, joined with the performance_review_2005 table on EmployeeID, grouped by EmployeeID, only including employees with more than one distinct review date."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e1.FirstName, e1.LastName, e2.FirstName AS ReviewerFirstName, e2.LastName AS ReviewerLastName FROM performance_review_2005 pr JOIN employee_1001 e1 ON pr.EmployeeID = e1.EmployeeID JOIN employee_1001 e2 ON pr.ReviewerID = e2.EmployeeID WHERE pr.Rating < 3.0;",Retrieve the first and last names of employees and their reviewers from the performance reviews where the rating is below 3.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, COUNT(ReviewID) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewDate HAVING COUNT(ReviewID) > 5 ORDER BY ReviewDate;","Get the review dates and the count of reviews for each date from the performance_review_2005 table, showing only dates with more than 5 reviews, sorted by date."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.EmployeeID IS NULL;","Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who do not have records in the performance_review_2005 table."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(ep.ReviewScore) AS AverageReviewScore FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating >= 4.0;,Calculate the average review score for reviews with a rating of 4.0 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT pr.ReviewerID FROM performance_review_2005 pr WHERE pr.Rating < 2.5);","Retrieve the Employee IDs, first names, and last names of reviewers who gave a performance rating below 2.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, pr.ReviewDate FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.ReviewerID WHERE pr.ReviewDate >= '2005-06-01' ORDER BY pr.ReviewDate DESC;","Retrieve the first and last names of reviewers who evaluated performance on or after June 1, 2005, along with the review dates, sorted by review date in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) IS NULL;","Retrieve the EmployeeIDs of employees and their average review scores from the employee table, performing a left join with the employee performance table on EmployeeID, including only those with a null average review score."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewID, pr.EmployeeID, pr.ReviewDate, pr.ReviewerID, pr.Rating, pr.Comments, ep.ReviewScore FROM performance_review_2005 pr JOIN employee_performance_2006 ep ON pr.ReviewID = ep.ReviewID","Select the ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, and Comments from the performance_review_2005 table, along with the ReviewScore from the employee_performance_2006 table for all performance reviews in 2005."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001;,Select all columns from the department table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM employee_3002;,Select all employee records from the employee_3002 table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM salary_history_3003;,Retrieve all records from the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002;",Get the first and last names of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001;,Get the names of all departments.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM employee_3002 GROUP BY DepartmentID;","Retrieve the DepartmentID and count of employees in each department from the employee_3002 table, grouped by DepartmentID."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_3002 WHERE Salary > 50000;","Retrieve the first names, last names, and job titles of employees with a salary greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID;",Get the first and last names of employees along with their department names by joining the employee and department tables.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002;,Get all unique job titles from the employee table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 ORDER BY Salary DESC;","Retrieve the first names, last names, and salaries of employees, sorted by salary in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, SalaryAmount FROM employee_3002 JOIN salary_history_3003 ON employee_3002.EmployeeID = salary_history_3003.EmployeeID;",Retrieve the first and last names of employees and their salary amounts by joining the employee and salary history tables on employee IDs.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID;",Select the first and last names of employees along with their department names using a left join on DepartmentID.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY DepartmentID;",Get the average salary of employees for each Department ID.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IS NULL;",Select the first and last names of employees without a department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary < (SELECT AVG(Salary) FROM employee_3002);",Retrieve the first and last names of employees with a salary below the average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE JobTitle = 'Manager';,Count employees with the job title 'Manager' in the employee table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID;","List the names of departments and the number of employees in each, including departments with no employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01';","Get the first and last names of employees with their salary effective dates after January 1, 2023."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e FULL OUTER JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID;",Select the first and last names of employees along with their salary amounts using a full outer join on employee ID.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, MIN(Salary) AS MinSalary FROM employee_3002 GROUP BY DepartmentID;",Get the DepartmentID and minimum salary of employees for each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle, Salary FROM employee_3002 WHERE Salary > 70000 ORDER BY JobTitle ASC;","Retrieve the first and last names, job titles, and salaries of employees with salaries over 70,000, sorted by job title."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001;,Select all records from the department table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM employee_3002;,Retrieve all details of employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM salary_history_3003;,Retrieve all columns from the salary history table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 50000;","Get the first and last names of employees earning over 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1;,Get the department name for department ID 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_3002 WHERE DepartmentID = 2;","Get the first names, last names, and job titles of employees in department 2."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID;",Get the first and last names of employees and their department names by joining the employee and department tables on DepartmentID.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE DepartmentID = 3;,Count employees in department 3.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","Get department names and the number of employees in each department, using a left join on the department and employee tables, grouped by department names."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE JobTitle LIKE '%Manager%';",Get the first and last names of employees with 'Manager' in their job title.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01';","Get the first and last names of employees and their salary amounts for salary records effective after January 1, 2023."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002;,Get the unique job titles from the employee table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 ORDER BY Salary DESC;","Get the first names, last names, and salaries of all employees, sorted by salary in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY DepartmentID;","Get the Department IDs and average salaries of employees, grouped by Department ID."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary = (SELECT MAX(Salary) FROM employee_3002);",Get the first and last names of employees with the highest salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%';",Get the first and last names of employees and their department names for departments starting with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 1;",Get the first and last names of employees with more than one salary history entry.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) AS MaxSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID;","Retrieve the first and last names of employees and their maximum salary from the salary history, grouping by employee ID."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000;","Retrieve the first and last names of employees with a salary greater than 60,000 from the employee and salary history tables."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;",Get the department names and the total salary of employees in each department by summing their salaries.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","Get the department names and the total number of employees in each department, grouping by department name."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 WHERE Salary > (SELECT AVG(Salary) FROM employee_3002);","Fetch the first names, last names, and salaries of employees earning above the average salary."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName;","Get the first and last names of employees along with their department names, sorted by department name."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY DepartmentID HAVING AVG(Salary) > 50000;","Get the DepartmentID and average salary of employees for departments with an average salary over 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate >= '2023-01-01';","Retrieve the first and last names of employees and their salary amounts from the salary history for effective dates on or after January 1, 2023."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT JobTitle, COUNT(*) AS JobCount FROM employee_3002 GROUP BY JobTitle;","Count employees for each job title in the employee table, grouped by job title."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL;",Retrieve the first and last names of employees who do not belong to any department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.DepartmentID, SUM(s.SalaryAmount) AS TotalSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.DepartmentID;",Get the DepartmentID and total salary for each department by summing the SalaryAmount from the salary history of employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM department_3001 d JOIN employee_3002 e ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Get the names of departments and the highest salary of employees in each department, grouped by department."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT MIN(Salary) FROM employee_3002)",Retrieve the first and last names of employees earning less than the minimum salary among all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 ORDER BY Salary DESC LIMIT 5;",Retrieve the top 5 employees' first and last names ordered by salary in descending order.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%';",Get the first names and last names of employees along with their department names for departments that start with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT COUNT(*) AS EmployeeCount, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) < 5;","Count the employees in each department and retrieve their names, including only departments with fewer than 5 employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) AS HighestSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID;",Retrieve the first and last names of employees along with their highest recorded salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 70000);","Get the first and last names of employees with IDs in the salary history for salaries over 70,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(s.SalaryAmount) AS AverageSalary FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentName;","Retrieve the names of departments and the average salary of their employees by joining the department, employee, and salary history tables."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Marketing';",Get the first and last names of employees along with their department names for employees in the 'Marketing' department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID = (SELECT EmployeeID FROM salary_history_3003 ORDER BY EffectiveDate DESC LIMIT 1);",Get the first and last names of the employee with the most recent salary record.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT SUM(Salary) AS TotalSalaries FROM employee_3002 WHERE DepartmentID IS NOT NULL;,Calculate the total salaries of employees with non-null department IDs.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000 ORDER BY s.EffectiveDate DESC;","Get the first and last names of employees and the effective dates of their salary history where the salary is over 60,000, ordered by effective dates in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_3002 WHERE DepartmentID = 5 ORDER BY LastName ASC;","Select the first names, last names, and job titles of employees in the department with DepartmentID 5, sorted by last name in ascending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS TotalEmployees FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;",Get the department names and the count of employees in each department by joining the employee and department tables.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 ORDER BY Salary DESC;","Get the first and last names of employees with their salaries, sorted by salary in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01'","Get the first and last names of employees and their salary amounts from the employee and salary history tables where the salary effective date is after January 1, 2023."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 50000;","Get the names of departments and the average salary of employees in those departments where the average salary exceeds 50,000, by joining the employee and department tables and grouping by department name."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 2;",List the first and last names of employees with more than two salary records in the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > (SELECT AVG(Salary) FROM employee_3002);",Get the first and last names of employees with salaries above the average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e INNER JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%';",Get the first and last names of employees and their department names for departments starting with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM department_3001 d JOIN employee_3002 e ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Get the department names and the highest salaries of their employees by joining the employee and department tables and grouping by department name.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount < 40000);","Get the first and last names of employees with EmployeeIDs that have a SalaryAmount less than 40,000 in the salary history."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaries FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalaries DESC;","Get the department names and the total salaries of employees in each department, sorted by total salaries in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate >= '2023-01-01' AND s.EffectiveDate < '2023-02-01';",Retrieve the first and last names of employees and the effective dates from salary history for those with salary changes in January 2023.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002 WHERE JobTitle IS NOT NULL;,Retrieve distinct non-null job titles from employee records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 70000;","Retrieve the first and last names of employees with a salary history greater than 70,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(DISTINCT e.EmployeeID) > 5;","Select the names of departments and count distinct employees in each department, including only those departments with more than 5 employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, SUM(s.SalaryAmount) AS TotalSalaryHistory FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID;",Get the first and last names of employees and the total of their salary histories.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, e.Salary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName, e.Salary DESC;","Get the first and last names of employees, their department names, and salaries, sorted by department name and salary in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary > (SELECT AVG(e2.Salary) FROM employee_3002 e2 WHERE e2.DepartmentID = e.DepartmentID);",Select the first and last names of employees with salaries above their department's average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IS NULL;",Get the first and last names of employees without a department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID NOT IN (SELECT sh.EmployeeID FROM salary_history_3003 sh);",Get the first and last names of employees with no salary history records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle, Salary FROM employee_3002 WHERE DepartmentID IN (SELECT DepartmentID FROM department_3001) ORDER BY LastName ASC;","Retrieve the first names, last names, job titles, and salaries of employees from the employee_3002 table who work in departments listed in the department_3001 table, and sort the results by last name in ascending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, e.Salary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002);","Get the first and last names of employees, their department names, and salaries, where their salaries exceed the average salary of all employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 0 AND COUNT(e.EmployeeID) > 5;","Retrieve the names of departments and the count of employees in each department, including those with no employees, but only for departments that have more than 5 employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > e.Salary ORDER BY s.EffectiveDate DESC;","Retrieve the first and last names of employees and their salary amounts from the salary history where the salary amount is greater than their current salary, sorted by the effective date in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, Salary FROM employee_3002 WHERE Salary > (SELECT MAX(SalaryAmount) FROM salary_history_3003);",Get the first and last names and salaries of employees with salaries exceeding the maximum salary in the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, s.EffectiveDate FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate BETWEEN '2023-01-01' AND '2023-12-31';","Retrieve the first and last names of employees, their department names, and the effective dates of salary changes for the year 2023."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalary DESC;","Get department names and the total salary of employees in each department, ordered by total salary in descending order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 100000);","Retrieve the first and last names of employees with a salary history amount greater than 100,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING AVG(e.Salary) < 50000;","Get department names and the average salary of employees in each department, where the average salary is less than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID)",Retrieve the first and last names of employees along with their latest salary amounts based on the most recent effective date.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = e.DepartmentID);",Get the first and last names of employees and their department names where employees earn more than the average salary in their department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 3;",Retrieve the first and last names of employees with more than three salary changes.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, MIN(e.Salary) AS MinSalary, MAX(e.Salary) AS MaxSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;",Get department names along with the minimum and maximum employee salaries in each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, s.SalaryAmount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 80000 ORDER BY s.EffectiveDate;","Retrieve the first and last names of employees, their department names, and salary amounts from the employee and department tables, where salary amounts exceed 80,000, sorted by effective date."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM salary_history_3003);",Retrieve the first and last names of employees without entries in salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount >= (SELECT AVG(SalaryAmount) FROM salary_history_3003);","Get the first names and last names of employees and the effective date of their salaries from the employee and salary history tables, where the salary amount is at least the average salary."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, SUM(s.SalaryAmount) AS TotalSalaryHistory FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName HAVING SUM(s.SalaryAmount) > 50000;","Retrieve the first names, last names, and department names of employees whose total salary history exceeds 50,000, along with the total amount of their salary history."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, MIN(s.SalaryAmount) AS MinSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID;",Retrieve the first and last names of employees and their minimum salary amounts from the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID WHERE e.JobTitle = 'Manager' GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 2;","Get department names and the number of employees with the job title 'Manager', for departments with more than 2 such employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, COUNT(s.SalaryID) AS SalaryRecords FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName HAVING COUNT(s.SalaryID) > 1;","Select first names and last names of employees with their department names, counting the salary history records for each employee, and include only those with more than one salary record."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle, Salary FROM employee_3002 WHERE Salary > 75000 ORDER BY Salary ASC;","Select the first and last names, job titles, and salaries of employees with salaries greater than 75000, ordered by salary in ascending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001;,Get all records from the department_4001 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002;,Retrieve all columns for every employee.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1;,Get the department name for DepartmentID 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager';",Get the first and last names of employees with the job title 'Manager'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_4003;,Select all records from the employee projects table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID IN (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'HR');",Get the first and last names of employees in the HR department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID IS NULL;",Select the first and last names of employees without a department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT DepartmentID FROM employee_4002;,Get distinct DepartmentIDs from the employee table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2;,Count the total number of employees in department 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID;",Select the first and last names of employees along with their department names using a left join between the employee and department tables.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_projects_4003 WHERE ProjectID = 1);",Get the first and last names of employees involved in project ID 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(*) AS EmployeeCount FROM employee_projects_4003 GROUP BY ProjectID;","Count the number of employees assigned to each project, grouping the results by ProjectID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate > '2023-01-01';","Get the first names, last names, and roles of employees linked to projects that started after January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","Retrieve department names and the number of employees in each department, including those without employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName ASC;","Get the first and last names of all employees, sorted by last name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE FirstName LIKE 'A%';",Get the first and last names of employees whose first names begin with 'A'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Leader';",Get the first and last names of employees with the role 'Leader' in projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE FirstName IS NOT NULL;",Retrieve the first and last names of employees with non-null first names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT DepartmentID, COUNT(EmployeeID) AS EmployeeCount FROM employee_4002 GROUP BY DepartmentID;",Retrieve the department IDs and the number of employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL;",Get the first and last names of employees and the start dates of their projects where the project end dates are not specified.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE DepartmentID = ?","Get the first names, last names, and job titles of employees in a specific department."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001;,Select all columns from the department_4001 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002;,Get all details of employees from the employee_4002 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1;,Get the department name where the DepartmentID is 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager';",Get the first and last names of employees with the job title 'Manager'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID;",Retrieve the first and last names of employees along with their department names by joining the employee and department tables.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2;,Count the number of employees in department 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT JobTitle FROM employee_4002;,Get distinct job titles from the employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","Get the department names and the number of employees in each department, including those without employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName ASC;","Get the first and last names of all employees, sorted by last name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID IS NULL;",Retrieve the first and last names of employees without a department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE JobTitle LIKE '%Engineer%';","Get the first names, last names, and job titles of employees with 'Engineer' in their job titles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName IS NOT NULL;","Get the first and last names of employees along with their department names, including only those departments that have a name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE LENGTH(LastName) > 5;",Retrieve the first and last names of employees with last names longer than five characters.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Lead';",Get the first and last names of employees with the role of 'Lead' in any project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC;","Get department names and the number of employees in each department, sorted by employee count in descending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002 WHERE EmployeeID BETWEEN 5 AND 10;,Select all columns for employees with EmployeeID from 5 to 10 in the employee_4002 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT FirstName || ' ' || LastName AS FullName FROM employee_4002;,Get the full names of all employees by combining their first and last names from the employee_4002 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Sales';",Retrieve the first names of employees and their department names where the department is 'Sales'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT DepartmentID) FROM employee_4002;,Count distinct DepartmentIDs in the employee table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE JobTitle IN ('Analyst', 'Developer');","Get the first names, last names, and job titles of employees who are either Analysts or Developers."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE DepartmentID = ?","Select the first names, last names, and job titles of employees from the employee table for a specific DepartmentID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001;,List all department names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002;",Get the first and last names of all employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE DepartmentID = 1;","Get the first names, last names, and job titles of employees in department 1."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID;",Get the first and last names of employees along with their department names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM employee_4002 GROUP BY DepartmentID;",Get the DepartmentID and the number of employees for each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID;","Select the first and last names of employees and the count of their associated projects, including only those with at least one project."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, e.JobTitle FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName;","Retrieve the department names and job titles of employees, sorted by department name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.Role) AS AverageRole FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID;","Retrieve the first names and last names of employees along with the count of their roles from the employee_projects table, grouped by employee ID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, SUM(ep.EndDate - ep.StartDate) AS TotalDuration FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID;","Get the first and last names of employees and the total duration of their projects, calculated as the sum of the differences between project end dates and start dates, grouped by employee ID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT JobTitle, COUNT(*) FROM employee_4002 GROUP BY JobTitle HAVING COUNT(*) > 5;","Retrieve job titles and the count of employees for each job title, where there are more than 5 employees in that job title."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE '%Sales%';",Get the first and last names of employees in departments that include 'Sales' in their name.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.DepartmentID, MIN(ep.StartDate) AS EarliestProjectStart FROM employee_projects_4003 ep JOIN employee_4002 e ON ep.EmployeeID = e.EmployeeID GROUP BY e.DepartmentID;","Retrieve the Department IDs and the earliest start date of projects for employees, grouped by Department ID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL;","Get the first names, last names, and job titles of employees currently assigned to projects with no end date."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, p.ProjectID FROM employee_4002 e JOIN employee_projects_4003 p ON e.EmployeeID = p.EmployeeID WHERE p.EndDate < '2023-01-01';","Get the first and last names of employees and their project IDs for projects ending before January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS ManagerCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE e.JobTitle = 'Manager' GROUP BY d.DepartmentName;",Retrieve department names and the count of employees with the job title 'Manager' in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, COUNT(ep.ProjectID) AS TotalProjects FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalProjects DESC;","Retrieve employee IDs and the count of projects for each employee, sorted by the number of projects in descending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(ep.EndDate) AS MostRecentProjectEnd FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName;","Get department names and the most recent project end dates for employees in each department, using left joins between the department, employee, and employee projects tables, grouped by department name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003);",Get the first and last names of employees without project assignments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName, FirstName;","Get the first and last names of all employees, sorted by last name and first name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_projects_4003 WHERE StartDate >= '2023-01-01';,"Count employee projects that started on or after January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'HR');",Get the first and last names of employees in the HR department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Sales' ORDER BY e.JobTitle ASC;","Retrieve the first and last names, job titles, and department names of employees in the 'Sales' department, sorted by job title in ascending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Get the department names along with the number of employees in each department by joining the employee and department tables, grouping by department name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName;","Get the first and last names of employees and their department names, ordered by department names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT JobTitle, COUNT(*) AS NumOfEmployees FROM employee_4002 GROUP BY JobTitle HAVING COUNT(*) > 5;","Count the employees for each job title in the employee table, including only job titles with more than 5 employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2023-01-01';","Retrieve the first names, last names, and roles of employees who worked on projects that started before January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4011 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  ""Salary"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_4011 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Retrieve the department names and the average salary of employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003);",Retrieve the first and last names of employees not involved in any projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.JobTitle;",Get the job titles of employees and the count of projects assigned to each job title.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaries FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING SUM(e.Salary) > 100000;","Get the department names and the total salaries of employees in each department, only for departments where total salaries exceed 100,000."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE '%Sales%';",Retrieve the first and last names of employees along with their department names where the department names contain 'Sales'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.ProjectID FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate > CURRENT_TIMESTAMP;","Retrieve the first names, last names, and project IDs of employees currently working on ongoing projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 2;","Get the names of departments and the number of employees in each department, where the count is greater than 2."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate >= '2022-01-01' ORDER BY ep.StartDate;","Get the first names, last names, and project start dates of employees whose projects started on or after January 1, 2022, sorted by project start dates."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'IT';",Get the first and last names of employees who work in the IT department along with their department names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS AssignedProjects FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 3;","Retrieve the first and last names of employees who are assigned to more than 3 projects, including those with no assigned projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT JobTitle) AS UniqueJobTitles FROM employee_4002;,Count distinct job titles from the employee table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(ProjectID) AS ProjectCount FROM employee_projects_4003 GROUP BY EmployeeID ORDER BY ProjectCount DESC;","Get Employee IDs and the number of associated projects for each employee, sorted by project count in descending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4012 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  ""Salary"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM employee_4012 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;",Get the department names and the highest salaries of employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE (e.FirstName, e.LastName) IN (SELECT e2.FirstName, e2.LastName FROM employee_4002 e2 WHERE e2.JobTitle = 'Manager');",Retrieve the first and last names of employees with the same name as those who have the job title 'Manager'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON e.DepartmentID = d.DepartmentID WHERE e.JobTitle = 'Developer' GROUP BY d.DepartmentName;","Get department names and the count of employees with the job title 'Developer', grouped by department."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.StartDate, ep.EndDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2022-06-01' AND ep.EndDate > '2022-12-31';","Get the first and last names of employees along with their project start and end dates, where the project starts before June 1, 2022, and ends after December 31, 2022."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE DepartmentID = ?","Retrieve the first names, last names, and job titles of employees in a specified department by DepartmentID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID;",Get the first and last names of employees along with their department names by joining the employee and department tables on DepartmentID.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_4002 GROUP BY JobTitle;",Get the count of employees for each job title.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(e.EmployeeID) AS AverageEmployeeID FROM department_4001 d LEFT JOIN employee_4002 e ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName;","Calculate the average EmployeeID for each department, retrieving department names from department_4001 and joining with employee_4002 on DepartmentID."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Manager';",Retrieve the first and last names of employees who are Managers in their projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, ep.ProjectID FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate > '2023-01-01';","Get the first names of employees and their project IDs for projects starting after January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(ep.EmployeeID) AS TotalEmployees FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName","Get the names of departments and the total number of employees associated with projects in each department, including those with no employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL;","Retrieve the first names, last names, and roles of employees currently assigned to projects with no end date."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) >= 2;","Retrieve the first and last names of employees involved in 2 or more projects, including those with no projects, along with the project count for each employee."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'Engineering')",Get the first and last names of employees in the Engineering department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e1.FirstName, e1.LastName, e2.FirstName AS ManagerFirstName, e2.LastName AS ManagerLastName FROM employee_4002 e1 JOIN employee_4002 e2 ON e1.ManagerID = e2.EmployeeID WHERE e1.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.Role = 'Team Member');","Select the first and last names of employees who are team members, along with the first and last names of their managers."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, SUM(ep.EndDate - ep.StartDate) AS TotalDuration FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName;",Retrieve department names and the total duration of employee projects in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003);",Get the first and last names of employees without any project assignments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.ProjectName = 'New System';",Get the first and last names of employees assigned to the 'New System' project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC;","Get the department names and the total number of employees in each department, including departments with zero employees, sorted by employee count in descending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.Role) AS RoleCount FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.Role) >= 3;","Get the first and last names of employees who have at least 3 roles in projects, along with the count of those roles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID IS NULL;",Get the first and last names of employees without a department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'S%';",Get the last names of employees and department names that start with 'S'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2022-01-01' AND ep.EndDate > '2023-01-01';","Get the first and last names of employees who worked on projects that started before January 1, 2022, and ended after January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT Role, COUNT(ProjectID) AS ProjectCount FROM employee_projects_4003 GROUP BY Role;",Get the count of projects for each employee role.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT ProjectID) AS UniqueProjects FROM employee_projects_4003;,Count the unique projects in the employee_projects_4003 table.
