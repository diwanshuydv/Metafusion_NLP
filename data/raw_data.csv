schema,sql_query,natural_language_query
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001; ,"""Retrieve all columns for all employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001; ","""Retrieve the first names and last names of all employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) FROM employee_1001 GROUP BY JobTitle; ","""Count the number of employees for each job title from the employee_1001 table, grouping the results by job title."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) FROM employee_1001 GROUP BY Department; ","""Retrieve the average salary of employees grouped by department from the employee table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > 50000; ","""Retrieve the first and last names of employees along with their salaries from the employee_1001 table, where the salary is greater than 50,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE Department = 'Sales'; ","""Select all information for employees who work in the Sales department from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT Department FROM employee_1001; ","""Retrieve the distinct departments from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC; ","""Retrieve the first and last names of all employees from the employee_1001 table, sorted by their hire dates in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Department FROM employee_1001 WHERE Department LIKE '%Engineering%'; ","""Retrieve the first names, last names, and departments of employees who work in departments that include the word 'Engineering'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MAX(Salary) FROM employee_1001; ","""Retrieve the highest salary from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MIN(Salary) FROM employee_1001 WHERE JobTitle = 'Manager'; ","""Retrieve the minimum salary from the employee_1001 table for employees whose job title is 'Manager'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01'; ","""Count the total number of employees who were hired before January 1, 2020."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 40000 AND 60000; ","""Retrieve the first and last names of employees whose salaries are between 40,000 and 60,000 from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC LIMIT 5; ","""Retrieve the first names, last names, and salaries of employees from the employee_1001 table, sorted by their salaries in descending order, and limit the results to the top 5 highest salaries."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) as EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 2; ","""Retrieve the departments and the count of employees in each department from the employee_1001 table, grouping the results by department, and including only those departments that have more than 2 employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Department IS NOT NULL; ","""Retrieve the first names, last names, and salaries of employees from the employee_1001 table where the department is not null."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE FirstName IS NOT NULL; ","""Retrieve the first names and last names of employees from the employee_1001 table, ensuring that the first names are not null."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, JobTitle FROM employee_1001 WHERE JobTitle IN ('Developer', 'Analyst'); ","""Select the first names, last names, and job titles of employees from the employee_1001 table where their job titles are either 'Developer' or 'Analyst'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT EmployeeID, FirstName, LastName FROM employee_1001 WHERE LastName LIKE 'S%'; ","""Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table whose LastName starts with the letter 'S'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(DISTINCT Department) FROM employee_1001; ","""Count the distinct number of departments from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Select the EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate of all employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001; ,"""Retrieve all columns for every employee from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Department = 'Sales'; ","""Retrieve the first names and last names of employees who work in the Sales department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) FROM employee_1001 GROUP BY JobTitle; ","""Count the number of employees in each job title from the employee_1001 table, grouping the results by job title."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 50000; ","""Retrieve the first and last names of employees from the employee_1001 table who have a salary greater than 50,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01'; ","""Count the total number of employees who were hired before January 1, 2020, from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) FROM employee_1001 GROUP BY Department; ","""Calculate the average salary for each department from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC; ","""Retrieve the first names, last names, and salaries of employees, sorted by their salaries in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE JobTitle LIKE '%Manager%'; ","""Select all columns from the employee_1001 table where the job title contains the word 'Manager'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT Department FROM employee_1001; ","""Retrieve the distinct departments from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2021-12-31'; ","""Retrieve the first and last names of employees who were hired between January 1, 2019, and December 31, 2021, from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, MAX(Salary) FROM employee_1001 GROUP BY Department; ","""Retrieve the maximum salary for each department from the employee_1001 table, grouped by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE Department = 'HR'; ","""Count the total number of employees in the HR department from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE EmployeeID IN (1, 2, 3); ","""Retrieve the first names and last names of employees whose EmployeeID is either 1, 2, or 3 from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT EmployeeID, FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 30000 AND 70000; ","""Retrieve the EmployeeID, FirstName, and LastName of employees whose salary is between 30,000 and 70,000 from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MIN(Salary) FROM employee_1001; ","""Retrieve the minimum salary from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE JobTitle IS NOT NULL; ","""Count the total number of employees in the employee_1001 table who have a job title that is not null."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001); ","""Retrieve the first and last names of employees whose salaries are greater than the average salary of all employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 5; ","""Retrieve the departments and the number of employees in each department from the employee_1001 table, grouping the results by department and including only those departments that have more than 5 employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate ASC; ","""Retrieve the first and last names of employees from the employee_1001 table, sorted by their hire date in ascending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary = (SELECT MAX(Salary) FROM employee_1001); ","""Retrieve the first names, last names, and salaries of employees who have the highest salary from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Select the EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate of employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department; ","""Count the number of employees in each department from the employee_1001 table and group the results by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department; ","""Retrieve the average salary for each department from the employee_1001 table, grouped by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, MAX(Salary) AS HighestSalary FROM employee_1001 GROUP BY JobTitle; ","""Retrieve the job titles and the maximum salary for each job title from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 70000 ORDER BY LastName; ","""Retrieve the first and last names of employees whose salary is greater than 70,000, sorted by their last names."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE HireDate BETWEEN '2020-01-01' AND '2021-12-31'; ","""Retrieve the first names, last names, and hire dates of employees who were hired between January 1, 2020, and December 31, 2021, from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department HAVING SUM(Salary) > 500000; ","""Retrieve the total salary for each department from the employee_1001 table, where the total salary exceeds 500,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT JobTitle FROM employee_1001 WHERE Department = 'Sales'; ","""Select the distinct job titles of employees from the employee_1001 table who work in the Sales department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) AS TotalEmployees, JobTitle FROM employee_1001 GROUP BY JobTitle ORDER BY TotalEmployees DESC; ","""Count the total number of employees for each job title in the employee_1001 table, and order the results by the total number of employees in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE FirstName LIKE 'A%'; ","""Retrieve the first and last names of employees from the employee_1001 table whose first names start with the letter 'A'."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) >= 3; ","""Retrieve the departments from the employee_1001 table and count the number of employees in each department, including only those departments that have three or more employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary < (SELECT AVG(Salary) FROM employee_1001); ","""Retrieve the first names, last names, and salaries of employees who earn less than the average salary of all employees in the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY JobTitle ORDER BY NumberOfEmployees DESC; ","""Retrieve the job titles and the count of employees for each job title from the employee_1001 table, grouped by job title and sorted by the number of employees in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MAX(HireDate) AS LastHiredDate FROM employee_1001; ","""Retrieve the latest hire date from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, MIN(Salary) AS LowestSalary FROM employee_1001 GROUP BY Department; ","""Retrieve the minimum salary for each department from the employee_1001 table, grouped by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC; ","""Retrieve the first names and last names of all employees from the employee_1001 table, sorted by their hire dates in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING EmployeeCount > 2; ","""Count the number of employees for each job title from the employee_1001 table, grouping the results by job title, and only include those job titles that have more than 2 employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, FIRST_VALUE(Salary) OVER(PARTITION BY Department ORDER BY Salary DESC) AS HighestSalary FROM employee_1001; ","""Retrieve the department names and the highest salaries within each department from the employee_1001 table, with the highest salary calculated as the first value in descending order of salaries for each department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS TotalEmployees FROM employee_1001 WHERE Salary >= 60000 GROUP BY Department; ","""Retrieve the total number of employees in each department where the salary is 60,000 or more, grouped by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 WHERE JobTitle = 'Manager' AND Salary > 80000; ","""Retrieve the first names, last names, and salaries of employees who hold the job title of 'Manager' and earn more than 80,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT AVG(Salary) FROM employee_1001 WHERE Department = 'IT'; ","""Calculate the average salary of employees in the IT department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Select the EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department; ","""Count the number of employees in each department from the employee_1001 table and group the results by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department HAVING AverageSalary > 70000; ","""Retrieve the departments and the average salary of employees for each department from the employee_1001 table, where the average salary is greater than 70,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC; ","""Retrieve the first names, last names, and salaries of employees from the employee_1001 table, sorted by their salaries in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) FROM employee_1001 GROUP BY JobTitle ORDER BY COUNT(*) DESC; ","""Retrieve the job titles from the employee_1001 table and count the number of employees holding each job title, grouping the results by job title and sorting them in descending order based on the count."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate >= '2021-01-01'; ","""Retrieve the first and last names of employees who were hired on or after January 1, 2021, from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT JobTitle FROM employee_1001; ","""Retrieve the distinct job titles of employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department; ","""Retrieve the total salary of employees grouped by department from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001); ","""Retrieve the first and last names of employees whose salaries are greater than the average salary of all employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS CountEmployees FROM employee_1001 WHERE Salary > 50000 GROUP BY Department; ","""Count the number of employees in each department who have a salary greater than 50,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, JobTitle FROM employee_1001 WHERE Department = 'IT' ORDER BY HireDate ASC; ","""Retrieve the first names, last names, and job titles of employees who work in the IT department, sorted by their hire dates in ascending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MIN(Salary) AS LowestSalary, MAX(Salary) AS HighestSalary FROM employee_1001; ","""Retrieve the minimum and maximum salaries from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS Count FROM employee_1001 GROUP BY JobTitle HAVING Count > 5; ","""Count the number of employees in each job title from the employee_1001 table, including only those job titles that have more than 5 employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE LastName LIKE 'S%'; ","""Retrieve the first and last names of employees whose last names start with the letter 'S' from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) AS AvgSalary FROM employee_1001 GROUP BY Department ORDER BY AvgSalary DESC; ","""Retrieve the average salary for each department from the employee_1001 table, grouped by department and sorted by the average salary in descending order."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2020-12-31'; ","""Retrieve the first and last names of employees who were hired between January 1, 2019, and December 31, 2020."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE Department = 'Sales' AND Salary < 50000; ","""Count the number of employees in the Sales department with a salary less than 50,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE Salary IN (SELECT Salary FROM employee_1001 WHERE Department = 'HR'); ","""Retrieve the first names and last names of employees whose salaries are equal to the salaries of employees in the HR department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(DISTINCT Department) FROM employee_1001; ","""Count the number of distinct departments in the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate DESC LIMIT 10; ","""Retrieve the first and last names of the most recently hired employees, sorted by their hire dates in descending order, and limit the results to the top 10."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 WHERE HireDate < '2015-01-01' GROUP BY Department; ","""Count the number of employees hired before January 1, 2015, for each department, and list the department names along with the employee counts."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Retrieve the first names, last names, job titles, departments, and salaries of employees from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department = 'Sales'; ","""Retrieve the first and last names of employees who work in the Sales department from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) AS TotalEmployees FROM employee_1001; ","""Count the total number of employees in the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department; ","""Calculate the average salary for each department in the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC LIMIT 5; ","""Retrieve the first names, last names, and salaries of employees from the employee_1001 table, sorted by their salaries in descending order, and limit the results to the top 5 highest salaries."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(*) FROM employee_1001 WHERE HireDate < '2020-01-01'; ","""Count the number of employees whose hire date is before January 1, 2020, from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY Department HAVING NumberOfEmployees > 5; ","""Retrieve the departments and the count of employees in each department from the employee_1001 table, grouped by department, where the number of employees in each department exceeds 5."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT DISTINCT Department FROM employee_1001; ","""Retrieve the distinct departments from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT * FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001); ","""Select all details of employees from the employee_1001 table whose salaries are greater than the average salary of all employees in the same table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%'; ","""Retrieve the first and last names of employees whose job titles include the word 'Manager' from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2015-01-01' AND '2020-12-31'; ","""Retrieve the first names and last names of employees who were hired between January 1, 2015, and December 31, 2020."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, SUM(Salary) AS TotalSalaries FROM employee_1001 GROUP BY Department; ","""Calculate the total salaries for each department from the employee_1001 table, grouped by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_1001 WHERE Salary > 80000); ","""Retrieve the first and last names of employees whose EmployeeID is associated with employees earning more than 80,000."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY JobTitle ORDER BY NumberOfEmployees DESC; ","""Retrieve the job titles and the number of employees in each job title from the employee_1001 table, grouping the results by job title and sorting them in descending order based on the number of employees."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT e1.FirstName, e1.LastName FROM employee_1001 e1 WHERE e1.Salary > (SELECT AVG(e2.Salary) FROM employee_1001 e2 WHERE e2.Department = e1.Department); ","""Retrieve the first and last names of employees whose salaries are greater than the average salary of employees in their respective departments."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT COUNT(DISTINCT Department) FROM employee_1001; ","""Count the number of distinct departments listed in the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT MAX(Salary) AS HighestSalary, Department FROM employee_1001 GROUP BY Department; ","""Identify the highest salary for each department from the employee records."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT FirstName, LastName FROM employee_1001 WHERE HireDate = (SELECT MAX(HireDate) FROM employee_1001); ","""Retrieve the first and last names of employees who were hired most recently from the employee_1001 table."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Salary, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Salary HAVING EmployeeCount >= 2; ","""Retrieve the salaries of employees and the count of employees earning each salary from the employee_1001 table, grouping the results by salary, and include only those salaries where the count of employees is greater than or equal to 2."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT Department, MIN(Salary) AS LowestSalary FROM employee_1001 GROUP BY Department; ","""Retrieve the minimum salary for each department from the employee_1001 table, grouping the results by department."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
"," 
SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING EmployeeCount > 3; ","""Retrieve the job titles and the count of employees for each job title from the employee_1001 table, grouping the results by job title, where the count of employees for each job title is greater than 3."""
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",,"""Retrieve the EmployeeID, FirstName, LastName, JobTitle, Department, Salary, and HireDate of all employees from the employee_1001 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002; ,"""Retrieve all columns from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE Status = 'Present'; ","""Retrieve the Attendance IDs and Employee IDs from the attendance_1002 table where the status is 'Present'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 1; ","""Retrieve the check-in and check-out times from the attendance_1002 table for the employee with EmployeeID equal to 1."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) FROM attendance_1002 GROUP BY EmployeeID; ","""Count the number of attendance records for each employee, grouping the results by employee ID from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM attendance_1002; ","""Retrieve the distinct EmployeeIDs from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID FROM attendance_1002 WHERE CheckInTime > '2023-01-01 08:00:00'; ","""Retrieve the AttendanceIDs from the attendance_1002 table where the CheckInTime is greater than January 1, 2023, at 08:00:00."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE Status = 'Absent' AND CheckOutTime IS NULL; ","""Select all records from the attendance_1002 table where the status is 'Absent' and the check-out time is not recorded."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_1001); ","""Select all records from the attendance table for employees whose EmployeeID exists in the employee table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC; ","""Retrieve the Employee IDs and their corresponding check-in times from the attendance_1002 table, sorted by check-in time in descending order."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Leave'; ","""Count the total number of attendance records from the attendance_1002 table where the status is 'Leave'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MAX(CheckInTime) FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the maximum check-in time for each employee, grouped by employee ID, from the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE EmployeeID = (SELECT EmployeeID FROM employee_1001 WHERE EmployeeName = 'John Doe'); ","""Select all attendance records from the attendance table for the employee whose name is John Doe."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, Status FROM attendance_1002 WHERE CheckOutTime < '2023-05-01'; ","""Retrieve the AttendanceID and Status of attendance records from the attendance_1002 table where the CheckOutTime is before May 1, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31'; ","""Retrieve the Employee IDs of those who checked in between January 1, 2023, and December 31, 2023, from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM attendance_1002 WHERE Date(CheckInTime) = '2023-06-15'; ","""Count the total number of attendance records from the attendance_1002 table where the date of the CheckInTime is June 15, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE Status IS NOT NULL; ","""Retrieve the Attendance ID and Employee ID from the attendance_1002 table where the Status is not null."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE AttendanceID > 10; ","""Retrieve the check-in and check-out times from the attendance records where the AttendanceID is greater than 10."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgWorkHours FROM attendance_1002 GROUP BY EmployeeID; ","""Select the EmployeeID and the average duration of work hours for each employee by calculating the difference between CheckOutTime and CheckInTime from the attendance_1002 table, grouping the results by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE EmployeeID = 5 AND Status = 'Present'; ","""Select all records from the attendance_1002 table where the EmployeeID is 5 and the Status is 'Present'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) as TotalDays FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) >= 15;","""Retrieve the Employee IDs and the total number of attendance records for each employee from the attendance_1002 table, grouping the results by Employee ID, and only include those employees who have 15 or more attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002; ,"""Select all columns from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime FROM attendance_1002; ","""Retrieve the Employee IDs and Check-In times from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AttendanceID, Status FROM attendance_1002 WHERE Status = 'Present'; ","""Retrieve the Attendance IDs and statuses of records from the attendance_1002 table where the status is 'Present'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 1; ","""Retrieve the check-in and check-out times for the employee with an EmployeeID of 1 from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalDaysWorked FROM attendance_1002 GROUP BY EmployeeID; ","""Count the total number of days worked by each employee and retrieve their EmployeeIDs from the attendance_1002 table, grouping the results by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(CheckInTime) AS FirstCheckIn, MAX(CheckOutTime) AS LastCheckOut FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the employee IDs along with their earliest check-in times and the latest check-out times from the attendance records, grouping the results by employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 ORDER BY CheckInTime DESC; ","""Retrieve all attendance records from the attendance_1002 table, sorted by the CheckInTime in descending order."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Status FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime < '2023-02-01'; ","""Retrieve the Employee IDs and their statuses from the attendance records for check-in times that occurred between January 1, 2023, and January 31, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS LateCheckIns FROM attendance_1002 WHERE CheckInTime > '09:00:00' GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the count of late check-ins for each employee who checked in after 9:00 AM, grouping the results by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Status FROM attendance_1002; ","""Retrieve the distinct status values from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))/3600) AS AverageWorkHours FROM attendance_1002 GROUP BY EmployeeID; ","""Calculate the average number of work hours for each employee by taking the average of the difference between CheckOutTime and CheckInTime, grouped by EmployeeID, from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE CheckOutTime IS NULL; ","""Select all records from the attendance_1002 table where the CheckOutTime is not specified."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM attendance_1002 WHERE CheckInTime < '2023-01-15' AND Status = 'Absent'; ","""Retrieve the Employee IDs from the attendance records for employees who checked in before January 15, 2023, and have a status of 'Absent'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS AbsentDays FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the count of days they were absent from the attendance records, where the status is marked as 'Absent', grouping the results by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-01-31'; ","""Retrieve all records from the attendance_1002 table for the CheckInTime between January 1, 2023, and January 31, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE Status = 'Late' ORDER BY CheckInTime; ","""Retrieve the EmployeeID, CheckInTime, and CheckOutTime of employees who arrived late, sorted by their CheckInTime."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS PresentDays FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID HAVING COUNT(*) > 10; ","""Retrieve the Employee IDs and the count of days they were marked as 'Present' from the attendance records, grouping the results by Employee ID, and only include those with more than 10 present days."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Sick'; ","""Count the total number of attendance records where the status is 'Sick' from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM attendance_1002 WHERE CheckOutTime < CheckInTime; ","""Retrieve the Employee IDs from the attendance_1002 table where the CheckOutTime is earlier than the CheckInTime."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
", ,"""Select the AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the total count of attendance records for each employee from the attendance_1002 table, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID; ","""Calculate the average duration between check-in and check-out times for each employee by their EmployeeID from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS StatusCount FROM attendance_1002 GROUP BY Status; ","""Count the number of occurrences of each attendance status from the attendance_1002 table, grouping the results by status."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MAX(CheckInTime) AS LastCheckIn FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the latest check-in times for each employee from the attendance_1002 table, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(CheckOutTime) AS FirstCheckOut FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the earliest check-out times for each employee from the attendance table, grouped by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS PresentDays FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the count of days they were marked as present from the attendance records, grouped by EmployeeID, where the status is 'Present'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS AbsentDays FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the count of absent days for each employee from the attendance records where the status is 'Absent', grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS TotalAttendance FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' GROUP BY Status; ","""Retrieve the attendance status and the total number of attendance records for each status from the attendance table for check-in times on or after January 1, 2023, grouped by status."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS LateCheckIns FROM attendance_1002 WHERE CheckInTime > '09:00:00' GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the count of their late check-ins, where a late check-in is defined as a check-in time after 09:00:00, grouped by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, EXTRACT(DOW FROM CheckInTime) AS Weekday, COUNT(*) AS WeekdayCount FROM attendance_1002 GROUP BY EmployeeID, Weekday; ","""Retrieve the Employee IDs, the corresponding weekdays of their check-in times, and the count of check-ins for each employee grouped by Employee ID and weekday from the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalCheckIns FROM attendance_1002 WHERE CheckInTime IS NOT NULL GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the total number of check-ins for each employee from the attendance_1002 table, counting only those records where the CheckInTime is not null, and group the results by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS OnTimeCheckIns FROM attendance_1002 WHERE CheckInTime <= '09:00:00' GROUP BY EmployeeID; ","""Count the number of on-time check-ins for each employee from the attendance records, where the check-in time is before or equal to 09:00:00, grouping the results by employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS AttendanceRecords FROM attendance_1002 WHERE CheckOutTime IS NOT NULL GROUP BY Status; ","""Retrieve the attendance status and the total number of attendance records from the attendance_1002 table for records where the check-out time is not null, grouped by attendance status."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(CASE WHEN Status = 'Present' THEN 1 ELSE 0 END) AS PresentDays, SUM(CASE WHEN Status = 'Absent' THEN 1 ELSE 0 END) AS AbsentDays FROM attendance_1002 GROUP BY EmployeeID; ","""Calculate the total number of days employees were present and absent by their EmployeeID, by summing the days marked as 'Present' and 'Absent' from the attendance_1002 table, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, DATEDIFF('2023-02-01', MIN(CheckInTime)) AS DaysWorked FROM attendance_1002 GROUP BY EmployeeID HAVING DaysWorked > 10; ","""Retrieve the Employee IDs and the number of days worked by each employee from the attendance records in the attendance_1002 table, where the count of days worked is more than 10, calculated as the difference in days between February 1, 2023, and the earliest CheckInTime for each employee."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))) AS AvgHoursWorked FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the employee IDs and the average number of hours worked for each employee, calculated as the difference between CheckOutTime and CheckInTime, from the attendance_1002 table, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) FILTER (WHERE Status = 'Late') AS LateCount FROM attendance_1002 GROUP BY EmployeeID; ","""Count the number of times each employee is marked as 'Late' in their attendance records, grouped by their employee IDs."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS AttendanceRecords FROM attendance_1002 WHERE Status IN ('Present', 'Absent') GROUP BY EmployeeID HAVING COUNT(*) > 5; ","""Retrieve the Employee IDs and the total count of attendance records for each employee from the attendance records where the status is either 'Present' or 'Absent', grouping by Employee ID, and only include those employees who have more than 5 attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) AS UniqueEmployees FROM attendance_1002; ","""Count the number of distinct employees listed in the attendance records from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS AttendanceFrequency FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5; ","""Retrieve the attendance status and the count of occurrences for each status from the attendance_1002 table, grouping the results by status and only including those statuses that have more than 5 occurrences."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select all attendance records from the attendance_1002 table, including the employee IDs, check-in times, check-out times, and statuses."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the count of attendance records for each employee from the attendance_1002 table, grouping the results by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MAX(CheckOutTime) AS LatestCheckOut FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the latest check-out times for each Employee ID from the attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS StatusCount FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5; ","""Retrieve the statuses from the attendance records and count the number of occurrences for each status, grouping the results by status, and only include those statuses which have a count greater than 5."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(STRFTIME('%H', CheckOutTime) - STRFTIME('%H', CheckInTime)) AS AverageHours FROM attendance_1002 GROUP BY EmployeeID; ","""Calculate the average number of hours worked by each employee by finding the difference in hours between their check-out and check-in times, and group the results by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS DaysPresent FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID; ","""Count the number of days each employee was present by retrieving the EmployeeID from the attendance_1002 table, filtering for records where the status is 'Present', and grouping the results by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(CASE WHEN Status = 'Late' THEN 1 ELSE 0 END) AS LateCount FROM attendance_1002 GROUP BY EmployeeID HAVING LateCount > 3; ","""Retrieve the Employee IDs and the count of late arrivals for each employee from the attendance records, where a late arrival is counted as the status being 'Late', grouped by Employee ID, and only include those employees who have more than 3 late arrivals."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckInTime > '2023-01-01' AND CheckOutTime < '2023-12-31'; ","""Retrieve the distinct Employee IDs from the attendance records of employees who checked in after January 1, 2023, and checked out before December 31, 2023."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalAttendance FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the total number of attendance records for each employee who checked in between January 1, 2023, and December 31, 2023, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC LIMIT 10; ","""Retrieve the Employee IDs and their corresponding check-in times from the attendance_1002 table, sorted by check-in time in descending order, and limit the results to the most recent 10 entries."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Status FROM attendance_1002 WHERE CheckInTime < '2023-01-01 09:00:00' AND Status = 'Late'; ","""Retrieve the Employee IDs and statuses of employees from the attendance records who checked in before January 1, 2023, at 09:00:00 and have a status of 'Late'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(CheckInTime) AS FirstCheckIn FROM attendance_1002 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the earliest CheckInTime for each employee from the attendance_1002 table, grouped by EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID IN (SELECT EmployeeID FROM attendance_1002 WHERE Status = 'Sick') ORDER BY CheckInTime; ","""Select the EmployeeID, CheckInTime, and CheckOutTime from the attendance_1002 table for employees whose EmployeeID is among those who have a status of 'Sick', and order the results by CheckInTime."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Status, COUNT(*) AS CountStatus FROM attendance_1002 WHERE CheckInTime >= DATE('now', '-30 days') GROUP BY Status; ","""Retrieve the status of attendance and the count of each status from the attendance_1002 table for the check-in times that occurred within the last 30 days, grouping the results by status."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(CASE WHEN Status = 'Absent' THEN 1 END) > 2; ","""Select the Employee IDs from attendance records, grouping by Employee ID, where the count of instances marked as 'Absent' for each Employee ID is greater than 2."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 WHERE CheckOutTime - CheckInTime > INTERVAL '8 hours'; ","""Retrieve the Employee IDs, check-in times, and check-out times from the attendance_1002 table for records where the duration between check-out time and check-in time is greater than 8 hours."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) FROM attendance_1002 WHERE Status = 'Present' AND CheckInTime BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the count of attendance records for employees who were present between January 1, 2023, and January 31, 2023, grouped by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(CASE WHEN Status = 'OnTime' THEN 1 END) AS OnTimeCount FROM attendance_1002 GROUP BY EmployeeID HAVING OnTimeCount = 0; ","""Count the number of times each employee has a status of 'OnTime' from the attendance_1002 table, grouped by EmployeeID, and retrieve the EmployeeID for those employees who have never been 'OnTime'."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM attendance_1002 WHERE Status IN ('Present', 'Late') AND CheckInTime > '2023-02-01' ORDER BY CheckInTime DESC; ","""Select the Employee IDs from the attendance records where the Status is either 'Present' or 'Late', and the Check-In Time is after February 1, 2023, sorted by Check-In Time in descending order."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(CASE WHEN Status = 'Present' THEN 1 ELSE 0 END) AS TotalPresent FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID HAVING TotalPresent > 20; ","""Retrieve the EmployeeIDs and the total number of days they were marked as 'Present' from the attendance records for the year 2023, grouped by EmployeeID, where the total number of days present is greater than 20."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from the attendance_1002 table."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(a.AttendanceID) > 5; ","""Select the Employee IDs of employees and count the number of attendance records for each employee from the employee table, joining with the attendance table, and only include those employees who have more than 5 attendance records."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, SUM(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS TotalHoursWorked FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.EmployeeID; ","""Retrieve the total hours worked for each employee by summing the duration between check-in and check-out times from the attendance records, including only those records where the status is marked as 'Present', and group the results by employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY a.CheckInTime; ","""Retrieve the first and last names of employees along with their check-in times from the employee table and the attendance table, where the check-in times fall between January 1, 2023, and December 31, 2023, and sort the results by the check-in times."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.Department, AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS AverageHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department; ","""Retrieve the average number of hours worked by employees in each department, calculated from the difference between check-out and check-in times, grouping the results by department."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT a.EmployeeID FROM attendance_1002 a WHERE a.CheckInTime > '2023-01-01' AND a.CheckInTime < '2023-12-31'); ","""Retrieve the first and last names of employees from the employee_1001 table who have not checked in during the year 2023, between January 1 and December 31."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, a.Status FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status IS NULL; ","""Retrieve the first names and last names of employees who do not have an attendance status recorded, by joining the employee table with the attendance table based on the EmployeeID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, COUNT(a.AttendanceID) AS Absences FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Absent' GROUP BY e.EmployeeID HAVING COUNT(a.AttendanceID) > 3; ","""Retrieve the first and last names of employees who have been marked as absent more than 3 times, including all employees even if they have no absences, by counting the attendance records from the attendance table grouped by employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.Department, MAX(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS MaxHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department; ","""Retrieve the maximum number of hours worked by employees in each department, calculated from the difference between their check-out and check-in times, by joining the employee information from the employee_1001 table with the attendance records from the attendance_1002 table, and group the results by department."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime < '2023-01-01' AND a.Status = 'Late' ORDER BY a.CheckInTime; ","""Retrieve the first and last names of employees along with their check-in times from the employee table and attendance table for check-in times before January 1, 2023, where the attendance status is 'Late', sorted by check-in time."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.EmployeeID, SUM(CASE WHEN a.Status = 'Present' THEN 1 ELSE 0 END) AS TotalPresentDays, SUM(CASE WHEN a.Status = 'Absent' THEN 1 ELSE 0 END) AS TotalAbsentDays FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the Employee IDs along with the total number of days each employee was marked as 'Present' and the total number of days each employee was marked as 'Absent' by joining the employee data from the employee_1001 table with the attendance records from the attendance_1002 table, grouped by each Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, COUNT(att.AttendanceID) AS TotalAttendances FROM employee_1001 e LEFT JOIN attendance_1002 att ON e.EmployeeID = att.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalAttendances DESC LIMIT 10; ","""Retrieve the first names and last names of employees along with the total number of attendances for each employee, including those who have no attendances, grouped by employee ID, and sorted by the total number of attendances in descending order, limiting the results to the top 10 employees."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, a.CheckOutTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckOutTime IS NOT NULL AND a.CheckInTime IS NOT NULL ORDER BY a.CheckOutTime DESC; ","""Retrieve the first names and last names of employees along with their checkout times from the employee table and attendance records, filtering for records where both the checkout time and check-in time are not null, and sort the results by checkout time in descending order."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, EXTRACT(DAY FROM AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600)) AS AverageWorkingHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.EmployeeID; ","""Retrieve the first and last names of employees along with their average working hours calculated from the difference between check-out and check-in times, only for those who have a status of 'Present', grouped by each employee's ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.Department, COUNT(DISTINCT a.EmployeeID) AS EmployeesPresent FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Department; ","""Retrieve the departments of employees and count the distinct number of employees present, based on the attendance records where their status is 'Present', by joining the employee information with the attendance data, and group the results by department."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, COUNT(a.AttendanceID) AS TotalCheckIns FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime IS NOT NULL GROUP BY e.EmployeeID HAVING TotalCheckIns > 10; ","""Retrieve the first names and last names of employees along with the total number of their check-ins, by joining the employee details and attendance records, where there are valid check-in times, grouped by employee ID, and only include those who have more than 10 check-ins."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.EmployeeID, ARRAY_AGG(a.CheckInTime) AS CheckInTimes FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the Employee IDs and the aggregated list of Check-In times for each employee by joining the employee_1001 table with the attendance_1002 table and grouping the results by Employee ID."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.FirstName, e.LastName, STRING_AGG(a.Status, ', ') AS AttendanceStatus FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID ORDER BY e.LastName; ","""Retrieve the first names and last names of employees along with a concatenated list of their attendance statuses from the attendance records, grouping the results by employee ID and sorting them by last name."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) AS AverageWorkingHours FROM attendance_1002 a WHERE a.CheckInTime >= '2023-01-01' AND a.CheckOutTime IS NOT NULL; ","""Calculate the average working hours for employees by finding the average duration between their check-in and check-out times, for those who checked in on or after January 1, 2023, and have a recorded check-out time."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID HAVING AVG(EXTRACT(EPOCH FROM (a.CheckOutTime - a.CheckInTime))/3600) < 4; ","""Retrieve the Employee IDs and the count of attendance records for each employee from the employee table, where employees are included even if they have no attendance records, and group the results by Employee ID. Furthermore, filter the results to only include those groups where the average duration of attendance, calculated in hours from the difference between check-out and check-in times, is less than 4 hours."""
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the AttendanceID, EmployeeID, CheckInTime, CheckOutTime, and Status from the attendance_1002 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003; ,"""Retrieve all columns from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SalaryID, BaseSalary FROM salary_1003; ","""Retrieve the SalaryID and BaseSalary of all entries from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Bonus FROM salary_1003 WHERE Bonus > 1000; ","""Retrieve the Employee IDs and bonuses from the salary_1003 table where the bonus is greater than 1000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT BaseSalary, Commission FROM salary_1003 WHERE BaseSalary < 50000; ","""Retrieve the base salaries and commissions of employees from the salary_1003 table where the base salary is less than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM salary_1003; ","""Retrieve the distinct Employee IDs from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM salary_1003; ","""Count the total number of entries in the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SUM(BaseSalary) FROM salary_1003; ","""Calculate the total sum of BaseSalary from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AVG(Bonus) FROM salary_1003; ","""Calculate the average bonus from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MAX(Commission) FROM salary_1003; ","""Retrieve the maximum value of the Commission from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MIN(BaseSalary) FROM salary_1003; ","""Retrieve the minimum base salary from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC; ","""Retrieve the payment dates from the salary_1003 table, sorted by payment date in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM salary_1003 ORDER BY BaseSalary ASC; ","""Retrieve the Employee IDs from the salary_1003 table, sorted by their base salaries in ascending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SalaryID, EmployeeID FROM salary_1003 WHERE EmployeeID = 1; ","""Retrieve the SalaryID and EmployeeID from the salary_1003 table for the employee with EmployeeID equal to 1."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT BaseSalary, Bonus FROM salary_1003 WHERE EmployeeID IN (1, 2, 3); ","""Retrieve the base salary and bonus for employees with IDs 1, 2, and 3 from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Retrieve all records from the salary_1003 table where the payment date is between January 1, 2023, and December 31, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SalaryID FROM salary_1003 WHERE BaseSalary <> 0; ","""Retrieve the SalaryID of entries from the salary_1003 table where the BaseSalary is not equal to 0."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary) FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the sum of their base salaries from the salary_1003 table, grouped by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM salary_1003 WHERE BaseSalary > 60000; ","""Count the number of records in the salary_1003 table where the base salary is greater than 60,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT BaseSalary FROM salary_1003; ","""Retrieve the distinct base salaries from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Bonus FROM salary_1003 ORDER BY Bonus DESC; ","""Retrieve the Employee IDs and Bonuses from the salary_1003 table, sorted by Bonus in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select all records from the salary_1003 table, which includes the SalaryID, EmployeeID, BaseSalary, Bonus, and Commission for each employee."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003; ,"""Retrieve all records from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SalaryID, BaseSalary FROM salary_1003 WHERE BaseSalary > 50000; ","""Retrieve the SalaryID and BaseSalary of records from the salary_1003 table where the BaseSalary is greater than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Bonus FROM salary_1003 WHERE Bonus IS NOT NULL; ","""Retrieve the Employee IDs and bonuses from the salary_1003 table where the bonus is not null."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM salary_1003; ","""Count the total number of salary records in the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003; ","""Calculate the total base salary from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AVG(Commission) AS AverageCommission FROM salary_1003; ","""Calculate the average commission from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM salary_1003 ORDER BY PaymentDate DESC; ","""Select all columns from the salary_1003 table and sort the results by the PaymentDate in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM salary_1003; ","""Retrieve the distinct Employee IDs from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, BaseSalary FROM salary_1003 WHERE PaymentDate > '2023-01-01'; ","""Retrieve the Employee IDs and base salaries from the salary_1003 table for payment dates occurring after January 1, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SalaryID, EmployeeID FROM salary_1003 WHERE EmployeeID = 1; ","""Retrieve the SalaryID and EmployeeID from the salary_1003 table where the EmployeeID is equal to 1."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT BaseSalary + Bonus AS TotalCompensation FROM salary_1003; ","""Calculate the total compensation for each employee by adding their base salary and bonus, retrieved from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE BaseSalary < 60000; ","""Count the number of distinct EmployeeIDs in the salary_1003 table where the BaseSalary is less than 60,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM salary_1003 WHERE BaseSalary BETWEEN 40000 AND 80000; ","""Select all records from the salary_1003 table where the base salary is between 40,000 and 80,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, PaymentDate FROM salary_1003 WHERE Commission <> 0; ","""Retrieve the Employee IDs and Payment Dates from the salary_1003 table for records where the Commission is not equal to zero."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MAX(BaseSalary) AS HighestSalary FROM salary_1003; ","""Retrieve the highest base salary from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT employee_1001.EmployeeID, employee_1001.Name FROM employee_1001 JOIN salary_1003 ON employee_1001.EmployeeID = salary_1003.EmployeeID; ","""Select the Employee IDs and names of employees from the employee_1001 table who have corresponding entries in the salary_1003 table based on the EmployeeID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) FROM salary_1003 GROUP BY EmployeeID; ","""Count the number of salary records for each employee by their EmployeeID from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SUM(Bonus) AS TotalBonus FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Calculate the total sum of bonuses from the salary_1003 table for payments made between January 1, 2023, and December 31, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the average base salary for each employee from the salary_1003 table, grouped by EmployeeID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM salary_1003 WHERE BaseSalary < (SELECT AVG(BaseSalary) FROM salary_1003); ","""Retrieve the EmployeeIDs of employees whose BaseSalary is less than the average BaseSalary of all employees in the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the SalaryID, EmployeeID, BaseSalary, Bonus, and Commission from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID HAVING TotalCompensation > 50000; ","""Retrieve the Employee IDs and the total compensation, calculated as the sum of BaseSalary, Bonus, and Commission, for each employee from the salary_1003 table, where the total compensation exceeds 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 GROUP BY EmployeeID ORDER BY PaymentCount DESC; ","""Retrieve the Employee IDs and the count of payment records for each employee from the salary_1003 table, grouped by Employee ID, and sorted in descending order by the count of payments."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MAX(BaseSalary) AS HighestBaseSalary, EmployeeID FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the maximum base salary for each employee identified by their EmployeeID from the salary_1003 table, grouping the results by EmployeeID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Calculate the average base salary from the salary_1003 table for payments made between January 1, 2023, and December 31, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING TotalCommission > 10000; ","""Retrieve the Employee IDs and the total commissions for each employee from the salary_1003 table, grouping the results by Employee ID, where the total commissions exceed 10,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM salary_1003 WHERE Bonus IS NOT NULL; ","""Retrieve the distinct EmployeeIDs from the salary_1003 table where the Bonus is not null."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalPayments FROM salary_1003 WHERE BaseSalary > 30000 GROUP BY EmployeeID HAVING TotalPayments > 1; ","""Retrieve the EmployeeIDs and the total number of payments from the salary_1003 table for employees with a base salary greater than 30,000, grouped by EmployeeID, where the total number of payments is greater than 1."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, BaseSalary + COALESCE(Bonus, 0) + COALESCE(Commission, 0) AS TotalEarnings FROM salary_1003 ORDER BY TotalEarnings DESC LIMIT 10; ","""Select the Employee IDs and calculate their total earnings by adding the base salary, bonus (treating null values as zero), and commission (also treating null values as zero) from the salary_1003 table, and sort the results by total earnings in descending order, limiting the output to the top 10 entries."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) > 5; ","""Retrieve the Employee IDs and the total base salary for each employee from the salary_1003 table, grouped by Employee ID, where the number of salary records for each employee is greater than 5."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(PaymentDate) AS FirstPaymentDate FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the earliest payment date for each employee from the salary_1003 table, grouping the results by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS PaymentRecords FROM salary_1003 WHERE PaymentDate >= '2023-01-01' GROUP BY EmployeeID ORDER BY PaymentRecords DESC; ","""Retrieve the Employee IDs and count the number of payment records for each employee from the salary_1003 table where the payment date is on or after January 1, 2023, grouped by Employee ID and sorted by the number of payment records in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalPreTaxCompensation FROM salary_1003 WHERE PaymentDate < '2023-01-01' GROUP BY EmployeeID HAVING TotalPreTaxCompensation > 60000; ","""Retrieve the EmployeeIDs and the total pre-tax compensation, calculated as the sum of base salary and bonus, for each employee in the salary_1003 table where the payment date is before January 1, 2023, and only include those employees whose total pre-tax compensation exceeds 60,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT SUM(BaseSalary) AS TotalSalaries FROM salary_1003 WHERE PaymentDate >= '2022-01-01' AND PaymentDate < '2023-01-01'; ","""Calculate the total sum of base salaries from the salary_1003 table for records where the payment date is on or after January 1, 2022, and before January 1, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, BaseSalary, Bonus FROM salary_1003 WHERE Bonus IS NOT NULL ORDER BY Bonus DESC; ","""Retrieve the Employee IDs, base salaries, and bonuses of employees from the salary_1003 table where the bonus is not null, sorted by the bonuses in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(DISTINCT YEAR(PaymentDate)) = 2; ","""Select the EmployeeID from the salary_1003 table, grouping the results by EmployeeID, and only include those employees who have received payments in two distinct years."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID HAVING AverageSalary < 50000; ","""Retrieve the Employee IDs and the average base salary for each employee from the salary_1003 table, grouping the results by Employee ID, and only include those employees whose average salary is less than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MAX(PaymentDate) AS LastPaymentDate FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the most recent payment date for each employee from the salary_1003 table, grouping the results by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING TotalCommission > AVG(Commission); ","""Retrieve the Employee IDs and the total commissions for each employee from the salary_1003 table, grouped by Employee ID, where the total commission exceeds the average commission for those employees."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS CountPayments FROM salary_1003 WHERE Commission > 0 GROUP BY EmployeeID HAVING CountPayments > 2; ","""Retrieve the Employee IDs and count of payment records from the salary_1003 table where the Commission is greater than 0, grouped by Employee ID, and include only those groups where the count of payments exceeds 2."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM salary_1003 WHERE BaseSalary + COALESCE(Bonus, 0) > 80000 ORDER BY PaymentDate DESC; ","""Retrieve the Employee IDs from the salary_1003 table where the sum of the BaseSalary and Bonus (considering a Bonus of 0 if it is null) is greater than 80,000, sorted by PaymentDate in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the SalaryID, EmployeeID, BaseSalary, Bonus, and Commission from the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the total sum of BaseSalary for each employee from the salary_1003 table, grouped by EmployeeID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT BaseSalary, Bonus, Commission FROM salary_1003 WHERE PaymentDate >= '2023-01-01'; ","""Retrieve the base salary, bonus, and commission of employees from the salary_1003 table for payment dates on or after January 1, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, s.BaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Retrieve the Employee IDs and names along with their base salaries for employees who have salary records with payment dates between January 1, 2023, and December 31, 2023, by joining the employee records from the employee_1001 table with the salary records from the salary_1003 table based on the EmployeeID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING AVG(BaseSalary) > 50000; ","""Retrieve the Employee IDs and the average base salary for each employee from the salary_1003 table, grouped by Employee ID, where the average base salary is greater than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID ORDER BY TotalCompensation DESC; ","""Summarize the total compensation for each employee by calculating the sum of their base salary, bonus, and commission from the salary_1003 table, grouping the results by EmployeeID, and sorting the total compensation in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 s WHERE s.PaymentDate < '2023-01-01' GROUP BY s.EmployeeID HAVING COUNT(*) > 3; ","""Retrieve the Employee IDs and the count of payment records for each employee from the salary_1003 table where the payment date is earlier than January 1, 2023, grouped by Employee ID, and only include those employees who have more than 3 payment records."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MAX(BaseSalary) AS HighestBaseSalary FROM salary_1003 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the highest base salary for each employee from the salary_1003 table, grouped by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(Bonus) AS TotalBonus FROM salary_1003 WHERE Bonus IS NOT NULL GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the total bonuses for each employee from the salary_1003 table, including only those entries where the bonus is not null, grouped by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 s INNER JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID WHERE e.Department = 'Sales' GROUP BY s.EmployeeID; ","""Retrieve the Employee IDs and the total of their base salaries from the salary_1003 table for employees in the Sales department, grouping the results by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS SalaryEntries FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) >= 5 ORDER BY SalaryEntries DESC; ","""Retrieve the Employee IDs and the count of salary entries for each employee from the salary_1003 table, grouped by Employee ID, where each employee has 5 or more salary entries, sorted by the count of salary entries in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, s.BaseSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate IS NULL; ","""Retrieve the names of employees and their base salaries from the employee table who do not have a payment date recorded in the salary table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 WHERE PaymentDate >= '2023-01-01' GROUP BY EmployeeID ORDER BY TotalBaseSalary DESC; ","""Retrieve the Employee IDs and the total base salaries for each employee from the salary_1003 table where the payment date is on or after January 1, 2023, grouped by Employee ID and sorted by total base salary in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, AVG(Commission) AS AvgCommission FROM salary_1003 s WHERE Commission IS NOT NULL GROUP BY s.EmployeeID HAVING AvgCommission < 2000; ","""Select the Employee IDs and the average commission from the salary_1003 table for employees who have a non-null commission, grouping the results by Employee ID and filtering to include only those with an average commission less than 2000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(BaseSalary) + SUM(Bonus) AS TotalEarnings FROM salary_1003 GROUP BY EmployeeID HAVING TotalEarnings > 100000 ORDER BY TotalEarnings; ","""Retrieve the Employee IDs and total earnings for each employee, calculated as the sum of their base salary and bonuses, grouped by Employee ID, where the total earnings exceed 100,000, and sorted by total earnings."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, MIN(PaymentDate) AS FirstPaymentDate FROM salary_1003 s GROUP BY s.EmployeeID; ","""Retrieve the Employee IDs and the date of their first payment from the salary_1003 table, grouping the results by Employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name HAVING TotalBaseSalary > 75000; ","""Retrieve the Employee IDs and names of employees along with the total of their base salaries from the employee table, joined with the salary table, and group the results by Employee ID and name, where the total base salary exceeds 75,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(DISTINCT PaymentDate) AS DistinctPaymentDates FROM salary_1003 GROUP BY EmployeeID HAVING DistinctPaymentDates > 1; ","""Retrieve the EmployeeIDs and the count of distinct payment dates for each employee from the salary_1003 table, grouped by EmployeeID, where the count of distinct payment dates is greater than 1."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, MAX(s.Commission) AS MaxCommission FROM salary_1003 s GROUP BY s.EmployeeID HAVING MaxCommission IS NOT NULL; ","""Retrieve the Employee IDs along with the maximum commission received by each employee from the salary_1003 table, grouping the results by Employee ID, and only including groups where the maximum commission is not null."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, SUM(BaseSalary + Bonus) AS TotalIncentives FROM salary_1003 s WHERE Bonus IS NOT NULL GROUP BY s.EmployeeID HAVING TotalIncentives >= 60000; ","""Retrieve the Employee IDs and the total incentives, calculated as the sum of BaseSalary and Bonus, for employees where the Bonus is not null, grouped by Employee ID, and only include those with total incentives of 60,000 or more."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, COUNT(*) AS PaymentRecords FROM salary_1003 s WHERE s.PaymentDate < '2023-06-01' GROUP BY s.EmployeeID ORDER BY PaymentRecords DESC;","""Retrieve the Employee IDs and the count of payment records for each employee from the salary_1003 table, where the payment date is before June 1, 2023, grouped by Employee ID and sorted by the count of payment records in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, s.BaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01'; ","""Retrieve the EmployeeID, first name, and last name of employees along with their base salary from the employee table for those employees who have salary records where the payment date is on or after January 1, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, SUM(s.BaseSalary + s.Bonus + s.Commission) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SUM(s.BaseSalary + s.Bonus + s.Commission) > 100000; ","""Retrieve the Employee IDs and the total compensation, which is the sum of base salary, bonus, and commission, for each employee from the employee_1001 table, where the total compensation exceeds 100,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryCount FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 5; ","""Retrieve the first and last names of employees who have more than 5 salary records, counting each salary record, by joining the employee table with the salary table and grouping the results by employee ID."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, AVG(s.BaseSalary) AS AverageBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.Department = 'Sales' GROUP BY e.FirstName; ","""Retrieve the first names of employees from the Sales department and calculate the average base salary for each employee, grouping the results by their first names."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MAX(s.BaseSalary) FROM salary_1003 s WHERE s.PaymentDate BETWEEN '2022-01-01' AND '2023-01-01'; ","""Retrieve the maximum base salary from the salary_1003 table for payment dates that fall between January 1, 2022, and January 1, 2023."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate < '2022-01-01' GROUP BY e.EmployeeID ORDER BY TotalBaseSalary DESC LIMIT 10; ","""Retrieve the first and last names of employees along with the total base salary they received from salary records before January 1, 2022, grouping the results by each employee's ID, sorted by the total base salary in descending order, and limit the result to the top 10 employees."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Department, COUNT(*) AS EmployeeCount FROM employee_1001 e INNER JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2022-06-01' GROUP BY e.Department ORDER BY EmployeeCount DESC; ","""Retrieve the department names and the count of employees in each department from the employee table, where the payment date in the salary table is on or after June 1, 2022, grouping the results by department and sorting them by the employee count in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, (SUM(s.BaseSalary) + SUM(s.Bonus)) AS TotalEarnings FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalEarnings > 150000 ORDER BY TotalEarnings DESC; ","""Retrieve the first and last names of employees along with their total earnings, calculated as the sum of their base salary and bonus, from the employee table joined with the salary table, grouped by employee ID, where the total earnings are greater than 150,000, and sorted by total earnings in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, s.PaymentDate FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.Commission IS NOT NULL ORDER BY s.PaymentDate DESC; ","""Retrieve the Employee IDs, first names, last names, and payment dates of employees who have received a commission, joining the employee data from the employee_1001 table with the salary data from the salary_1003 table, and sort the results by payment dates in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(DISTINCT strftime('%Y-%m', s.PaymentDate)) AS PaymentMonths FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING PaymentMonths > 6; ","""Select the first and last names of employees and count the distinct months in which they received payments from the salary records, grouping the results by each employee's ID, and only include those employees who received payments in more than 6 different months."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.Bonus) AS TotalBonus FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalBonus > 20000; ","""Retrieve the EmployeeID, first name, and last name of employees along with the total amount of bonuses they received, grouped by EmployeeID, from the employee table and the salary table, where the total bonuses exceed 20,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM salary_1003 s WHERE s.EmployeeID = e.EmployeeID); ","""Retrieve the first and last names of employees from the employee_1001 table who do not have any associated records in the salary_1003 table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryCount, AVG(s.BaseSalary) AS AvgBaseSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SalaryCount > 1 AND AvgBaseSalary < 50000; ","""Retrieve the first and last names of employees along with the count of their salary records and the average base salary, grouping the results by employee ID, but only include those with more than one salary record and an average base salary of less than 50,000."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, MAX(s.Commission) AS MaxCommission FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.EmployeeID HAVING MaxCommission IS NOT NULL ORDER BY MaxCommission DESC; ","""Retrieve the first and last names of employees along with their maximum commission from the employee table, where their associated salary record has a payment date on or after January 1, 2023. Group the results by employee ID, include only those with a non-null maximum commission, and sort the results by maximum commission in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, s.BaseSalary FROM salary_1003 s WHERE NOT EXISTS (SELECT 1 FROM employee_1001 e WHERE e.EmployeeID = s.EmployeeID) ORDER BY s.BaseSalary DESC; ","""Select the Employee IDs and base salaries of employees from the salary_1003 table where there are no corresponding entries in the employee_1001 table, and order the results by base salary in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT s.EmployeeID) AS UniqueEmployees FROM salary_1003 s WHERE s.BaseSalary > (SELECT AVG(BaseSalary) FROM salary_1003); ","""Count the number of distinct employees in the salary_1003 table whose base salary is greater than the average base salary of all employees in the same table."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.Bonus IS NULL ORDER BY e.LastName ASC; ","""Retrieve the first and last names of employees who do not have a bonus recorded, by joining the employee table with the salary table, and sort the results by the last names of the employees in ascending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Department, SUM(s.BaseSalary) AS TotalSalaries FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING TotalSalaries > 500000 ORDER BY TotalSalaries DESC; ","""Retrieve the total base salaries from salary records for each department of employees, grouping the results by department and only including departments where the total base salaries exceed 500,000, sorted by the total salaries in descending order."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT s.EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 s GROUP BY s.EmployeeID HAVING PaymentCount > 3; ","""Count the number of payment records for each employee in the salary_1003 table and select the EmployeeID for those employees who have more than 3 payment records."""
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"The provided SQL query is missing. Please provide the SQL query you would like me to convert into a natural language query, and I will generate a precise natural language query for you."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004; ,"""Retrieve all columns from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ContactID, PhoneNumber FROM employee_contacts_1004; ","""Retrieve the ContactID and PhoneNumber from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL; ","""Select the IDs and email addresses of employees from the employee_contacts_1004 table where their phone numbers are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Address FROM employee_contacts_1004; ","""Retrieve the distinct addresses from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE EmployeeID = 1; ","""Retrieve all contact information for the employee with an EmployeeID of 1 from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM employee_contacts_1004; ","""Count the total number of records in the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the total count of contact records for each employee from the employee_contacts_1004 table, grouped by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 ORDER BY ContactID ASC; ","""Retrieve all columns from the employee_contacts_1004 table, sorting the results by ContactID in ascending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@example.com'; ","""Select all columns from the employee_contacts_1004 table for records where the email address ends with '@example.com'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT PhoneNumber FROM employee_contacts_1004 WHERE Address LIKE '%Street%'; ","""Retrieve the phone numbers of employees from the employee_contacts_1004 table where the address contains the word 'Street'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ContactID FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3); ","""Select the ContactIDs from the employee_contacts_1004 table for the employees with EmployeeID 1, 2, or 3."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL; ","""Retrieve the distinct phone numbers from the employee_contacts_1004 table where the phone numbers are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL ORDER BY EmployeeID; ","""Retrieve the Employee IDs and email addresses from the employee_contacts_1004 table for employees who have a phone number listed, sorted by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM employee_contacts_1004 WHERE Address IS NOT NULL; ","""Retrieve the Employee IDs from the employee_contacts_1004 table where the Address field is not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT PhoneNumber) FROM employee_contacts_1004; ","""Count the distinct phone numbers from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE ContactID > 10; ","""Retrieve all columns from the employee_contacts_1004 table for records where the ContactID is greater than 10."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Address FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL; ","""Select the EmployeeID and Address from employee_contacts_1004 for records where the PhoneNumber is not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE EmployeeID < 5; ","""Retrieve all contact information from the employee_contacts_1004 table for employees with an EmployeeID less than 5."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Email FROM employee_contacts_1004 WHERE Email IS NOT NULL; ","""Retrieve the email addresses from the employee_contacts_1004 table where the email is not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ContactID, PhoneNumber FROM employee_contacts_1004 ORDER BY PhoneNumber DESC; ","""Retrieve the ContactID and PhoneNumber from the employee_contacts_1004 table, sorted by PhoneNumber in descending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE EmployeeID = 2; ","""Retrieve all contact information for the employee with an EmployeeID of 2 from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the contact details including phone number, email, and address for all employee contacts from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004; ,"""Retrieve all data from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ContactID, PhoneNumber, Email FROM employee_contacts_1004; ","""Retrieve the ContactID, PhoneNumber, and Email from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID = 1; ","""Retrieve the phone numbers of employees with an EmployeeID of 1 from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the total count of contact entries for each employee from the employee_contacts_1004 table, grouped by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@example.com'; ","""Select all contact details from the employee_contacts_1004 table where the email addresses end with '@example.com'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Address FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL; ","""Retrieve the addresses of employees from the employee_contacts_1004 table where the phone numbers are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM employee_contacts_1004; ","""Retrieve the distinct EmployeeIDs from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber LIKE '%123%'; ","""Retrieve the EmployeeID and PhoneNumber from the employee_contacts_1004 table where the PhoneNumber contains the sequence '123'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ContactID, Email FROM employee_contacts_1004 ORDER BY ContactID DESC; ","""Retrieve the Contact IDs and email addresses from the employee_contacts_1004 table, sorted by Contact ID in descending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL; ","""Count the total number of entries in the employee_contacts_1004 table where the PhoneNumber is not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(ContactID) AS FirstContact FROM employee_contacts_1004 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the minimum ContactID for each EmployeeID from the employee_contacts_1004 table, grouped by EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE Address LIKE '%Main St%'; ","""Select all records from the employee_contacts_1004 table where the address contains 'Main St'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE EXISTS (SELECT 1 FROM employee_contacts_1004 ec WHERE ec.EmployeeID = employee_contacts_1004.EmployeeID); ","""Select all records from the employee_contacts_1004 table where there exists at least one record in the employee_contacts_1004 table with the same EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalContacts FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1; ","""Retrieve the Employee IDs and the total count of contact entries for each employee from the employee_contacts_1004 table, grouping the results by Employee ID, and only include those employees who have more than one contact entry."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE ContactID > 5; ","""Retrieve all columns from the employee_contacts_1004 table for contacts where the ContactID is greater than 5."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT MAX(ContactID) AS MaxContactID FROM employee_contacts_1004; ","""Retrieve the maximum ContactID from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Email FROM employee_contacts_1004 WHERE Email IS NOT NULL ORDER BY Email; ","""Select the Employee IDs and email addresses from the employee_contacts_1004 table where the email addresses are not null, and sort the results by the email addresses."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Address FROM employee_contacts_1004 ORDER BY EmployeeID ASC; ","""Retrieve the Employee IDs and addresses from the employee_contacts_1004 table, sorted by Employee ID in ascending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL AND Email IS NOT NULL; ","""Retrieve all contact information from the employee_contacts_1004 table where both the phone number and email are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT PhoneNumber FROM employee_contacts_1004; ","""Retrieve the distinct phone numbers from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Retrieve the contact ID, employee ID, phone number, email, and address of employees from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID; ","""Retrieve the Employee IDs and phone numbers of employees by joining the employee table with the employee contacts table based on the Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) as contact_count FROM employee_contacts_1004 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the count of contact records for each employee from the employee_contacts_1004 table, grouped by EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL; ","""Select the Employee IDs and email addresses of employees from the employee_1001 table who have a corresponding email in the employee_contacts_1004 table, ensuring that only records with a non-null email are included."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Address, COUNT(*) FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING COUNT(*) > 1; ","""Retrieve the addresses from the employee_contacts_1004 table and count how many times each address appears, grouping the results by address and only including addresses that appear more than once."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.LastName; ","""Retrieve the first and last names of employees along with their phone numbers by joining the employee and employee contacts tables, and sort the results by the last names of the employees."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, MAX(ec.PhoneNumber) as LatestPhone FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID; ","""Select the Employee IDs and the latest phone number for each employee by joining the employee table with the employee contacts table, grouping the results by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Email, e.FirstName FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@company.com'; ","""Retrieve the email addresses and first names of employees from the employee table who have an email address ending with '@company.com', joining the employee contacts table based on the employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber LIKE '555%'; ","""Select the Employee IDs and phone numbers of contacts from the employee_contacts_1004 table where the phone number starts with '555'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(ec.ContactID) as TotalContacts FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING TotalContacts > 2; ","""Retrieve the Employee IDs of employees and the total number of their associated contact records from the employee_contacts_1004 table, grouping the results by Employee ID, and only include those employees who have more than 2 contact records."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, ec.Address FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address IS NOT NULL; ","""Retrieve the first names and last names of employees along with their addresses from the employee table, including all employees even if they do not have a listed address, but only return the addresses that are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY ec.PhoneNumber ASC; ","""Select the EmployeeID and PhoneNumber of employees by joining the employee table with the employee contacts table, and order the results by the PhoneNumber in ascending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, AVG(LENGTH(ec.PhoneNumber)) as AvgPhoneLength FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID; ","""Select the Employee IDs and the average length of their phone numbers from the employee contacts, grouped by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL ORDER BY ec.Email DESC; ","""Retrieve the Employee IDs and email addresses of employees from the employee table who have a non-null email address in the employee contacts table, joining the employee and employee contacts tables on EmployeeID, and sort the results by email addresses in descending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Address, COUNT(ec.ContactID) as CountPerAddress FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING CountPerAddress > 3; ","""Retrieve the addresses from the employee_contacts_1004 table and count how many contact records exist for each address, only including addresses that have more than three contact records."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.FirstName LIKE 'A%'; ","""Retrieve the first names and last names of employees whose first names start with the letter 'A', along with their phone numbers, by joining the employee and employee contacts tables."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, COUNT(*) FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID HAVING COUNT(*) < 3; ","""Select the EmployeeIDs from the employee_contacts_1004 table and count the number of contacts for each EmployeeID, grouping the results by EmployeeID, and only include those EmployeeIDs that have fewer than 3 contacts."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, MAX(ec.Address) as LastAddress FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the Employee IDs and the most recent address for each employee by joining the employee table with the employee contacts table, grouped by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL ORDER BY e.EmployeeID; ","""Select the EmployeeID and Email of employees from the employee_1001 table who have a non-null email address in the employee_contacts_1004 table, using a left join to connect the two tables on EmployeeID, and sort the results by EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, COUNT(ec.ContactID) FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.FirstName HAVING COUNT(ec.ContactID) > 1; ","""Retrieve the first names of employees and the count of their contact entries from the employee table and the employee contacts table, grouping the results by the first names of the employees, and only include those employees who have more than one contact entry."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.PhoneNumber, e.EmployeeID FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE LENGTH(ec.PhoneNumber) > 10; ","""Select the phone numbers and employee IDs of employees from the employee_contacts_1004 table where the length of the phone number is greater than 10, joining with the employee_1001 table on the EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the contact ID, employee ID, phone number, email, and address from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID; ","""Retrieve the Employee IDs and phone numbers of employees by joining the employee table with their contact information from the employee contacts table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) AS TotalContacts FROM employee_contacts_1004; ","""Count the total number of contact records from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS NumberOfContacts FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1; ","""Retrieve the Employee IDs and the count of their associated contacts from the employee_contacts_1004 table, grouping the results by Employee ID and ensuring that only those Employee IDs with more than one associated contact are included."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NOT NULL; ","""Retrieve the Employee IDs and email addresses of employees who have an email address listed, by performing a left join between the employee table and the employee contacts table on Employee IDs."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Address, COUNT(ec.EmployeeID) AS NumberOfEmployees FROM employee_contacts_1004 ec GROUP BY ec.Address ORDER BY NumberOfEmployees DESC; ","""Retrieve the addresses from the employee contacts and count the number of employees associated with each address, grouping the results by address and sorting them by the number of employees in descending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber LIKE '555%'; ","""Retrieve the Employee IDs and phone numbers of employees whose phone numbers start with '555', by joining the employee records with their contact information."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT ec.Email FROM employee_contacts_1004 ec WHERE ec.Email IS NOT NULL ORDER BY ec.Email; ","""Retrieve the distinct email addresses from the employee_contacts_1004 table where the email addresses are not null, and sort the results in alphabetical order by email address."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.LastName; ","""Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who are linked to their contact information in the employee_contacts_1004 table, sorted by LastName."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec WHERE ec.Address LIKE '%Street%'; ","""Retrieve the Employee IDs and addresses from the employee_contacts_1004 table where the address contains the word 'Street'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the Employee IDs and the count of contact entries for each employee from the employee table, including employees without any contacts, grouping the results by Employee ID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.FirstName; ","""Retrieve the EmployeeID, FirstName, LastName, and PhoneNumber of employees by joining the employee_1001 table with the employee_contacts_1004 table on EmployeeID, and sort the results by FirstName."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID HAVING TotalContacts > 3; ","""Retrieve the EmployeeIDs and the total number of contacts for each employee from the employee_contacts_1004 table, grouped by EmployeeID, where the total number of contacts is greater than 3."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e RIGHT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.EmployeeID IS NULL; ","""Select the EmployeeID from the employee_1001 table and the PhoneNumber from the employee_contacts_1004 table, where there are records in employee_contacts_1004 but no corresponding EmployeeID in employee_1001."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Address, COUNT(ec.ContactID) FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING COUNT(ec.ContactID) > 1; ","""Retrieve the addresses from the employee_contacts_1004 table and count the number of contacts for each address, grouping the results by address and including only those addresses that have more than one contact."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@example.com'; ","""Retrieve the first names and last names of employees along with their email addresses from the employee table and the employee contacts table, where the email addresses end with '@example.com'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL ORDER BY ec.PhoneNumber; ","""Retrieve the phone numbers of employees from the employee_contacts_1004 table, ensuring that the phone numbers are not null, and sort the results by phone number."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(ec.ContactID) FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.FirstName, e.LastName HAVING COUNT(ec.ContactID) > 2; ","""Retrieve the first and last names of employees along with the count of their associated contact records, grouped by the employees' first and last names, including only those employees who have more than two contact records."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL AND ec.Email IS NOT NULL; ","""Retrieve the Employee IDs, phone numbers, and email addresses of employees from the employee_contacts_1004 table, where both the phone numbers and email addresses are not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, e.FirstName, e.LastName FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.Address IS NOT NULL; ","""Retrieve the EmployeeID, first name, and last name of employees who have a non-null address in the employee_contacts_1004 table, by joining it with the employee_1001 table on the EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber LIKE '123%'; ","""Retrieve the distinct phone numbers from the employee_contacts_1004 table where the phone numbers start with '123'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select all contact information, including phone numbers, emails, and addresses, for employees from the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.ContactID, ec.PhoneNumber, ec.Email, ec.Address FROM employee_contacts_1004 ec WHERE ec.EmployeeID IN (SELECT e.EmployeeID FROM employee_1001 e WHERE e.Department = 'Sales'); ","""Retrieve the ContactID, PhoneNumber, Email, and Address of employee contacts where the EmployeeID corresponds to employees in the Sales department."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 2; ","""Retrieve the Employee IDs and the count of contact records for each employee from the employee table, including employees with no contacts, where the count of contact records is greater than 2."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","
SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL; ","""Retrieve the EmployeeID and Name from the employee_1001 table along with the PhoneNumber from the employee_contacts_1004 table for employees whose PhoneNumber is not null, joining the two tables on EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, e.EmployeeID, ec.Email FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email LIKE '%@company.com'; ","""Retrieve the names and Employee IDs of employees along with their email addresses from the employee table and the employee contacts table, where the email address contains '@company.com'."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT ec.Address FROM employee_contacts_1004 ec WHERE ec.Address IS NOT NULL ORDER BY ec.Address; ","""Retrieve the distinct addresses from the employee_contacts_1004 table where the address is not null, sorted in ascending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%New York%' ORDER BY e.Name; ","""Retrieve the Employee IDs and names along with their phone numbers for employees who live in New York, sorting the results by the employees' names."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Department, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Department; ","""Retrieve the departments of employees along with the count of contact records for each department, by joining the employee table with the employee contacts table and grouping the results by department."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.PhoneNumber, COUNT(ec.EmployeeID) AS PhoneContactCount FROM employee_contacts_1004 ec GROUP BY ec.PhoneNumber HAVING COUNT(ec.EmployeeID) > 1; ","""Retrieve the phone numbers from the employee contacts table and count how many employees are associated with each phone number, grouping the results by phone number, and only include those groups where the count of employees is greater than 1."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.EmployeeID NOT IN (SELECT EmployeeID FROM employee_contacts_1004); ","""Retrieve the EmployeeIDs and PhoneNumbers from the employee_contacts_1004 table for those EmployeeIDs that do not exist in the same table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.ContactID, ec.Email FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.HireDate < '2020-01-01'; ","""Select the ContactID and Email of employees from the employee_contacts_1004 table who were hired before January 1, 2020, by joining with the employee_1001 table based on their EmployeeID."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec WHERE ec.ContactID IN (SELECT ContactID FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL) AND ec.Address IS NOT NULL; ","""Select the EmployeeID and Address of employees from the employee_contacts_1004 table where the ContactID is associated with any record that has a non-null PhoneNumber, and the Address is not null."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) = 0; ","""Retrieve the EmployeeID and Name of employees who do not have any associated contact entries, along with the count of their contact entries, by counting the ContactID from the employee_contacts_1004 table, using a left join with the employee_1001 table, and grouping the results by EmployeeID, ensuring that the count of ContactID is zero."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.ContactID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE CHAR_LENGTH(ec.PhoneNumber) > 10; ","""Retrieve the ContactID and phone numbers of employees from the employee_contacts_1004 table where the length of the phone number is greater than 10 characters."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.Email, COUNT(ec.EmployeeID) AS EmailCount FROM employee_contacts_1004 ec GROUP BY ec.Email HAVING EmailCount > 1; ","""Retrieve the email addresses from the employee_contacts_1004 table and count the number of employees associated with each email, grouping the results by email, and only including emails that have more than one associated employee."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.Name, e.Department FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_contacts_1004 WHERE Address IS NOT NULL) ORDER BY e.Department ASC; ","""Select the names and departments of employees whose IDs are listed in the employee_contacts_1004 table with a non-null address, and order the results by department in ascending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM employee_contacts_1004 ec WHERE ec.EmployeeID = e.EmployeeID); ","""Retrieve the EmployeeID and Name of employees from the employee_1001 table who do not have any associated contact information in the employee_contacts_1004 table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%2020%'; ","""Retrieve the Employee IDs and names along with their addresses from the employee table and their corresponding contact information, where the address contains the year 2020."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ec.ContactID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IN (SELECT PhoneNumber FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(*) > 1); ","""Select the ContactID and PhoneNumber from employee_contacts_1004 for phone numbers that appear more than once in the same table."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, e.Name, e.Department FROM employee_1001 e WHERE EXISTS (SELECT 1 FROM employee_contacts_1004 ec WHERE ec.EmployeeID = e.EmployeeID AND ec.Email LIKE '%@gmail.com'); ","""Retrieve the Employee ID, Name, and Department of employees from the employee table who have at least one contact associated with them that includes a Gmail email address."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT e.EmployeeID, COUNT(ec.ContactID) AS TotalContacts FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalContacts DESC; ","""Retrieve the Employee IDs and the total number of contact entries for each employee from the employee table, including employees with no contacts, grouped by Employee ID, and sorted by the total number of contacts in descending order."""
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Retrieve the contact information, including phone numbers, emails, and addresses, for all employees from the employee_contacts_1004 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005; ,"""Retrieve all columns from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Manager'; ","""Retrieve the names of projects from the project_assignments_1005 table where the role of the employee assigned to the project is 'Manager'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate > '2022-01-01'; ","""Retrieve the Employee IDs and project names from project_assignments_1005 for assignments that started after January 1, 2022."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005; ","""Count the total number of assignment records in the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Role FROM project_assignments_1005; ","""Retrieve the distinct roles from the project assignments table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of projects and the total number of assignments for each project from the project_assignments_1005 table, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE EndDate IS NOT NULL; ","""Select all records from the project_assignments_1005 table where the EndDate is not null."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Role FROM project_assignments_1005 WHERE EndDate < '2023-08-01'; ","""Retrieve the Employee IDs and their roles from the project assignments where the End Date is before August 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005 WHERE EmployeeID = 101; ","""Count the total number of project assignments for the employee with an EmployeeID of 101."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC; ","""Retrieve the project names and start dates from the project_assignments_1005 table, sorted by the start dates in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE ProjectName LIKE '%Research%'; ","""Retrieve the Employee IDs and project names from the project_assignments_1005 table for projects where the project name includes the term 'Research'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) FROM project_assignments_1005 GROUP BY Role; ","""Count the number of assignments for each role from the project_assignments_1005 table, grouping the results by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE Role = 'Developer' AND StartDate < '2023-01-01'; ","""Retrieve all records from the project_assignments_1005 table where the role is 'Developer' and the start date is before January 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MAX(EndDate) FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the project names and the latest end dates of each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM project_assignments_1005 WHERE EndDate IS NULL; ","""Retrieve the EmployeeIDs of employees who have ongoing project assignments where the EndDate is not specified."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31'; ","""Retrieve the names of projects from the project_assignments_1005 table where the start date is between January 1, 2022, and December 31, 2022."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) FROM project_assignments_1005; ","""Count the number of distinct employees who have been assigned to projects from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) as NumberOfAssignments FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 2; ","""Count the number of assignments for each role from the project_assignments_1005 table, including only those roles that have more than 2 assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE EmployeeID IN (SELECT DISTINCT EmployeeID FROM project_assignments_1005 WHERE Role = 'Analyst'); ","""Retrieve all project assignments for employees whose role is 'Analyst' from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, StartDate, EndDate FROM project_assignments_1005 WHERE EndDate > StartDate; ","""Retrieve the project names, start dates, and end dates from the project_assignments_1005 table where the end date is greater than the start date."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, and Role from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005; ,"""Retrieve all information from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Manager'; ","""Retrieve the names of projects from project_assignments_1005 where the role is 'Manager'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Role FROM project_assignments_1005; ","""Retrieve the distinct roles from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005 WHERE EndDate IS NOT NULL; ","""Count the number of project assignments where the EndDate is not null."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID; ","""Count the number of projects assigned to each employee by retrieving the EmployeeID and the corresponding project count from the project_assignments_1005 table, grouping the results by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01'; ","""Retrieve all records from the project_assignments_1005 table for assignments that started on or after January 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC; ","""Retrieve the project names and start dates from the project_assignments_1005 table, sorted by start dates in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, Role FROM project_assignments_1005 WHERE EmployeeID = 1; ","""Retrieve the project names and roles of assignments for the employee with an ID of 1 from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE EndDate < StartDate; ","""Select all records from the project_assignments_1005 table where the EndDate is earlier than the StartDate."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName LIKE 'Alpha%'; ","""Retrieve the Employee IDs and roles of employees who are assigned to projects with names starting with 'Alpha' from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the project names and the latest end dates for each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM project_assignments_1005 WHERE Role = 'Developer' AND EndDate > '2023-12-31'; ","""Count the total number of project assignments where the role is 'Developer' and the end date is after December 31, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS Assignments FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3; ","""Retrieve the Employee IDs and the count of project assignments for each employee from the project_assignments_1005 table, grouped by Employee ID, where the count of assignments is greater than 3."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MIN(StartDate) AS EarliestStart FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of projects and the earliest start date for each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE Role IN ('Developer', 'Tester'); ","""Retrieve all records from the project_assignments_1005 table where the role of the employee is either 'Developer' or 'Tester'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT EmployeeID FROM project_assignments_1005 WHERE EndDate IS NULL; ","""Retrieve the distinct Employee IDs from the project_assignments_1005 table where the EndDate is null."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY ProjectName ORDER BY AssignmentCount DESC; ","""Retrieve the names of projects and the count of assignments for each project, grouped by project name and sorted by the count of assignments in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT * FROM project_assignments_1005 WHERE StartDate < '2023-01-01' AND EndDate > '2023-01-01'; ","""Select all records from the project_assignments_1005 table where the start date is before January 1, 2023, and the end date is after January 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(CASE WHEN Role = 'Developer' THEN 1 ELSE 0 END) AS DeveloperCount FROM project_assignments_1005 GROUP BY EmployeeID; ","""Count the number of project assignments for each employee where the role is 'Developer', grouped by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) AS RoleCount FROM project_assignments_1005 GROUP BY Role ORDER BY RoleCount DESC; ","""Count the number of assignments for each role from the project_assignments_1005 table, grouping the results by role and sorting them in descending order based on the count of assignments for each role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select all details from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of projects and the total number of assignments for each project from the project_assignments_1005 table, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, MIN(StartDate) AS FirstAssignmentStart FROM project_assignments_1005 GROUP BY EmployeeID; ","""Retrieve the EmployeeIDs and the start date of their first project assignment from the project_assignments_1005 table, grouped by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 5; ","""Determine the Employee IDs and the total number of projects assigned to each employee from the project_assignments_1005 table, grouping the results by Employee ID and only including those employees who have been assigned to more than 5 projects."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName HAVING MAX(EndDate) < '2023-12-31'; ","""Retrieve the names of projects and the maximum end dates of those projects from the project_assignments_1005 table, grouping the results by project names, and only include projects where the latest end date is before December 31, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) AS NumberOfEmployees FROM project_assignments_1005 GROUP BY Role; ","""Retrieve the roles of employees and the count of employees assigned to each role from the project_assignments_1005 table, grouped by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY EmployeeID; ","""Calculate the average duration of project assignments for each employee by subtracting the start date from the end date, grouped by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate >= '2023-01-01' AND EndDate <= '2023-12-31'; ","""Retrieve the Employee IDs and project names from the project_assignments_1005 table for assignments that start on or after January 1, 2023, and end on or before December 31, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) FROM project_assignments_1005 WHERE Role = 'Manager' GROUP BY ProjectName; ","""Retrieve the names of projects and the count of assignments for each project where the role is 'Manager', grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL ORDER BY EndDate DESC; ","""Retrieve the Employee IDs and project names from the project assignments where the end date is not null, sorted by the end date in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(CASE WHEN Role = 'Developer' THEN 1 END) > 3; ","""Select the EmployeeIDs of employees who have been assigned to more than three projects in the role of 'Developer' from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) AS NumberOfProjects FROM project_assignments_1005 GROUP BY Role HAVING NumberOfProjects > 10; ","""Count the number of projects for each role from the project_assignments_1005 table, and only include roles that have more than 10 projects."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, StartDate, EndDate FROM project_assignments_1005 WHERE Role LIKE '%Lead%'; ","""Retrieve the Employee IDs, Start Dates, and End Dates of project assignments where the role includes the word 'Lead'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) FROM project_assignments_1005 WHERE StartDate < '2023-01-01' GROUP BY ProjectName; ","""Retrieve the names of projects and the count of assignments for each project that started before January 1, 2023, grouped by the project names."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT Role FROM project_assignments_1005 WHERE EmployeeID IS NOT NULL; ","""Retrieve the distinct roles from the project_assignments_1005 table for employees who have a non-null EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(julianday(EndDate) - julianday(StartDate)) AS TotalDaysWorked FROM project_assignments_1005 GROUP BY EmployeeID; ","""Calculate the total number of days worked by each employee based on their project assignments by summing the difference between the EndDate and StartDate for each EmployeeID, grouped by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) AS AssignedEmployees FROM project_assignments_1005 GROUP BY ProjectName HAVING AssignedEmployees < 5; ","""Retrieve the names of projects and the number of employees assigned to each project from the project_assignments_1005 table, grouping the results by project name, and including only those projects that have fewer than 5 assigned employees."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName, Role FROM project_assignments_1005 WHERE EndDate > CURRENT_TIMESTAMP; ","""Select the Employee IDs, project names, and roles from project assignments where the End Date is in the future."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) FROM project_assignments_1005 WHERE StartDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Count the distinct EmployeeIDs from the project_assignments_1005 table for assignments that started between January 1, 2023, and December 31, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, MIN(StartDate) AS FirstStartDate FROM project_assignments_1005 GROUP BY Role; ","""Retrieve the roles of employees and the earliest start dates for each role from the project_assignments_1005 table, grouped by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) AS RoleCount FROM project_assignments_1005 GROUP BY Role ORDER BY RoleCount DESC; ","""Retrieve the count of assignments for each role from the project_assignments_1005 table, grouping the results by role and sorting them in descending order based on the count."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Select the AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, and Role from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of projects and the total number of assignments for each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3; ","""Retrieve the Employee IDs and the total number of projects assigned to each employee, grouped by Employee ID, where the total number of projects is greater than 3."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, AVG(DATEDIFF(EndDate, StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName; ","""Calculate the average duration of projects by finding the average difference in days between the end date and the start date for each project, grouped by project name, from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) FROM project_assignments_1005 GROUP BY Role ORDER BY COUNT(*) DESC; ","""Retrieve the roles of employees from the project_assignments_1005 table and count how many employees hold each role, grouping the results by role and sorting them in descending order based on the count."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate < '2023-01-01' AND EndDate > '2023-01-01'; ","""Retrieve the Employee IDs and Project Names from project_assignments_1005 where the Start Date is before January 1, 2023, and the End Date is after January 1, 2023."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName; ","""Retrieve the names of projects and the latest end date for each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, SUM(DATEDIFF(EndDate, StartDate)) AS TotalWorkTime FROM project_assignments_1005 GROUP BY EmployeeID HAVING SUM(DATEDIFF(EndDate, StartDate)) > 365; ","""Retrieve the EmployeeIDs and the total work time, calculated as the sum of the duration between the EndDate and StartDate, for each employee from the project_assignments_1005 table, grouped by EmployeeID, where the total work time exceeds 365 days."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, MIN(StartDate) AS FirstAssigned FROM project_assignments_1005 GROUP BY Role; ","""Retrieve the roles of employees and the earliest start dates for each role from the project_assignments_1005 table, grouping the results by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS UniqueProjects FROM project_assignments_1005 GROUP BY EmployeeID; ","""Retrieve the Employee IDs and the count of distinct project names assigned to each employee from the project_assignments_1005 table, grouped by Employee ID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) AS AssignmentCount FROM project_assignments_1005 WHERE StartDate >= '2022-01-01' GROUP BY ProjectName; ","""Retrieve the names of projects and the count of assignments for each project that started on or after January 1, 2022, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName, Role FROM project_assignments_1005 WHERE EndDate IS NULL; ","""Retrieve the Employee IDs, project names, and roles from the project_assignments_1005 table for assignments that have no end date specified."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(*) AS RoleCount FROM project_assignments_1005 WHERE Role IS NOT NULL GROUP BY Role; ","""Retrieve the roles and the count of assignments for each role from project_assignments_1005, including only those roles that are not null, and group the results by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName FROM project_assignments_1005 WHERE StartDate < EndDate; ","""Retrieve the names of projects from the project_assignments_1005 table where the start date is earlier than the end date."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 ORDER BY StartDate DESC; ","""Retrieve the Employee IDs, project names, and start dates from the project_assignments_1005 table, sorted by the start dates in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT Role, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role; ","""Retrieve the roles and count the distinct number of employees assigned to each role from the project_assignments_1005 table, grouped by role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) AS ActiveAssignments FROM project_assignments_1005 WHERE StartDate <= CURRENT_TIMESTAMP AND (EndDate >= CURRENT_TIMESTAMP OR EndDate IS NULL) GROUP BY ProjectName; ","""Retrieve the names of projects and the count of active assignments for each project where the start date is on or before the current timestamp and either the end date is on or after the current timestamp or the end date is not specified, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName LIKE '%Release%'; ","""Retrieve the Employee IDs and their roles from the project_assignments_1005 table where the project name includes the word 'Release'."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT ProjectName, COUNT(*) AS OngoingProjects FROM project_assignments_1005 WHERE EndDate IS NULL GROUP BY ProjectName; ","""Retrieve the names of projects and the count of ongoing projects for each project, where the end date is not specified, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > (SELECT AVG(ProjectCount) FROM (SELECT COUNT(*) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID) AS Subquery); ","""Select the EmployeeIDs from the project_assignments_1005 table for employees who have been assigned to more projects than the average number of projects assigned to employees, grouping by EmployeeID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT COUNT(*) AS TotalAssignments FROM project_assignments_1005 WHERE EndDate < CURRENT_TIMESTAMP; ","""Count the total number of assignments from the project_assignments_1005 table where the EndDate is earlier than the current timestamp."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",,"""Retrieve all project assignments including their assignment IDs, employee IDs, project names, start dates, end dates, and roles from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT p.ProjectName, COUNT(*) AS NumberOfEmployees FROM project_assignments_1005 p GROUP BY p.ProjectName; ","""Retrieve the names of projects along with the number of employees assigned to each project, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, p.ProjectName FROM project_assignments_1005 p WHERE p.EndDate < CURRENT_TIMESTAMP; ","""Retrieve the Employee IDs and project names from the project_assignments_1005 table for projects that have ended before the current timestamp."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, AVG((julianday(p.EndDate) - julianday(p.StartDate))) AS AverageDuration FROM project_assignments_1005 p GROUP BY p.EmployeeID; ","""Calculate the average duration of project assignments for each employee by taking the difference between the end date and start date of each assignment, and group the results by employee ID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p1.ProjectName, p2.ProjectName FROM project_assignments_1005 p1 JOIN project_assignments_1005 p2 ON p1.EmployeeID = p2.EmployeeID WHERE p1.AssignmentID <> p2.AssignmentID; ","""Select the names of two different projects from the project_assignments_1005 table that have been assigned to the same employee, ensuring that the assignments have different IDs."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.ProjectName FROM project_assignments_1005 p WHERE p.Role = 'Manager' AND p.StartDate >= '2022-01-01'; ","""Retrieve the names of projects from the project_assignments_1005 table where the role is 'Manager' and the start date is on or after January 1, 2022."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, p.Role, COUNT(*) AS AssignmentCount FROM project_assignments_1005 p GROUP BY p.EmployeeID, p.Role HAVING COUNT(*) > 3; ","""Retrieve the Employee IDs and roles of employees who have been assigned to more than 3 projects, grouping the results by Employee ID and role."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.ProjectName, SUM(CASE WHEN p.Role = 'Developer' THEN 1 ELSE 0 END) AS CountDevelopers FROM project_assignments_1005 p GROUP BY p.ProjectName; ","""Retrieve the names of projects and the total count of developers assigned to each project from the project_assignments_1005 table, grouping the results by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, MAX(p.EndDate) AS LastProjectDate FROM project_assignments_1005 p GROUP BY p.EmployeeID HAVING LastProjectDate < '2022-01-01'; ","""Retrieve the EmployeeID and the maximum EndDate of project assignments for each employee, grouped by EmployeeID, where the maximum EndDate is earlier than January 1, 2022."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ActiveAssignments FROM project_assignments_1005 p WHERE p.StartDate <= CURRENT_TIMESTAMP AND (p.EndDate IS NULL OR p.EndDate > CURRENT_TIMESTAMP) GROUP BY EmployeeID; ","""Count the number of active project assignments for each employee, where the start date of the assignment is on or before the current date and either the end date is not specified or the end date is after the current date."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, AVG(julianday(p.EndDate) - julianday(p.StartDate)) AS AvgProjectLength FROM project_assignments_1005 p WHERE p.EndDate IS NOT NULL GROUP BY p.EmployeeID; ","""Retrieve the Employee IDs and the average length of projects assigned to each employee, in days, from the project_assignments_1005 table, where the end date of the projects is not null, and group the results by Employee ID."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT DISTINCT p.Role FROM project_assignments_1005 p WHERE p.ProjectName LIKE '%Alpha%'; ","""Retrieve the distinct roles of employees who have assignments on projects with names containing 'Alpha' from the project_assignments_1005 table."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p1.ProjectName, COUNT(p2.EmployeeID) AS Collaborators FROM project_assignments_1005 p1 JOIN project_assignments_1005 p2 ON p1.ProjectName = p2.ProjectName WHERE p1.EmployeeID <> p2.EmployeeID GROUP BY p1.ProjectName; ","""Retrieve the names of projects and the count of employees collaborating on each project, excluding the employee assigned to the project, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 p WHERE p.Role = 'Tester' GROUP BY p.ProjectName HAVING TotalAssignments > 5; ","""Retrieve the names of projects and the total number of assignments for each project where the role assigned is 'Tester', and only include projects that have more than 5 assignments."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS TotalAssignments FROM project_assignments_1005 p GROUP BY EmployeeID ORDER BY TotalAssignments DESC LIMIT 5; ","""Select the Employee IDs and count the total number of project assignments for each employee from the project_assignments_1005 table, grouped by Employee ID, and sorted by the total number of assignments in descending order, limiting the results to the top 5 employees."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.ProjectName, COUNT(p.EmployeeID) AS EmployeeCount FROM project_assignments_1005 p GROUP BY p.ProjectName HAVING EmployeeCount <= 2; ","""Retrieve the names of projects and the count of employees assigned to each project from the project_assignments_1005 table, grouped by project name, where the count of employees is less than or equal to 2."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, p.ProjectName FROM project_assignments_1005 p WHERE p.EndDate IS NULL; ","""Retrieve the Employee IDs and project names from the project_assignments_1005 table for projects that have not yet ended."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p1.EmployeeID FROM project_assignments_1005 p1 JOIN project_assignments_1005 p2 ON p1.ProjectName = p2.ProjectName WHERE p1.Role != p2.Role; ","""Select the EmployeeIDs of employees who have worked on the same project but hold different roles."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.ProjectName, MIN(p.StartDate) AS FirstStartDate FROM project_assignments_1005 p GROUP BY p.ProjectName; ","""Retrieve the names of projects and the earliest start date for each project from the project_assignments_1005 table, grouped by project name."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.EmployeeID, COUNT(*) AS AssignmentCount FROM project_assignments_1005 p WHERE p.StartDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.EmployeeID ORDER BY AssignmentCount DESC; ","""Retrieve the Employee IDs and the count of project assignments for each employee whose assignments started between January 1, 2022, and December 31, 2022, grouped by Employee ID, and sorted by the count of assignments in descending order."""
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
"," 
SELECT p.Role, COUNT(*) AS RoleCount FROM project_assignments_1005 p GROUP BY p.Role HAVING RoleCount > 2;","""Retrieve the roles of employees and the count of assignments for each role from the project_assignments_1005 table, grouping the results by role and including only those roles that have more than 2 assignments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001; ,"""Select all columns from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT * FROM employee_department_2002; ","""Select all records from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1; ","""Retrieve the names of departments from the department_2001 table where the DepartmentID is equal to 1."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2; ","""Retrieve the EmployeeIDs of employees who are associated with DepartmentID 2."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT * FROM department_2001 ORDER BY DepartmentName; ","""Retrieve all columns from the department_2001 table, sorted by the DepartmentName in ascending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DISTINCT DepartmentID FROM employee_department_2002; ","""Retrieve the distinct DepartmentIDs from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the employee IDs and department names for employees from the employee_department_2002 table, joining with the department_2001 table on the DepartmentID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.ManagerID FROM department_2001 d WHERE d.DepartmentName = 'Sales'; ","""Retrieve the ManagerID of the department named 'Sales' from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT COUNT(*) FROM employee_department_2002; ","""Count the total number of records in the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID, ed.DepartmentID FROM employee_department_2002 ed WHERE ed.StartDate > '2023-01-01'; ","""Retrieve the Employee IDs and Department IDs from the employee_department_2002 table for records where the Start Date is after January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(ed.EmployeeID) as EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees associated with each department from the department_2001 table, including departments with no employees, by performing a left join with the employee_department_2002 table, and group the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.StartDate, ed.EndDate FROM employee_department_2002 ed WHERE ed.EmployeeID = 3; ","""Retrieve the start and end dates of employment from the employee_department_2002 table for the employee with an ID of 3."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.DepartmentID FROM employee_department_2002 e GROUP BY e.DepartmentID HAVING COUNT(e.EmployeeID) > 5; ","""Retrieve the DepartmentIDs from the employee_department_2002 table, grouping by DepartmentID, where the count of EmployeeIDs in each group is greater than 5."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EmployeeID IS NULL; ","""Retrieve the names of departments and the Employee IDs for employees that are not associated with any department, using a left join between the department_2001 table and employee_department_2002 table, where the Employee IDs in employee_department_2002 are null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT * FROM employee_department_2002 WHERE EndDate IS NULL; ","""Retrieve all records from the employee_department_2002 table where the EndDate is null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE d.ManagerID = 1; ","""Retrieve the names of departments and the employee IDs of employees associated with those departments where the manager of the department has an ID of 1."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.StartDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Retrieve the EmployeeIDs of employees who had a start date between January 1, 2023, and December 31, 2023, from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DISTINCT ManagerID FROM department_2001; ","""Retrieve the distinct ManagerIDs from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT COUNT(e.DepartmentID) as TotalDepartments FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID; ","""Count the total number of departments from the department_2001 table by joining it with the employee_department_2002 table on the DepartmentID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentName FROM department_2001 WHERE DepartmentID IN (SELECT DepartmentID FROM employee_department_2002 WHERE EmployeeID = 2); ","""Retrieve the names of departments where the DepartmentID corresponds to those of employees who have an EmployeeID of 2."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
", ,"""Select the DepartmentID and DepartmentName from the department_2001 table where the ManagerID is not null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001; ,"""Retrieve all records from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT * FROM employee_department_2002; ","""Retrieve all records from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1; ","""Retrieve the name of the department where the DepartmentID is equal to 1 from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE StartDate < '2023-01-01'; ","""Retrieve the Employee IDs and Department IDs from the employee_department_2002 table for records where the Start Date is earlier than January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DISTINCT DepartmentName FROM department_2001; ","""Retrieve the distinct names of departments from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ManagerID FROM department_2001 WHERE DepartmentName = 'Sales'; ","""Retrieve the ManagerID of the department where the DepartmentName is 'Sales' from the department_2001 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the employee IDs and corresponding department names by joining the employee_department_2002 table with the department_2001 table based on matching DepartmentIDs."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT COUNT(*) AS TotalEmployees FROM employee_department_2002; ","""Count the total number of employees from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentName, COUNT(EmployeeID) FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the count of employees associated with each department, using a left join between the department_2001 table and the employee_department_2002 table, grouped by department names."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentID, AVG(EmployeeID) FROM employee_department_2002 GROUP BY DepartmentID; ","""Calculate the average EmployeeID for each DepartmentID from the employee_department_2002 table, grouping the results by DepartmentID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID FROM employee_department_2002 e WHERE EndDate IS NULL; ","""Retrieve the EmployeeIDs of employees from the employee_department_2002 table whose EndDate is null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.StartDate > '2023-02-01'; ","""Retrieve the names of departments and the employee IDs of employees who started in their department after February 1, 2023, by joining the department and employee_department tables."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2 AND StartDate >= '2022-01-01'; ","""Retrieve the EmployeeIDs of employees who are part of department 2 and have a start date on or after January 1, 2022."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentID, MAX(StartDate) FROM employee_department_2002 GROUP BY DepartmentID; ","""Select the DepartmentID and the maximum StartDate from the employee_department_2002 table, grouping the results by DepartmentID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentID, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EmployeeID IS NULL; ","""Select the DepartmentID from the department table and the EmployeeID from the employee_department table for those departments that do not have any employees associated with them."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ManagerID, COUNT(*) FROM department_2001 GROUP BY ManagerID; ","""Retrieve the ManagerIDs from the department_2001 table and count the number of departments managed by each ManagerID, grouping the results by ManagerID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.DepartmentID FROM employee_department_2002 e ORDER BY StartDate; ","""Retrieve the employee IDs and department IDs from the employee_department_2002 table, sorted by the start date."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT EmployeeID, DepartmentID FROM employee_department_2002 WHERE StartDate BETWEEN '2022-01-01' AND '2022-12-31'; ","""Select the Employee IDs and Department IDs from the employee_department_2002 table where the Start Date is between January 1, 2022, and December 31, 2022."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT COUNT(*) FROM employee_department_2002 WHERE EndDate >= '2023-01-01'; ","""Count the total number of employee records in the employee_department_2002 table where the EndDate is on or after January 1, 2023."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","""Retrieve the names of departments and the total count of employees in each department by joining the department_2001 table with the employee_department_2002 table, grouping the results by department names."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, COUNT(*) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the total number of employees in each department by joining the employee_department_2002 table with the department_2001 table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE d.ManagerID IS NOT NULL; ","""Retrieve the Employee IDs and department names of employees from the employee_department_2002 table who are associated with departments in the department_2001 table that have a manager assigned."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the latest start date of employees in each department from the employee_department_2002 table, joined with the department_2001 table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID, ed.DepartmentID FROM employee_department_2002 ed WHERE ed.EndDate IS NULL; ","""Select the Employee IDs and Department IDs from the employee_department_2002 table where the EndDate is NULL."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName FROM department_2001 d WHERE d.ManagerID IN (SELECT EmployeeID FROM employee_1001 WHERE EmployeeID IS NOT NULL); ","""Retrieve the names of departments for which the ManagerID is listed among the EmployeeIDs from the employee_1001 table, ensuring that the EmployeeIDs are not null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, COUNT(ed.DepartmentID) AS DepartmentCount FROM employee_department_2002 ed JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 1; ","""Retrieve the Employee IDs and the count of departments for each employee from the employee_department_2002 table, joining with the employee_1001 table, grouping the results by Employee ID, and only include employees who are associated with more than one department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName ASC; ","""Retrieve the Employee IDs and Department names by joining the employee table with the employee_department table and the department table, and sort the results by Department name in ascending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT COUNT(DISTINCT ed.EmployeeID) AS UniqueEmployees FROM employee_department_2002 ed WHERE ed.StartDate >= '2023-01-01'; ","""Count the distinct number of employees who have a recorded start date on or after January 1, 2023, from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, ed.StartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate < '2023-01-01' ORDER BY ed.EndDate DESC; ","""Select the names of departments and the start dates of employees from the employee_department_2002 table, joined with the department_2001 table on DepartmentID, where the end dates are before January 1, 2023, and sort the results by end dates in descending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'; ","""Retrieve the first names and last names of employees who work in departments with names that start with 'Sales', along with the respective department names, by joining the employee table with the employee-department association table and the department table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentID, COUNT(ed.EmployeeID) AS TotalEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentID ORDER BY TotalEmployees DESC; ","""Retrieve the Department IDs and the total number of employees in each department, by counting the Employee IDs, from the department_2001 table while performing a left join with the employee_department_2002 table based on the Department IDs, grouping the results by Department ID, and sorting the total number of employees in descending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_department_2002); ","""Select the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who are not associated with any department in the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentID, MIN(StartDate) AS FirstStartDate FROM employee_department_2002 GROUP BY DepartmentID; ","""Retrieve the Department IDs and the earliest Start Date for each department from the employee_department_2002 table, grouping the results by Department ID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID, COUNT(*) AS ActiveDepartments FROM employee_department_2002 ed WHERE ed.EndDate IS NULL GROUP BY ed.EmployeeID HAVING COUNT(*) > 1; ","""Retrieve the Employee IDs and the count of active departments for each employee from the employee_department_2002 table where the EndDate is null, grouped by Employee ID, and include only those with more than one active department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS CurrentEmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID AND ed.EndDate IS NULL GROUP BY d.DepartmentName; ","""Select the names of departments and count the number of current employees in each department from the department_2001 table, by performing a left join with the employee_department_2002 table on the DepartmentID where the EndDate is null, and group the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, AVG(strftime('%Y', 'now') - strftime('%Y', ed.StartDate)) AS AvgYearsInDepartment FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the average number of years employees have been in those departments, calculated by taking the difference between the current year and the start year from the employee_department_2002 table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID, e.FirstName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate BETWEEN '2022-01-01' AND '2022-12-31'; ","""Retrieve the names of departments, along with the employee IDs and first names of employees who have been assigned to those departments, for assignments that started between January 1, 2022, and December 31, 2022."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT SUM(CASE WHEN ed.EndDate IS NULL THEN 1 ELSE 0 END) AS ActiveEmployees, SUM(CASE WHEN ed.EndDate IS NOT NULL THEN 1 ELSE 0 END) AS InactiveEmployees FROM employee_department_2002 ed; ","""Calculate the total number of active employees, defined as those with a null EndDate, and the total number of inactive employees, defined as those with a non-null EndDate, from the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID ORDER BY d.DepartmentName, e.LastName; ","""Retrieve the names of departments along with the first and last names of employees who are associated with those departments, by joining the department_2001 table with the employee_department_2002 table and the employee_1001 table, and sort the results first by department names and then by last names of the employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",,"""Retrieve the DepartmentID and DepartmentName from the department_2001 table where the ManagerID is not null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, COUNT(*) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the count of employees in each department by joining the employee department table with the department table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE d.ManagerID IS NOT NULL; ","""Retrieve the names of departments and the employee IDs of employees who are associated with those departments, ensuring that the departments have a manager assigned."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT DepartmentName FROM department_2001 WHERE ManagerID = (SELECT EmployeeID FROM employee_1001 WHERE LastName = 'Smith'); ","""Retrieve the names of departments managed by the employee whose last name is 'Smith'."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, MIN(ed.StartDate) AS FirstJoiningDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the earliest start date for employees in each department from the employee_department_2002 table, joined with the department_2001 table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, ed.StartDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NULL ORDER BY ed.StartDate; ","""Retrieve the Employee IDs, first names, last names, and start dates of employees from the employee table who are currently in a department, as indicated by having no end date in the employee_department table, and sort the results by the start date."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS ActiveEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID AND ed.EndDate IS NULL LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of active employees in those departments, where an employee is considered active if their end date in the employee_department_2002 table is null, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate < '2023-01-01' AND (ed.EndDate IS NULL OR ed.EndDate > '2023-01-01'); ","""Retrieve the Employee IDs and Department Names of employees who started in their department before January 1, 2023, and either do not have an End Date or have an End Date after January 1, 2023, by joining the employee_department_2002 table with the department_2001 table based on the Department IDs."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 5; ","""Retrieve the names of departments and the count of employees in each department from the department_2001 table, joined with the employee_department_2002 table, grouped by department names, and include only those departments that have more than 5 employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName, e.LastName; ","""Retrieve the first names and last names of employees along with their department names by joining the employee table with the employee_department table and the department table, and sort the results by department name and last name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, AVG(ded.EmployeeCount) AS AverageEmployees FROM (SELECT DepartmentID, COUNT(EmployeeID) AS EmployeeCount FROM employee_department_2002 GROUP BY DepartmentID) AS ded JOIN department_2001 d ON ded.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the average number of employees in each department by first counting the number of employees in each department from the employee_department_2002 table, then grouping these counts by department, and finally joining this information with the department_2001 table to associate department names, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, ed.StartDate, ed.EndDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID WHERE ed.EndDate IS NULL AND e.DateOfBirth < '1990-01-01'; ","""Retrieve the Employee IDs, start dates, and end dates of employees who are currently active (with no end date) and were born before January 1, 1990, by joining the employee and employee_department tables."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID LEFT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE d.DepartmentName IS NULL; ","""Retrieve the first and last names of employees who are not associated with any department by checking for employees whose department name is not listed in the department information."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS NumberOfEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate < '2023-01-01' GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees who have completed their employment in those departments before January 1, 2023, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(DISTINCT ed.EmployeeID) AS TotalEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate >= '2020-01-01' GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the total number of distinct employees assigned to each department since January 1, 2020, by joining the department data with employee assignment records, and group the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the latest start date of employees in each department, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT ed.EmployeeID, COUNT(*) AS DepartmentCount FROM employee_department_2002 ed GROUP BY ed.EmployeeID HAVING COUNT(*) > 1; ","""Retrieve the EmployeeIDs of employees who are associated with more than one department, along with the count of departments for each employee."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName FROM department_2001 d WHERE d.ManagerID IN (SELECT EmployeeID FROM employee_1001 WHERE HireDate > '2020-01-01'); ","""Select the names of departments that have a manager whose hire date is after January 1, 2020."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_department_2002 WHERE EndDate IS NOT NULL); ","""Retrieve the first and last names of employees from the employee_1001 table whose EmployeeID is associated with records in the employee_department_2002 table where the EndDate is not null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",,"""Select the DepartmentID and DepartmentName from the department_2001 table, joining with the employee_department_2002 table, where the EmployeeID in employee_department_2002 matches the EmployeeID in employee_1001."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS NumberOfEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 5; ","""Retrieve the names of departments and the count of employees in each department from the department_2001 table, joining with the employee_department_2002 table, grouping by department names, and including only those departments that have more than 5 employees."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE d.ManagerID IS NOT NULL; ","""Retrieve the names of departments and their corresponding employee IDs from the department_2001 table, joining with employee_department_2002 and employee_1001 tables, where the departments have a manager assigned."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID LEFT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate IS NULL; ","""Select the EmployeeID, FirstName, and LastName of employees, along with the DepartmentName from the department they belong to, by performing a left join between the employee_1001 table and the employee_department_2002 table on EmployeeID, and another left join with the department_2001 table on DepartmentID, while only including those employees who currently do not have an EndDate assigned in the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, SUM(CASE WHEN ed.EndDate IS NOT NULL THEN 1 ELSE 0 END) AS ActiveEmployees FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of active employees in each department, where an active employee is defined as having a non-null EndDate, from the department_2001 table and the employee_department_2002 table, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.EndDate IS NULL); ","""Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who are not currently assigned to any department, as indicated by the absence of a null EndDate in the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, MAX(ed.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the latest start date of employees in each department by joining the department_2001 and employee_department_2002 tables, grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, COUNT(ed.DepartmentID) AS DepartmentCount FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 2; ","""Retrieve the Employee IDs and the count of departments for each employee from the employee_1001 table who are associated with more than 2 departments, grouping the results by Employee ID."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, d.ManagerID FROM department_2001 d WHERE d.ManagerID IN (SELECT e.EmployeeID FROM employee_1001 e WHERE e.ManagerID IS NULL); ","""Retrieve the names and manager IDs of departments where the manager does not have a manager, by selecting from the department_2001 table and filtering based on employee IDs from the employee_1001 table where the manager ID is NULL."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.StartDate < '2022-01-01'; ","""Retrieve the names of departments along with the first and last names of employees who were assigned to those departments before January 1, 2022, by joining the department information with employee assignments."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(ed.DepartmentID) AS TotalDepartments FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ed.DepartmentID) > 1; ","""Select the EmployeeID, first name, and last name of employees, along with the total number of departments they have been associated with, from the employee_1001 table. Include all employees, even those not associated with any departments. Group the results by EmployeeID and only include those employees who are associated with more than one department."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID LEFT JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC; ","""Retrieve the names of departments and the count of employees associated with each department, including departments with no employees, grouped by department names and sorted by the employee count in descending order."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, e.FirstName, e.LastName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.StartDate BETWEEN '2021-01-01' AND '2021-12-31'; ","""Select the names of departments, along with the first and last names of employees who were assigned to those departments, for employees whose assignment start date is between January 1, 2021, and December 31, 2021."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.StartDate <= '2020-01-01' AND ed.EndDate >= '2020-12-31'); ","""Retrieve the Employee IDs, first names, and last names of employees from the employee_1001 table who are not associated with any department in the employee_department_2002 table during the period from January 1, 2020, to December 31, 2020."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentID, COUNT(*) FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentID HAVING COUNT(*) > 3; ","""Retrieve the Department IDs and the count of employees for each department from the employee_department_2002 table, joined with the department_2001 table on the DepartmentID, grouped by Department ID, where the count of employees in each department is greater than 3."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE EXISTS (SELECT 1 FROM employee_department_2002 ed WHERE ed.EmployeeID = e.EmployeeID AND ed.EndDate IS NULL); ","""Retrieve the employee IDs, first names, and last names of employees from the employee_1001 table who are currently assigned to a department, indicated by the absence of an end date in the employee_department_2002 table."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(*) AS Total, AVG(ed.StartDate - ed.EndDate) AS AverageDuration FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments, the total number of employees in each department, and the average duration of employment for employees in each department by calculating the difference between the start date and end date, by joining the department_2001 table with the employee_department_2002 table and grouping the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, d.DepartmentName FROM employee_1001 e LEFT JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID LEFT JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL; ","""Select the EmployeeID and FirstName of employees who are not assigned to any department, along with the name of the department, by retrieving data from the employee_1001 table and performing left joins with the employee_department_2002 and department_2001 tables, where the DepartmentID in the department_2001 table is null."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COALESCE(e.FirstName, 'No Employees') AS ManagerName FROM department_2001 d LEFT JOIN employee_1001 e ON d.ManagerID = e.EmployeeID; ","""Select the names of departments along with the names of their managers from the department_2001 table, using a left join with the employee_1001 table to match the department's ManagerID with the EmployeeID, and if a department has no manager, display 'No Employees' as the manager's name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT SUM(CASE WHEN ed.EndDate IS NULL THEN 1 ELSE 0 END) AS ActiveCount, d.DepartmentName FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName; ","""Calculate the total number of active employees in each department, where an employee is considered active if their end date is not specified, by retrieving department names from the department_2001 table and joining with the employee_department_2002 table, and group the results by department name."""
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
"," 
SELECT d.DepartmentName, COUNT(*) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) > (SELECT AVG(EmployeeCount) FROM (SELECT COUNT(*) AS EmployeeCount FROM department_2001 d2 JOIN employee_department_2002 ed2 ON d2.DepartmentID = ed2.DepartmentID GROUP BY d2.DepartmentID) AS AvgDepartmentCount);","""Retrieve the names of departments and the count of employees in each department from the department_2001 table, joining with the employee_department_2002 table, grouping by department names, and only include departments where the count of employees is greater than the average number of employees per department."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003; ,"""Retrieve all columns of data from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_projects_2004; ","""Retrieve all records from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE ProjectID = 1; ","""Retrieve the name of the project from the project_2003 table where the ProjectID is equal to 1."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT StartDate, EndDate FROM project_2003 WHERE ProjectName = 'Project A'; ","""Retrieve the start and end dates of the project where the project name is 'Project A'."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Developer'; ","""Retrieve the EmployeeID and ProjectID of employees who have the role of 'Developer' from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID FROM employee_projects_2004 WHERE ProjectID = 2; ","""Retrieve the EmployeeIDs of employees assigned to ProjectID 2 from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT Role FROM employee_projects_2004; ","""Retrieve the distinct roles from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) FROM employee_projects_2004; ","""Count the total number of records in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 5; ","""Retrieve the Project IDs from the employee_projects_2004 table for the employee with an Employee ID of 5."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, StartDate FROM project_2003 ORDER BY StartDate; ","""Retrieve the names and start dates of all projects from the project_2003 table, sorted by the start date."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(EmployeeID) FROM employee_projects_2004 GROUP BY ProjectID; ","""Count the number of employees assigned to each project, grouping the results by ProjectID from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID FROM employee_projects_2004 WHERE AssignmentStart < '2023-01-01'; ","""Retrieve the Project IDs from employee_projects_2004 where the assignment start date is earlier than January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE EndDate > '2023-12-31'; ","""Retrieve the names of projects from the project_2003 table where the end date is later than December 31, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd IS NULL; ","""Retrieve the Employee IDs and their roles from the employee_projects_2004 table for assignments that have not yet ended."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, Role FROM employee_projects_2004 WHERE EmployeeID = 10; ","""Retrieve the Project IDs and roles of employees who are assigned to projects where the Employee ID is 10."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT StartDate FROM project_2003 WHERE ProjectID IN (SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 1); ","""Retrieve the start dates of projects from the project_2003 table for which the ProjectID is associated with EmployeeID 1 in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EndDate FROM project_2003 WHERE ProjectID = (SELECT ProjectID FROM employee_projects_2004 WHERE EmployeeID = 8 LIMIT 1); ","""Retrieve the end date of a project associated with the employee who has an ID of 8, by first identifying the project ID from the employee_projects_2004 table, limiting the results to one project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, COUNT(EmployeeID) FROM employee_projects_2004 JOIN project_2003 ON employee_projects_2004.ProjectID = project_2003.ProjectID GROUP BY ProjectName; ","""Retrieve the names of projects and the count of employees assigned to each project by joining the employee_projects_2004 table and the project_2003 table, and group the results by project name."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, MAX(AssignmentEnd) FROM employee_projects_2004 GROUP BY EmployeeID; ","""Retrieve the EmployeeID and the latest assignment end date for each employee from the employee_projects_2004 table, grouped by EmployeeID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE ProjectID NOT IN (SELECT ProjectID FROM employee_projects_2004); ","""Retrieve the names of projects from the project_2003 table that are not assigned to any employee in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, SUM(CASE WHEN Role = 'Manager' THEN 1 ELSE 0 END) AS ManagerCount FROM employee_projects_2004 GROUP BY EmployeeID; ","""Count the number of times each employee has the role of 'Manager' from the employee_projects_2004 table, grouping the results by EmployeeID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"Retrieve the ProjectID, ProjectName, StartDate, and EndDate from the project_2003 table."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003; ,"""Select all columns from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE StartDate >= '2023-01-01'; ","""Retrieve the names of projects that started on or after January 1, 2023, from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, StartDate FROM project_2003 ORDER BY StartDate; ","""Retrieve the names and start dates of projects from the project_2003 table, sorted by their start dates."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_projects_2004; ","""Retrieve all the records from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, Role FROM employee_projects_2004 WHERE Role = 'Manager'; ","""Retrieve the Employee IDs and roles of employees from the employee_projects_2004 table where the role is 'Manager'."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(EmployeeID) FROM employee_projects_2004 GROUP BY ProjectID; ","""Count the number of employees assigned to each project, grouped by project ID, from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT Role FROM employee_projects_2004; ","""Retrieve the distinct roles assigned to employees from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM project_2003 WHERE EndDate IS NULL; ","""Retrieve all records from the project_2003 table where the EndDate is not specified (i.e., is null)."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE ProjectID IN (1, 2, 3); ","""Retrieve the names of projects with ProjectID 1, 2, or 3 from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID; ","""Retrieve the employee IDs and project names for all projects that employees are assigned to, by joining the employee_projects_2004 table with the project_2003 table on the ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(*) AS TotalAssignments FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(*) > 5; ","""Select the ProjectID and the total number of assignments for each project from the employee_projects_2004 table, grouping the results by ProjectID, only including those projects that have more than 5 assignments."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd < CURRENT_TIMESTAMP; ","""Retrieve the Employee IDs and roles of employees from the employee_projects_2004 table whose assignment has ended before the current timestamp."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, COUNT(EmployeeID) AS EmployeeCount FROM project_2003 p LEFT JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID GROUP BY ProjectName; ","""Retrieve the names of projects and the count of employees assigned to each project, including projects that have no employees assigned, by counting employees from the employee_projects_2004 table and grouping the results by project names from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName FROM project_2003 WHERE StartDate < EndDate; ","""Retrieve the names of projects where the start date is earlier than the end date."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_projects_2004 WHERE AssignmentStart >= '2023-01-01' AND AssignmentEnd <= '2023-12-31'; ","""Retrieve all records from the employee_projects_2004 table where the assignment start date is on or after January 1, 2023, and the assignment end date is on or before December 31, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, e.Role FROM project_2003 p JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID WHERE e.EmployeeID = 1; ","""Retrieve the project names and roles of employees for a specific project assigned to employee with ID 1."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) FROM employee_projects_2004 WHERE AssignmentEnd IS NULL; ","""Count the number of records in the employee_projects_2004 table where the AssignmentEnd date is null."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID FROM employee_projects_2004 GROUP BY EmployeeID HAVING COUNT(ProjectID) > 2; ","""Retrieve the EmployeeID of employees who have been assigned to more than two projects, grouping the results by EmployeeID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, MAX(AssignmentEnd) FROM employee_projects_2004 GROUP BY ProjectID; ","""Retrieve the ProjectIDs and the maximum AssignmentEnd dates for each project from the employee_projects_2004 table, grouping the results by ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE p.StartDate < '2022-01-01'; ","""Retrieve the Employee IDs and Project Names of employees assigned to projects that started before January 1, 2022, by joining the employee_projects_2004 table with the project_2003 table on ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"""Select the ProjectID and ProjectName from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 ORDER BY StartDate; ","""Retrieve the Project IDs and names from the project_2003 table, sorted by the start date of the projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, ep.ProjectID, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2024-01-01'; ","""Retrieve the Employee IDs, Project IDs, and Roles of employees from the employee_projects_2004 table who are assigned to projects in the project_2003 table that started before January 1, 2024."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, COUNT(*) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY ProjectName; ","""Retrieve the names of projects and the total number of employees assigned to each project by joining the project_2003 and employee_projects_2004 tables, grouping the results by project name."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, COUNT(*) AS TotalProjects FROM employee_projects_2004 e GROUP BY e.EmployeeID HAVING COUNT(*) > 2; ","""Retrieve the Employee IDs and the total number of projects assigned to each employee from the employee_projects_2004 table, grouping the results by Employee ID, and only include those employees who are associated with more than 2 projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, MAX(EndDate) FROM employee_projects_2004 GROUP BY ProjectID; ","""Retrieve the Project IDs and the latest end dates for each project from the employee_projects_2004 table, grouped by Project ID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL; ","""Retrieve the employee IDs and project names of employees whose assignments have not ended, by joining the employee_projects_2004 table with the project_2003 table on the ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT Role FROM employee_projects_2004 WHERE AssignmentStart > '2023-01-01'; ","""Retrieve the distinct roles of employees from the employee_projects_2004 table where the assignment start date is later than January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, AVG(DATEDIFF(AssignmentEnd, AssignmentStart)) AS AverageAssignmentDuration FROM employee_projects_2004 GROUP BY ProjectID; ","""Calculate the average duration of assignments in days for each project by finding the difference between the assignment end and assignment start dates, grouped by project ID, from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, COUNT(ep.EmployeeID) AS AssignedEmployees FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName; ","""Retrieve the names of projects from the project_2003 table and count the number of employees assigned to each project from the employee_projects_2004 table, grouped by project names, including projects that have no assigned employees."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT EmployeeID) AS UniqueEmployees FROM employee_projects_2004 WHERE ProjectID = 1; ","""Count the number of distinct employees assigned to the project with ID 1 from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, p.ProjectName, ep.Role FROM employee_projects_2004 ep INNER JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < '2023-12-01' AND ep.AssignmentEnd IS NOT NULL; ","""Select the employee IDs, project names, and roles from the employee_projects_2004 table, joining with the project_2003 table on the ProjectID, where the assignment start date is before December 1, 2023, and the assignment end date is not null."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.Role, COUNT(*) AS RoleCount FROM employee_projects_2004 ep GROUP BY ep.Role HAVING COUNT(*) > 1; ","""Retrieve the roles of employees from the employee_projects_2004 table and count how many times each role appears, grouping the results by role, while only including roles that have a count greater than 1."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, p.StartDate FROM project_2003 p WHERE p.EndDate > CURRENT_TIMESTAMP ORDER BY p.StartDate ASC; ","""Retrieve the names and start dates of projects that have not yet ended, sorted by their start dates in ascending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE Role = 'Manager'; ","""Retrieve the Employee IDs and Project Names of employees who have the role of 'Manager', by joining the employee_projects_2004 table with the project_2003 table on their ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, SUM(DATEDIFF(AssignmentEnd, AssignmentStart)) AS TotalDaysAssigned FROM employee_projects_2004 GROUP BY EmployeeID HAVING TotalDaysAssigned > 30; ","""Retrieve the Employee IDs and the total number of days each employee has been assigned to projects, calculated by summing the differences between the assignment end and assignment start dates, from the employee_projects_2004 table, grouped by Employee ID, where the total days assigned is greater than 30."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.ProjectID IS NULL; ","""Select the Employee IDs and Project Names from the employee_projects_2004 table that have no corresponding ProjectID in the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(EmployeeID) AS NumberOfEmployees FROM employee_projects_2004 GROUP BY ProjectID HAVING COUNT(EmployeeID) >= 3; ","""Retrieve the Project IDs and count the number of employees assigned to each project from the employee_projects_2004 table, grouping the results by Project ID, and including only those projects that have three or more assigned employees."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart < p.StartDate; ","""Retrieve the names of projects and the roles of employees assigned to those projects, where the assignment start date of the employee is earlier than the start date of the project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT ProjectID) AS TotalProjectsAssigned FROM employee_projects_2004 WHERE AssignmentEnd < CURRENT_TIMESTAMP; ","""Count the number of distinct projects assigned to employees where the assignment end date is earlier than the current timestamp."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID ORDER BY ProjectCount DESC; ","""Retrieve the Employee IDs and the count of projects each employee is assigned to, grouping the results by Employee ID and sorting the counts in descending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName FROM project_2003 p WHERE EXISTS (SELECT * FROM employee_projects_2004 ep WHERE ep.ProjectID = p.ProjectID AND ep.Role = 'Developer'); ","""Retrieve the names of projects from the project_2003 table for which there are assignments in the employee_projects_2004 table where the role is 'Developer'."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"""Select the ProjectID and ProjectName from the project_2003 table where the StartDate is before the EndDate."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003 ORDER BY StartDate; ","""Retrieve the Project IDs and Project Names from the project_2003 table, sorted by the Start Dates of the projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT EmployeeID, Role FROM employee_projects_2004 WHERE AssignmentEnd IS NULL; ","""Retrieve the Employee IDs and roles of employees who have not yet ended their assignment in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, COUNT(*) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID, p.ProjectName HAVING COUNT(*) > 2; ","""Retrieve the names of projects and the count of employees assigned to each project from the project_2003 and employee_projects_2004 tables, grouping the results by project ID and project name, and including only those projects that have more than 2 employees assigned."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, ep.ProjectID FROM employee_projects_2004 ep WHERE ep.AssignmentStart < '2023-01-01' AND ep.AssignmentEnd > '2023-01-01'; ","""Select the Employee IDs and Project IDs of employees whose assignment start date is before January 1, 2023, and whose assignment end date is after January 1, 2023, from the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT Role FROM employee_projects_2004 ORDER BY Role; ","""Retrieve the distinct roles from the employee_projects_2004 table, sorted alphabetically by role."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(EmployeeID) AS AssignedEmployees FROM employee_projects_2004 GROUP BY ProjectID HAVING AssignedEmployees > 3; ","""Retrieve the Project IDs and the count of employees assigned to each project from the employee_projects_2004 table, grouping the results by Project ID, and include only those projects that have more than 3 assigned employees."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.AssignmentStart >= p.StartDate AND e.AssignmentStart <= p.EndDate; ","""Retrieve the Employee IDs and project names from the employee_projects_2004 table, joining with the project_2003 table where the assignment start date falls within the start and end dates of the corresponding projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, MIN(ep.AssignmentStart) AS FirstAssignment FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName; ","""Select the project names and the earliest assignment start dates for each project from the project_2003 table, joining it with the employee_projects_2004 table on ProjectID, and group the results by project name."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, e.Role, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.AssignmentEnd IS NOT NULL ORDER BY e.AssignmentEnd DESC; ","""Retrieve the Employee IDs, roles, and project names from the employee_projects_2004 table where the assignment end date is not null, and join this information with the project_2003 table on the ProjectID, sorting the results by the assignment end date in descending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectID, AVG(strftime('%Y', ep.AssignmentEnd) - strftime('%Y', ep.AssignmentStart)) AS AvgDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY p.ProjectID; ","""Retrieve the Project IDs and the average duration of assignments for employees on each project, calculated as the difference in years between the assignment start and end dates, by grouping the results by Project ID from the employee_projects_2004 table, while joining with the project_2003 table based on Project ID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectID, p.ProjectName FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.EmployeeID IS NULL; ","""Select the ProjectID and ProjectName of projects from the project_2003 table that have no associated employee assignments in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, COUNT(p.ProjectID) AS TotalProjects FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY ep.EmployeeID HAVING TotalProjects >= 1; ","""Select the Employee IDs and the total number of projects assigned to each employee from the employee_projects_2004 table, joining with the project_2003 table based on the ProjectID, grouping the results by EmployeeID, and including only those employees who are assigned to at least one project."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectID, COUNT(*) AS RoleCount FROM employee_projects_2004 GROUP BY ProjectID HAVING RoleCount > 1; ","""Count the number of roles assigned to each project and retrieve the Project IDs from the employee_projects_2004 table, grouping the results by Project ID, and only include those projects that have more than one role assigned."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_2003 GROUP BY ProjectName ORDER BY LatestEndDate DESC; ","""Retrieve the names of projects and the latest end date for each project from the project_2003 table, grouping the results by project name and sorting them by the latest end date in descending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep INNER JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < p.StartDate; ","""Retrieve the Employee IDs and Project Names for employees whose assignment start date is earlier than the start date of the corresponding projects, by joining the employee_projects_2004 table and the project_2003 table on the ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT ep.EmployeeID) FROM employee_projects_2004 ep WHERE EXISTS (SELECT 1 FROM project_2003 p WHERE ep.ProjectID = p.ProjectID AND p.StartDate > '2022-01-01'); ","""Count the distinct EmployeeIDs from the employee_projects_2004 table where there exists a corresponding ProjectID in the project_2003 table that has a StartDate after January 1, 2022."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, SUM(strftime('%Y', ep.AssignmentEnd) - strftime('%Y', ep.AssignmentStart)) AS TotalExperience FROM employee_projects_2004 ep GROUP BY ep.EmployeeID; ","""Retrieve the Employee IDs and the total years of experience calculated as the difference in years between the assignment start and assignment end dates for each employee, summing the experience for all projects they were assigned to, grouped by Employee ID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectID, (MAX(ep.AssignmentEnd) - MIN(ep.AssignmentStart)) AS TotalDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID GROUP BY p.ProjectID; ","""Retrieve the Project IDs and the total duration of assignments for each project, calculated as the difference between the maximum assignment end date and the minimum assignment start date, from the employee_projects_2004 table joined with the project_2003 table on ProjectID, grouped by Project ID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeesInProject FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING EmployeesInProject > 0;","""Retrieve the names of projects and the count of employees assigned to each project from the project_2003 table, including projects that may not have any employees assigned, while grouping the results by project names, and only include projects that have at least one employee assigned."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) > 5; ","""Retrieve the names of projects and the count of employees assigned to each project, grouping the results by project ID, and only including projects that have more than 5 employees assigned."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, p.ProjectName, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.EndDate < '2023-01-01' AND ep.AssignmentEnd IS NOT NULL; ","""Select the Employee IDs, project names, and roles from the employee_projects_2004 table, joining with the project_2003 table, for projects that ended before January 1, 2023, and where the assignment end date is not null."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectID, p.ProjectName FROM project_2003 p WHERE NOT EXISTS (SELECT 1 FROM employee_projects_2004 ep WHERE ep.ProjectID = p.ProjectID); ","""Retrieve the Project IDs and Project Names of projects from the project_2003 table that do not have any associated entries in the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, SUM(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) AS TotalDaysAssigned FROM employee_projects_2004 ep GROUP BY ep.EmployeeID ORDER BY TotalDaysAssigned DESC LIMIT 10; ","""Retrieve the Employee IDs and the total number of days each employee has been assigned to projects, calculated by the difference between the assignment start and end dates, grouped by Employee ID, sorted in descending order of total days assigned, and limited to the top 10 results."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT e.EmployeeID, COUNT(ep.ProjectID) AS ProjectsAssigned FROM employee_projects_2004 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) = (SELECT MAX(ProjectCount) FROM (SELECT COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID)); ","""Retrieve the Employee IDs of employees along with the count of projects they have been assigned to, from the employee_projects_2004 table, joining with the employee_1001 table, grouped by Employee ID, where the count of projects assigned to each employee is equal to the maximum number of projects assigned to any employee."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectName, MAX(ep.AssignmentEnd) AS LatestEndDate FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID ORDER BY LatestEndDate DESC; ","""Retrieve the names of projects and the latest assignment end date for each project, by finding the maximum assignment end date associated with each project, from the project_2003 table joined with the employee_projects_2004 table, grouped by project ID, and sorted by the latest end date in descending order."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart BETWEEN '2022-01-01' AND '2022-12-31'; ","""Retrieve the Employee IDs and Project Names of employees whose assignments started between January 1, 2022, and December 31, 2022, by left joining the employee_projects_2004 table with the project_2003 table on ProjectID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT COUNT(DISTINCT ep.ProjectID) AS UniqueProjectsAssigned, ep.Role FROM employee_projects_2004 ep GROUP BY ep.Role; ","""Count the distinct number of unique projects assigned to employees and list the roles associated with those assignments, grouping the results by role."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT e.EmployeeID, (SELECT COUNT(*) FROM employee_projects_2004 ep2 WHERE ep2.EmployeeID = e.EmployeeID) AS ProjectsCount FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_2004); ","""Retrieve the Employee IDs of employees who are not assigned to any projects, along with a count of the number of projects each employee is assigned to, where the count is based on the employee_projects_2004 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, AVG(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) AS AvgAssignmentDuration FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING AvgAssignmentDuration > 30; ","""Retrieve the Employee IDs and the average assignment duration of each employee from the employee_projects_2004 table, calculated as the difference in days between the assignment end date and assignment start date, grouped by Employee ID, where the average assignment duration is greater than 30 days."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectName, COUNT(ep.EmployeeID) AS NumberOfEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd IS NULL GROUP BY p.ProjectID; ","""Retrieve the names of projects and count the number of employees assigned to each project, where the assignment end date is not specified, by joining the project data from the project_2003 table with the employee assignment data from the employee_projects_2004 table, and group the results by the project ID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < '2022-01-01' AND ep.AssignmentEnd > '2023-01-01'; ","""Retrieve the employee IDs and project names from the employee_projects_2004 table joined with the project_2003 table, where the assignment start date is before January 1, 2022, and the assignment end date is after January 1, 2023."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, COUNT(*) AS ActiveProjects FROM employee_projects_2004 ep WHERE ep.AssignmentEnd IS NULL GROUP BY ep.EmployeeID HAVING ActiveProjects > 3; ","""Retrieve the Employee IDs and the count of active projects for each employee from the employee_projects_2004 table where the assignment end date is not specified, grouped by Employee ID, and only include those with more than 3 active projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeesAssigned FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart > '2022-01-01' GROUP BY p.ProjectID ORDER BY EmployeesAssigned DESC LIMIT 5; ","""Retrieve the names of projects and the count of employees assigned to each project that started their assignment after January 1, 2022, grouped by project ID, sorted by the number of employees assigned in descending order, and limit the results to the top 5 projects."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.Role, COUNT(ep.EmployeeID) AS RoleCount FROM employee_projects_2004 ep GROUP BY ep.Role HAVING RoleCount > (SELECT AVG(RoleCount) FROM (SELECT COUNT(EmployeeID) AS RoleCount FROM employee_projects_2004 GROUP BY Role)); ","""Retrieve the roles of employees and the count of employees for each role from the employee_projects_2004 table, grouping the results by role, where the count of employees in each role is greater than the average count of employees for all roles."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectID, p.ProjectName, COUNT(ep.EmployeeID) FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) > 0 ORDER BY p.ProjectName; ","""Retrieve the Project IDs and names from the project 2003 table, along with the count of employees assigned to each project, where there is at least one employee assigned, grouped by Project ID, and sorted by Project Name."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT ep.EmployeeID, SUM(CASE WHEN ep.AssignmentStart >= '2020-01-01' THEN 1 ELSE 0 END) AS RecentAssignments FROM employee_projects_2004 ep GROUP BY ep.EmployeeID; ","""Select the EmployeeID of employees and calculate the total number of recent assignments, defined as assignments that started on or after January 1, 2020, from the employee_projects_2004 table, grouping the results by EmployeeID."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT p.ProjectID, p.StartDate, p.EndDate FROM project_2003 p WHERE p.StartDate = (SELECT MIN(p2.StartDate) FROM project_2003 p2); ","""Retrieve the ProjectID, StartDate, and EndDate of the project that has the earliest StartDate from the project_2003 table."""
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","  
SELECT e.EmployeeID, COUNT(ep.ProjectID) AS ProjectCount FROM employee_1001 e RIGHT JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID LIMIT 5;","""Retrieve the Employee IDs and the count of projects assigned to each employee from the employee table, using a right join with the employee_projects table, grouping the results by Employee ID, and limit the results to 5 entries."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005; ,"""Retrieve all columns from the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT * FROM employee_performance_2006; ","""Retrieve all records from the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, EmployeeID, Rating FROM performance_review_2005 WHERE Rating >= 4; ","""Retrieve the ReviewID, EmployeeID, and Rating from the performance_review_2005 table for reviews where the Rating is greater than or equal to 4."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore > 3.5; ","""Retrieve the EmployeeID and ReviewID from the employee_performance_2006 table for records where the ReviewScore is greater than 3.5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT AVG(Rating) AS AverageRating FROM performance_review_2005; ","""Calculate the average rating from the performance review data in the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT ReviewerID FROM performance_review_2005; ","""Retrieve the distinct ReviewerIDs from the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY EmployeeID; ","""Count the number of performance reviews for each employee from the performance_review_2005 table, grouping the results by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID; ","""Select the EmployeeID and ReviewDate for each employee by joining the performance_review_2005 table with the employee_performance_2006 table on the ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT Rating, COUNT(*) FROM performance_review_2005 GROUP BY Rating; ","""Retrieve the ratings from the performance_review_2005 table and count how many times each rating occurs, grouping the results by rating."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, Comments FROM performance_review_2005 WHERE Comments IS NOT NULL; ","""Retrieve the ReviewID and Comments from the performance_review_2005 table where the Comments field is not null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.ReviewID FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE p.Rating < 3; ","""Select the EmployeeID and ReviewID from the employee_performance_2006 table, joining with the performance_review_2005 table on the ReviewID, where the Rating in the performance_review_2005 table is less than 3."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, MAX(ReviewScore) FROM employee_performance_2006 GROUP BY EmployeeID; ","""Retrieve the maximum review score for each employee from the employee_performance_2006 table, grouping the results by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT r.ReviewDate, e.ReviewScore FROM performance_review_2005 r LEFT JOIN employee_performance_2006 e ON r.ReviewID = e.ReviewID; ","""Select the review dates from the performance review for 2005 along with the corresponding review scores from the employee performance for 2006, by performing a left join on the ReviewID between the two tables."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, AVG(ReviewScore) FROM employee_performance_2006 GROUP BY EmployeeID HAVING AVG(ReviewScore) >= 4; ","""Retrieve the Employee IDs and the average review scores from the employee_performance_2006 table, grouped by Employee ID, where the average review score is greater than or equal to 4."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT EmployeeID FROM employee_performance_2006 WHERE ReviewScore BETWEEN 3 AND 5; ","""Retrieve the distinct EmployeeIDs from the employee_performance_2006 table where the ReviewScore is between 3 and 5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewID, p.Rating, e.ReviewScore FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE p.Rating = e.ReviewScore; ","""Select the ReviewID and Rating from the performance_review_2005 table and the ReviewScore from the employee_performance_2006 table, joining these tables on the ReviewID, where the Rating in the performance_review_2005 table is equal to the ReviewScore in the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewerID, COUNT(*) FROM performance_review_2005 GROUP BY ReviewerID ORDER BY COUNT(*) DESC; ","""Count the number of performance reviews conducted by each reviewer from the performance_review_2005 table, grouping the results by ReviewerID and sorting them in descending order based on the count."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT q.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 q ON p.ReviewID = q.ReviewID WHERE q.ReviewScore IS NOT NULL; ","""Retrieve the Employee IDs and review dates from the performance_review_2005 table for reviews that have a corresponding entry in the employee_performance_2006 table where the ReviewScore is not null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT Rating, COUNT(*) AS Count FROM performance_review_2005 GROUP BY Rating HAVING COUNT(*) > 1; ","""Retrieve the ratings from the performance review records for 2005, counting how many times each rating appears, while only including ratings that have more than one occurrence."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID FROM employee_performance_2006 WHERE ReviewScore < 2.5; ","""Retrieve the EmployeeIDs of employees from the employee_performance_2006 table who have a ReviewScore of less than 2.5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
", ,"""Select the EmployeeID and ReviewScore from the employee_performance_2006 table where the ReviewID corresponds to reviews in the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005; ,"""Retrieve all columns from the performance review table for the year 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT * FROM employee_performance_2006; ","""Retrieve all records from the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, EmployeeID FROM performance_review_2005 WHERE Rating >= 4.0; ","""Retrieve the Review IDs and Employee IDs from the performance_review_2005 table for reviews that have a rating of 4.0 or higher."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, ReviewScore FROM employee_performance_2006 WHERE ReviewScore < 3.0; ","""Retrieve the Employee IDs and review scores from the employee_performance_2006 table where the review scores are less than 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID; ","""Retrieve the Employee IDs and review dates from the performance_review_2005 table by joining it with the employee_performance_2006 table on the ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, COUNT(*) AS NumReviews FROM performance_review_2005 GROUP BY ReviewID; ","""Count the number of reviews for each review ID from the performance_review_2005 table, grouped by review ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID; ","""Calculate the average rating for each employee by their employee ID from the performance review data for the year 2005, grouping the results by employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewerID, COUNT(*) AS ReviewsGiven FROM performance_review_2005 p GROUP BY p.ReviewerID; ","""Count the number of reviews given by each reviewer, grouped by the reviewer ID, from the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewScore > 3.5; ","""Retrieve the Employee IDs and review dates of employees from the performance_review_2005 table who have a review score greater than 3.5, joining with the employee_performance_2006 table on the ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT Rating, COUNT(*) FROM performance_review_2005 GROUP BY Rating HAVING COUNT(*) > 5; ","""Retrieve the ratings from the performance review for the year 2005 and count how many times each rating appears, grouping the results by the rating, and include only those ratings that appear more than 5 times."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore IS NOT NULL; ","""Retrieve the EmployeeIDs and ReviewIDs from the employee_performance_2006 table where the ReviewScore is not null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.*, e.ReviewScore FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewScore > 4.0; ","""Select all columns from the performance review 2005 table and the review scores from the employee performance 2006 table for the reviews where the review score exceeds 4.0, joining the two tables on the ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT EmployeeID FROM performance_review_2005 WHERE Comments IS NOT NULL; ","""Select the distinct EmployeeIDs from the performance_review_2005 table where the Comments field is not null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, MAX(e.ReviewScore) AS MaxScore FROM employee_performance_2006 e GROUP BY e.EmployeeID; ","""Retrieve the maximum review score for each employee from the employee performance data for the year 2006, grouping the results by employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 e GROUP BY e.ReviewerID; ","""Retrieve the Reviewer IDs and the average ratings of performance reviews from the performance_review_2005 table, grouped by Reviewer ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID FROM employee_performance_2006 WHERE ReviewID IN (SELECT ReviewID FROM performance_review_2005 WHERE Rating = 5.0); ","""Retrieve the EmployeeIDs from the employee_performance_2006 table where the ReviewID corresponds to any ReviewID in the performance_review_2005 table that has a Rating of 5.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewID, SUM(e.ReviewScore) AS TotalScore FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID GROUP BY p.ReviewID; ","""Select the Review IDs from the performance_review_2005 table and calculate the total review score from the employee_performance_2006 table for each review, grouping the results by Review ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT r.ReviewerID, r.EmployeeID FROM performance_review_2005 r WHERE r.ReviewerID IN (SELECT EmployeeID FROM employee_performance_2006); ","""Select the ReviewerID and EmployeeID from the performance_review_2005 table where the ReviewerID is also listed as an EmployeeID in the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT COUNT(*) FROM employee_performance_2006 e WHERE e.ReviewScore BETWEEN 3.0 AND 4.0; ","""Count the number of employee performance reviews from the year 2006 where the review score is between 3.0 and 4.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewDate FROM performance_review_2005 p JOIN employee_performance_2006 e ON p.ReviewID = e.ReviewID WHERE e.ReviewID IS NOT NULL; ","""Select the Employee IDs and review dates from the performance_review_2005 table and the employee_performance_2006 table where the Review ID is not null, joining the two tables on the Review ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
", ,"""Select the ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, and Comments from the performance_review_2005 table and the ReviewScore from the employee_performance_2006 table, where the EmployeeID in employee_performance_2006 matches the EmployeeID in performance_review_2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID; ","""Calculate the average rating for each employee based on their performance reviews from the performance_review_2005 table, grouping the results by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewerID, COUNT(*) AS TotalReviews FROM performance_review_2005 GROUP BY ReviewerID HAVING COUNT(*) > 5; ","""Count the total number of reviews for each reviewer from the performance_review_2005 table and select the ReviewerID where the total number of reviews is greater than 5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewID, e.EmployeeID, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.Rating >= 4.0; ","""Select the Review IDs, Employee IDs, and Ratings from the performance review records for employees where the Ratings are 4.0 or higher."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, SUM(ep.ReviewScore) AS TotalScore FROM employee_performance_2006 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalScore DESC; ","""Retrieve the Employee IDs and the total review scores of employees from the employee_performance_2006 table, joining with the employee_1001 table, grouping the results by Employee ID, and sorting the total scores in descending order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewDate, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewDate ORDER BY ReviewDate DESC; ","""Retrieve the review dates and the average ratings from the performance review data for the year 2005, grouping the results by review date and sorting them in descending order by review date."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY EmployeeID; ","""Count the number of performance reviews for each employee from the performance_review_2005 table where the review date is between January 1, 2005, and December 31, 2005, grouping the results by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, pr.Rating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.ReviewDate = (SELECT MAX(ReviewDate) FROM performance_review_2005); ","""Retrieve the EmployeeID, first name, last name, and rating of employees from the employee_1001 table who have performance reviews in the performance_review_2005 table, where the review date is the most recent review date available."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewerID, AVG(pr.Rating) AS AverageReview FROM performance_review_2005 pr GROUP BY pr.ReviewerID HAVING AVG(pr.Rating) < 3.0; ","""Retrieve the Reviewer IDs and the average ratings from the performance_review_2005 table, grouping the results by Reviewer ID, and include only those reviewers who have an average rating of less than 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT EmployeeID, COUNT(DISTINCT ReviewID) AS UniqueReviews FROM employee_performance_2006 GROUP BY EmployeeID; ","""Count the number of distinct performance reviews for each employee by their EmployeeID from the employee_performance_2006 table, grouped by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, ep.ReviewScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ReviewScore IS NULL; ","""Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who do not have a corresponding ReviewScore in the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewID, pr.Comments FROM performance_review_2005 pr WHERE pr.Rating BETWEEN 3.5 AND 4.5 ORDER BY pr.ReviewDate; ","""Retrieve the Review IDs and comments from the performance review table for reviews that have a rating between 3.5 and 4.5, sorted by the review date."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) IS NOT NULL; ","""Select the Employee ID and the average review score from the employee table, while left joining with the employee performance table on Employee ID. Group the results by Employee ID and ensure that only those with a non-null average review score are included."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewerID, COUNT(pr.ReviewID) AS TotalReviews FROM performance_review_2005 pr WHERE pr.Rating < 2.5 GROUP BY pr.ReviewerID; ","""Retrieve the ReviewerIDs and the total count of reviews from the performance_review_2005 table where the rating is less than 2.5, grouped by ReviewerID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT DISTINCT e.EmployeeID, e.FirstName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM performance_review_2005 WHERE Rating >= 4.0); ","""Select the distinct Employee IDs and first names of employees from the employee_1001 table who have received a performance review with a rating of 4.0 or higher from the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewDate, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewDate ORDER BY ReviewCount DESC; ","""Retrieve the review dates and the count of reviews for each review date from the performance_review_2005 table, grouping the results by review date and sorting them in descending order based on the review count."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(pr.Rating) AS AverageRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING AVG(pr.Rating) >= 3.0; ","""Retrieve the Employee IDs, first names, and last names of employees along with their average performance review ratings from the year 2005, by joining the employee table with the performance review table, grouping the results by Employee ID, and only including those employees whose average rating is at least 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewerID, SUM(pr.Rating) AS TotalRating FROM performance_review_2005 pr WHERE pr.ReviewDate >= '2005-07-01' GROUP BY pr.ReviewerID; ","""Retrieve the Reviewer IDs and the total ratings from the performance review records for reviews conducted on or after July 1, 2005, grouped by Reviewer ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, MAX(ep.ReviewScore) AS HighestScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID ORDER BY HighestScore DESC; ","""Retrieve the Employee IDs and the highest review scores from the employee performance records, grouping the results by Employee ID, and sorting them in descending order based on the highest scores."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, COUNT(*) AS ScoreCount FROM employee_performance_2006 GROUP BY ReviewID HAVING COUNT(*) > 1; ","""Count the number of entries for each ReviewID in the employee_performance_2006 table, and retrieve only those ReviewIDs that have more than one associated entry."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.EmployeeID, pr.ReviewDate FROM performance_review_2005 pr JOIN employee_performance_2006 ep ON pr.ReviewID = ep.ReviewID WHERE ep.ReviewScore > 4.0; ","""Select the Employee IDs and Review Dates of employees from the performance_review_2005 table who have a ReviewScore greater than 4.0 in the employee_performance_2006 table, by joining the two tables on ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",,"""Retrieve the review IDs, employee IDs, review dates, reviewer IDs, ratings, and comments from the performance review data for 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID; ","""Retrieve the employee IDs and the average ratings from performance reviews in 2005, grouped by employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT ReviewID, ReviewerID, COUNT(*) AS CountComments FROM performance_review_2005 GROUP BY ReviewID, ReviewerID HAVING COUNT(*) > 5; ","""Select the Review IDs and Reviewer IDs from the performance_review_2005 table, counting the number of comments for each combination of Review ID and Reviewer ID, and only include those combinations where the count of comments is greater than 5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.Rating FROM performance_review_2005 e WHERE e.Rating > 4.5 ORDER BY e.ReviewDate DESC; ","""Retrieve the Employee IDs and ratings from the performance review table for entries where the rating is greater than 4.5, sorted by the review date in descending order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, p.ReviewScore FROM employee_performance_2006 p JOIN performance_review_2005 e ON p.ReviewID = e.ReviewID WHERE p.ReviewScore < 3.0; ","""Retrieve the Employee IDs and review scores of employees from the employee_performance_2006 table who have a review score less than 3.0, joining with the performance_review_2005 table based on the ReviewID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewID, e.Comments FROM performance_review_2005 e WHERE e.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31'; ","""Retrieve the Review IDs and comments from the performance review data for the year 2005, where the review dates are between January 1, 2005, and December 31, 2005."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, COUNT(p.ReviewID) AS TotalReviews FROM employee_performance_2006 p JOIN performance_review_2005 e ON p.ReviewID = e.ReviewID GROUP BY e.EmployeeID; ","""Count the total number of reviews for each employee by their EmployeeID by joining the employee_performance_2006 table with the performance_review_2005 table based on ReviewID and group the results by EmployeeID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewerID, AVG(e.Rating) AS AverageReviewerRating FROM performance_review_2005 e GROUP BY e.ReviewerID HAVING AVG(e.Rating) < 3.0; ","""Retrieve the Reviewer IDs and the average ratings given by each reviewer from the performance review table for the year 2005, grouping the results by Reviewer ID, and only include reviewers whose average rating is less than 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT COUNT(*) AS TotalReviews FROM performance_review_2005 WHERE ReviewerID IS NOT NULL; ","""Count the total number of reviews from the performance_review_2005 table where the ReviewerID is not null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.ReviewDate FROM performance_review_2005 e WHERE e.ReviewDate = (SELECT MAX(ReviewDate) FROM performance_review_2005); ","""Select the EmployeeID and ReviewDate of the performance reviews from the year 2005 where the ReviewDate is the most recent date available in the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.EmployeeID, AVG(p.ReviewScore) AS AverageScore FROM employee_performance_2006 p GROUP BY p.EmployeeID HAVING AVG(p.ReviewScore) >= 4.0; ","""Calculate the average review score for each employee from the employee performance records in 2006, including only those employees whose average review score is 4.0 or higher."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewerID, COUNT(*) FROM performance_review_2005 e GROUP BY e.ReviewerID ORDER BY COUNT(*) DESC; ","""Count the number of performance reviews for each reviewer from the performance_review_2005 table, grouping the results by reviewer ID and sorting them in descending order based on the count of reviews."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID FROM employee_performance_2006 e WHERE e.ReviewScore > (SELECT AVG(ReviewScore) FROM employee_performance_2006); ","""Select the Employee IDs from the employee_performance_2006 table where the ReviewScore is greater than the average ReviewScore from the same table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.ReviewerID, COUNT(e.ReviewID) AS NumReviews FROM performance_review_2005 e JOIN employee_performance_2006 p ON e.ReviewID = p.ReviewID GROUP BY p.ReviewerID; ","""Retrieve the ReviewerIDs of reviewers and the count of reviews associated with each reviewer from the performance_review_2005 table, joined with the employee_performance_2006 table on ReviewID, while grouping the results by ReviewerID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.EmployeeID, p.ReviewID FROM employee_performance_2006 p WHERE p.ReviewScore = (SELECT MIN(ReviewScore) FROM employee_performance_2006); ","""Select the EmployeeID and ReviewID of employees from the employee_performance_2006 table whose ReviewScore is equal to the minimum ReviewScore found in the employee_performance_2006 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.ReviewDate FROM performance_review_2005 e WHERE e.Rating > (SELECT AVG(Rating) FROM performance_review_2005); ","""Retrieve the Employee IDs and Review Dates from the performance_review_2005 table where the Ratings are greater than the average Rating from the same table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT p.EmployeeID, e.Rating FROM performance_review_2005 e JOIN employee_performance_2006 p ON e.ReviewID = p.ReviewID WHERE e.Comments IS NOT NULL; ","""Select the Employee IDs and Ratings from the performance review table for entries that have comments, joining with the employee performance table based on the Review IDs."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, COUNT(DISTINCT e.ReviewID) AS ReviewCount FROM employee_performance_2006 e GROUP BY e.EmployeeID HAVING ReviewCount > 1; ","""Count the number of distinct performance reviews for each employee in the employee_performance_2006 table, and retrieve the Employee IDs of those employees who have more than one performance review."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewerID, AVG(e.Rating) AS AvgRating FROM performance_review_2005 e GROUP BY e.ReviewerID ORDER BY AvgRating DESC; ","""Retrieve the Reviewer IDs and the average ratings from the performance_review_2005 table, grouped by Reviewer ID and sorted in descending order of the average ratings."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, MAX(e.ReviewDate) AS LastReviewDate FROM performance_review_2005 e GROUP BY e.EmployeeID; ","""Retrieve the Employee IDs and the maximum review dates for each employee from the performance_review_2005 table, grouped by Employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.ReviewerID, SUM(e.Rating) AS TotalRating FROM performance_review_2005 e GROUP BY e.ReviewerID HAVING TotalRating > 20; ","""Retrieve the Reviewer IDs and the total ratings from the performance review records, grouping the results by Reviewer ID, where the total ratings exceed 20."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",,"""Select the ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, and Comments from the performance_review_2005 table where the Rating is greater than or equal to 4.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.ReviewerID, AVG(pr.Rating) as AverageRating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID, e.ReviewerID HAVING AVG(pr.Rating) > 4.0; ","""Select the Employee IDs and Reviewer IDs from the employee_1001 table and calculate the average rating of performance reviews from the performance_review_2005 table, grouping the results by Employee ID and Reviewer ID, and only include those groups where the average rating is greater than 4.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewDate, e.EmployeeID, e.ReviewerID, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID WHERE pr.Rating < 3.0 ORDER BY pr.ReviewDate DESC; ","""Retrieve the review dates, employee IDs, and reviewer IDs along with the ratings of performance reviews from the year 2005 where the rating is less than 3.0, sorted by the review dates in descending order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, SUM(ep.ReviewScore) as TotalScore FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID GROUP BY e.EmployeeID HAVING SUM(ep.ReviewScore) > 10; ","""Retrieve the Employee IDs and the total review scores from the employee performance records for each employee, where the total review score exceeds 10, by joining the employee performance data from 2006 with the performance review data from 2005, and grouping the results by Employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(pr.ReviewID) as TotalReviews FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(pr.ReviewID) = 0; ","""Retrieve the first names and last names of employees who have not received any performance reviews in 2005, along with the total count of their reviews, by joining the employee table with the performance review table, grouping the results by employee ID."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e1.EmployeeID, e1.FirstName, e1.LastName, e2.ReviewerID, COUNT(pr.ReviewID) as ReviewCount FROM employee_1001 e1 JOIN performance_review_2005 pr ON e1.EmployeeID = pr.EmployeeID JOIN employee_1001 e2 ON pr.ReviewerID = e2.EmployeeID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName, e2.ReviewerID HAVING COUNT(pr.ReviewID) > 3; ","""Retrieve the Employee IDs, first names, last names, and Reviewer IDs of employees, along with the count of performance reviews conducted by each reviewer, from the employee table and the performance review table, grouped by Employee ID, first name, last name, and Reviewer ID, where the count of reviews is greater than 3."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewDate, AVG(pr.Rating) as AverageRating FROM performance_review_2005 pr WHERE pr.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY pr.ReviewDate ORDER BY pr.ReviewDate; ","""Retrieve the review dates and the average ratings from performance reviews conducted in the year 2005, grouped by review date and sorted in chronological order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(pr.Rating) as HighestRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING MAX(pr.Rating) > 4.5; ","""Retrieve the Employee IDs, first names, and last names of employees along with their highest performance review ratings from the performance review data, grouping the results by Employee ID, first name, and last name, and only include those employees whose highest rating exceeds 4.5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, COUNT(ep.ReviewScore) as TotalPerformanceReviews FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ReviewScore) < 2; ","""Count the total number of performance reviews for each employee from the employee table, selecting only those employees who have fewer than 2 performance reviews based on the employee performance table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, AVG(ep.ReviewScore) as AverageScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) > 3.5; ","""Select the Employee IDs and the average review scores from the employee_1001 table, joining with the employee_performance_2006 table on EmployeeID, grouping the results by Employee ID, and only including those with an average review score greater than 3.5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(pr.ReviewID) as ReviewCount FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING ReviewCount > 5 ORDER BY ReviewCount DESC; ","""Retrieve the Employee IDs, first names, and last names of employees who have more than 5 performance reviews, counting the total number of reviews for each employee, by joining the employee table with the performance review table, and sort the results by the number of reviews in descending order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewerID, e.FirstName, e.LastName, COUNT(pr.ReviewID) as ReviewsGiven FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID GROUP BY pr.ReviewerID, e.FirstName, e.LastName HAVING COUNT(pr.ReviewID) > 10; ","""Retrieve the IDs of reviewers, along with their first and last names, and the count of reviews they have given from the performance review table, where each reviewer has given more than 10 reviews, grouped by the reviewer's ID, first name, and last name."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, COUNT(DISTINCT pr.ReviewDate) as DistinctReviewDates FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING DistinctReviewDates > 1; ","""Select the EmployeeID and the count of distinct review dates for each employee from the employee_1001 table, joining with the performance_review_2005 table on EmployeeID, grouping the results by EmployeeID, and only include those employees who have more than one distinct review date."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e1.FirstName, e1.LastName, e2.FirstName as ReviewerFirstName, e2.LastName as ReviewerLastName FROM performance_review_2005 pr JOIN employee_1001 e1 ON pr.EmployeeID = e1.EmployeeID JOIN employee_1001 e2 ON pr.ReviewerID = e2.EmployeeID WHERE pr.Rating < 3.0; ","""Retrieve the first and last names of employees along with the first and last names of their reviewers from the performance review data, where the rating given in the review is less than 3.0."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT pr.ReviewDate, COUNT(pr.ReviewID) as CountReviews FROM performance_review_2005 pr GROUP BY pr.ReviewDate HAVING COUNT(pr.ReviewID) > 5 ORDER BY pr.ReviewDate; ","""Retrieve the review dates and the count of reviews for each review date from the performance_review_2005 table, grouping the results by review date, and include only those dates that have more than 5 reviews, sorted by review date."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM performance_review_2005 pr WHERE pr.EmployeeID = e.EmployeeID); ","""Retrieve the EmployeeID, FirstName, and LastName of employees from the employee_1001 table who do not have any corresponding records in the performance_review_2005 table."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT AVG(ep.ReviewScore) as AverageReviewScore FROM employee_performance_2006 ep WHERE ep.ReviewID IN (SELECT pr.ReviewID FROM performance_review_2005 pr WHERE pr.Rating >= 4.0); ","""Calculate the average review score from the employee performance data for reviews that have a rating of 4.0 or higher."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID IN (SELECT DISTINCT pr.ReviewerID FROM performance_review_2005 pr WHERE pr.Rating < 2.5); ","""Retrieve the Employee IDs, first names, and last names of employees who have served as reviewers and have given a performance review rating less than 2.5."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.FirstName, e.LastName, pr.ReviewDate FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.ReviewerID WHERE pr.ReviewDate > '2005-06-01' ORDER BY pr.ReviewDate DESC; ","""Select the first and last names of reviewers from the employee table who reviewed performance on or after June 1, 2005, along with the review dates, and sort the results by review date in descending order."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
"," 
SELECT e.EmployeeID, AVG(ep.ReviewScore) as AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) IS NULL; ","""Retrieve the EmployeeIDs of employees along with their average review scores from the employee table, performing a left join with the employee performance table on EmployeeID, grouping the results by EmployeeID, and filtering to only include employees whose average review score is null."""
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",,"""Select the ReviewID, EmployeeID, ReviewDate, ReviewerID, Rating, and Comments from the performance_review_2005 table and the ReviewScore from the employee_performance_2006 table for all employee performance reviews in 2005."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001; ,"""Retrieve all columns from the department_3001 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT * FROM employee_3002; ","""Retrieve all information about employees from the employee_3002 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT * FROM salary_history_3003; ","""Retrieve all records from the salary history, including all details available in the salary_history_3003 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName FROM employee_3002; ","""Retrieve the first and last names of all employees from the employee_3002 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentName FROM department_3001; ","""Retrieve the names of all departments from the department_3001 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM employee_3002 GROUP BY DepartmentID; ","""Count the number of employees for each department by retrieving the DepartmentID and the corresponding employee count from the employee_3002 table, and group the results by DepartmentID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName, JobTitle FROM employee_3002 WHERE Salary > 50000; ","""Retrieve the first names, last names, and job titles of employees who have a salary greater than 50,000 from the employee table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the first names and last names of employees along with the names of their respective departments by joining the employee and department tables on the DepartmentID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DISTINCT JobTitle FROM employee_3002; ","""Retrieve all distinct job titles from the employee table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName, Salary FROM employee_3002 ORDER BY Salary DESC; ","""Retrieve the first names, last names, and salaries of employees from the employee table, sorted by their salaries in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID; ","""Retrieve the first and last names of employees along with their salary amounts by joining the employee table with the salary history table based on the employee IDs."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID; ","""Select the first names and last names of employees along with their department names, retrieving data from the employee table and performing a left join with the department table on the DepartmentID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY DepartmentID; ","""Retrieve the Department IDs and the average salary of employees for each department, grouped by Department ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IS NULL; ","""Select the first and last names of employees who do not belong to any department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT AVG(Salary) FROM employee_3002); ","""Retrieve the first and last names of employees whose salary is less than the average salary of all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT COUNT(*) AS TotalEmployees FROM employee_3002 WHERE JobTitle = 'Manager'; ","""Count the total number of employees in the employee table who have the job title of 'Manager'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS NumberOfEmployees FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID; ","""Retrieve the names of departments and the count of employees in each department, including departments with no employees, grouping the results by department ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e INNER JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01'; ","""Retrieve the first names and last names of employees along with the effective dates of their salaries from the employee table and the salary history table, where the effective date of the salary is after January 1, 2023."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e FULL OUTER JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID; ","""Select the first names and last names of employees alongside their salary amounts from the employee table and the salary history table, using a full outer join on the employee ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.DepartmentID, MIN(e.Salary) AS MinSalary FROM employee_3002 e GROUP BY e.DepartmentID; ","""Retrieve the DepartmentID and the minimum salary of employees for each department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
", ,"""Select the first and last names of employees, along with their job titles and salaries, from the employee table, where their salaries are greater than 70000, and sort the results in ascending order by job title."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001; ,"""Retrieve all records from the department_3001 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT * FROM employee_3002; ","""Retrieve all information for all employees from the employee table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT * FROM salary_history_3003; ","""Retrieve all records from the salary history table, including every column available."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 50000; ","""Retrieve the first and last names of employees who have a salary greater than 50,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1; ","""Retrieve the name of the department with an ID of 1 from the department_3001 table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName, JobTitle FROM employee_3002 WHERE DepartmentID = 2; ","""Retrieve the first names, last names, and job titles of employees who belong to department 2."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the first and last names of employees along with the names of their respective departments by joining the employee and department tables based on the DepartmentID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT COUNT(*) FROM employee_3002 WHERE DepartmentID = 3; ","""Count the number of employees in department 3."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees in each department, using a left join between the department and employee tables, grouped by department names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName FROM employee_3002 WHERE JobTitle LIKE '%Manager%'; ","""Retrieve the first and last names of employees who have a job title that includes 'Manager'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01'; ","""Retrieve the first names and last names of employees along with their salary amounts from the employee table and the salary history table for records where the effective date of the salary is after January 1, 2023."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DISTINCT JobTitle FROM employee_3002; ","""Retrieve the distinct job titles from the employee table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e ORDER BY e.Salary DESC; ","""Retrieve the first names, last names, and salaries of all employees, sorted by their salaries in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentID, AVG(Salary) as AverageSalary FROM employee_3002 GROUP BY DepartmentID; ","""Retrieve the Department IDs and average salaries of employees from the employee table, grouped by Department ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary = (SELECT MAX(Salary) FROM employee_3002); ","""Retrieve the first and last names of employees who have the highest salary in the employee table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'; ","""Retrieve the first names and last names of employees along with the names of their departments from the employee table and the department table, where the department name starts with 'Sales'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 1; ","""Retrieve the first and last names of employees who have more than one entry in the salary history, counting the number of salary entries for each employee, by joining the employee table with the salary history table and grouping the results by employee."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the first and last names of employees along with their maximum salary amount from the salary history, grouping the results by each employee's ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000; ","""Retrieve the first names and last names of employees who have a salary amount greater than 60,000 from the employee table joined with the salary history table based on their employee IDs."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentName, SUM(e.Salary) as TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","""Retrieve the names of departments and the total salary of employees in each department by summing their salaries, grouping the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentName, COUNT(*) AS EmployeeCount FROM employee_3002 JOIN department_3001 ON employee_3002.DepartmentID = department_3001.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the total number of employees in each department by joining the employee and department tables, and group the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002); ","""Retrieve the first names, last names, and salaries of employees whose salaries are greater than the average salary of all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName; ","""Retrieve the first names and last names of employees along with their department names by joining the employee and department tables, and sort the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentID, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY DepartmentID HAVING AVG(Salary) > 50000; ","""Calculate the average salary of employees for each department and return the DepartmentID along with the AverageSalary, including only those departments where the average salary is greater than 50,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate >= '2023-01-01'; ","""Retrieve the first names and last names of employees along with their salary amounts from the employee table and salary history table for those whose salary history effective date is on or after January 1, 2023."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.JobTitle, COUNT(*) AS JobCount FROM employee_3002 e GROUP BY JobTitle; ","""Count the number of employees for each job title in the employee table and group the results by job title."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL; ","""Retrieve the first names and last names of employees who do not belong to any department, along with the names of those departments, by performing a left join between the employee and department tables where the DepartmentID from the department table is null."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.DepartmentID, SUM(s.SalaryAmount) AS TotalSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.DepartmentID; ","""Retrieve the DepartmentID and the total salary for each department by summing the SalaryAmount from the salary history of employees, grouping the results by DepartmentID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the highest salary of employees in each department, grouping the results by department names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT MIN(Salary) FROM employee_3002); ","""Retrieve the first and last names of employees whose salary is less than the minimum salary among all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e ORDER BY e.Salary DESC LIMIT 5; ","""Select the first and last names of employees from the employee table, sorted by their salary in descending order, and limit the results to the top 5 employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'; ","""Retrieve the first names and last names of employees along with their department names from the employee table joined with the department table, where the department names start with 'Sales'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT COUNT(*) AS EmployeeCount, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) < 5; ","""Count the number of employees in each department and retrieve the department names from the employee table and the department table, grouping the results by department name, and include only those departments that have fewer than 5 employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, MAX(s.SalaryAmount) AS LatestSalary FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the first names and last names of employees along with their highest salary recorded in the salary history, grouped by each employee's ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 70000); ","""Retrieve the first and last names of employees whose Employee IDs are found in the salary history where the salary amount exceeds 70,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, AVG(s.SalaryAmount) AS AverageSalary FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentName; ","""Select the names of departments and the average salary of employees in each department by joining the department table with the employee table and the salary history table, grouping the results by department names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.DepartmentID IN (SELECT DepartmentID FROM department_3001 WHERE DepartmentName = 'Marketing'); ","""Retrieve the first and last names of employees and their corresponding department names from the employee table, where the employees belong to the department named 'Marketing'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID = (SELECT EmployeeID FROM salary_history_3003 ORDER BY EffectiveDate DESC LIMIT 1); ","""Retrieve the first and last names of the employee whose EmployeeID corresponds to the most recent salary record in the salary history table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT SUM(Salary) AS TotalSalaries FROM employee_3002 WHERE DepartmentID IS NOT NULL; ","""Calculate the total salaries of employees whose department IDs are not null."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000 ORDER BY s.EffectiveDate DESC; ","""Retrieve the first and last names of employees along with the effective dates of their salary history where the salary amount is greater than 60,000, sorted by the effective dates in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",,"""Select the first names and last names of employees who work in the department with the DepartmentID of 5, along with their job titles, and sort the results by last name in ascending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentName, COUNT(*) AS TotalEmployees FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the total number of employees in each department by joining the employee and department tables, grouping the results by department names."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT FirstName, LastName, Salary FROM employee_3002 ORDER BY Salary DESC; ","""Retrieve the first and last names of employees along with their salaries, sorted by salary in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate > '2023-01-01'; ","""Retrieve the first and last names of employees along with their salary amounts from the employee table and salary history table, where the salary effective date is after January 1, 2023."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DepartmentName, AVG(Salary) AS AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY DepartmentName HAVING AVG(Salary) > 50000; ","""Retrieve the names of departments and the average salary of employees in those departments, where the average salary is greater than 50,000, by joining the employee and department tables, grouping the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryRecords FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 2; ","""Retrieve the first and last names of employees who have more than 2 salary records by counting the entries in the salary history, grouping by employee, and including all employees, even those without salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002); ","""Retrieve the first and last names of employees whose salaries are greater than the average salary of all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'; ","""Retrieve the first names and last names of employees along with the names of their departments, specifically for those departments whose names start with 'Sales'."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the highest salaries of employees in each department by joining the employee and department tables and grouping the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount < 40000); ","""Retrieve the first and last names of employees whose EmployeeID is in the list of EmployeeIDs from the salary history where the SalaryAmount is less than 40,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaries FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalaries DESC; ","""Retrieve the names of departments and the total salaries of employees in each department, grouping the results by department name and sorting them in descending order based on the total salaries."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE strftime('%Y-%m', s.EffectiveDate) = '2023-01'; ","""Retrieve the first names and last names of employees along with the effective dates from the salary history for employees whose salary information was effective in January 2023, by joining the employee and salary history tables on their employee IDs."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT DISTINCT JobTitle FROM employee_3002 WHERE JobTitle IS NOT NULL; ","""Retrieve the distinct job titles from the employee records, ensuring that only non-null job titles are included."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 70000) s ON e.EmployeeID = s.EmployeeID; ","""Retrieve the first and last names of employees whose salary history shows a salary amount greater than 70,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING EmployeeCount > 5; ","""Select the names of departments and count the distinct employees in each department from the employee table, joining with the department table, grouping the results by department names, and filtering to include only those departments that have more than 5 employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, (SELECT SUM(SalaryAmount) FROM salary_history_3003 s WHERE s.EmployeeID = e.EmployeeID) AS TotalSalaryHistory FROM employee_3002 e; ","""Retrieve the first and last names of all employees along with the total sum of their salary histories from the salary history table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName, e.Salary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName, e.Salary DESC; ","""Retrieve the first names and last names of employees, along with their department names and salaries, by joining the employee and department tables, and sort the results first by department name and then by employee salary in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e1.FirstName, e1.LastName FROM employee_3002 e1 WHERE e1.Salary > (SELECT AVG(e2.Salary) FROM employee_3002 e2 WHERE e2.DepartmentID = e1.DepartmentID); ","""Select the first and last names of employees whose salaries are greater than the average salary of their respective departments."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IS NULL; ","""Retrieve the first and last names of employees who do not belong to any department."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM salary_history_3003); ","""Retrieve the first names and last names of employees who do not have any records in the salary history table."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",,"""Select the first names and last names of employees along with their job titles and salaries from the employee_3002 table, and include only those employees who work in departments listed in the department_3001 table where the DepartmentID matches. Sort the results by the employee's last name in ascending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, e.Salary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002); ","""Retrieve the first names and last names of employees, along with their department names and salaries, from the employee table and the department table, where the employees' salaries are greater than the average salary of all employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5; ","""Retrieve the names of departments and the count of employees in each department, including departments with no employees, but only include departments that have more than 5 employees."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, e.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > e.Salary ORDER BY s.EffectiveDate DESC; ","""Retrieve the first names and last names of employees along with their salary amounts from the employee table who have a salary amount in the salary history that is greater than their current salary, sorted by the effective date of the salary history in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT MAX(SalaryAmount) FROM salary_history_3003); ","""Retrieve the first and last names and salaries of employees whose salaries are greater than the maximum salary recorded in the salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName, s.EffectiveDate FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate BETWEEN '2023-01-01' AND '2023-12-31'; ","""Select the first names and last names of employees, along with the names of their departments and the effective dates of their salary changes, from the employee table, joining with the department table and the salary history table, where the effective date of the salary changes is between January 1, 2023, and December 31, 2023."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalary DESC; ","""Retrieve the names of departments and the total salary of employees in each department, grouped by department name, and sorted by total salary in descending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM salary_history_3003 WHERE SalaryAmount > 100000); ","""Retrieve the first and last names of employees whose EmployeeID is found in the salary history where the SalaryAmount exceeds 100,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING AVG(e.Salary) < 50000; ","""Retrieve the names of departments and the average salary of employees in each department, grouping by department name, where the average salary is less than 50,000."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID); ","""Retrieve the first names and last names of employees along with their most recent salary amounts, where the most recent salary amount is determined by the latest effective date for each employee's salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = e.DepartmentID); ","""Retrieve the first and last names of employees along with their department names from the employee table, where the employees' salaries are greater than the average salary of their respective departments."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS SalaryChangeCount FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 3; ","""Retrieve the first and last names of employees who have more than three salary changes, by counting the entries in their salary history, grouped by each employee's ID."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, MIN(e.Salary) AS MinSalary, MAX(e.Salary) AS MaxSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments along with the minimum and maximum salaries of employees in each department by joining the department and employee tables, and group the results by department name."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName, s.SalaryAmount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 80000 ORDER BY s.EffectiveDate ASC; ","""Retrieve the first names and last names of employees, along with their department names and salary amounts, from the employee and department tables where the salary amounts in the salary history are greater than 80,000, sorted by the effective dates of the salaries in ascending order."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM salary_history_3003); ","""Retrieve the first and last names of employees who do not have any entries in the salary history."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount >= (SELECT AVG(SalaryAmount) FROM salary_history_3003); ","""Retrieve the first names and last names of employees along with the effective date of their salaries from the employee table and the salary history table, where the salary amount is greater than or equal to the average salary amount across all salary records."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName, SUM(s.SalaryAmount) AS TotalSalaryHistory FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING TotalSalaryHistory > 50000; ","""Retrieve the first names, last names, and department names of employees, along with the total amount of their salary history, for employees whose total salary history exceeds 50,000, aggregating the salary amounts grouped by each employee."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount = (SELECT MIN(SalaryAmount) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID); ","""Retrieve the first and last names of employees along with their minimum salary amounts from the salary history, ensuring that the minimum salary for each employee is selected from their salary history records."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID WHERE e.JobTitle = 'Manager' GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 2; ","""Retrieve the names of departments and the count of employees in each department who have the job title of 'Manager', grouping the results by department name, where the count of employees in a department is greater than 2."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName, COUNT(s.SalaryID) AS SalaryRecords FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 1; ","""Retrieve the first names and last names of employees along with their department names, counting the number of salary records associated with each employee, from the employee and department tables, and including any salary history records. Group the results by employee ID and only include those employees who have more than one salary record."""
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",,"""Select the first and last names of employees, their job titles, and their salaries from the employee table, and include only those employees who have a salary greater than 75000, ordering the results by salary in ascending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001; ,"""Retrieve all records from the department_4001 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_4002; ","""Retrieve all columns and data for every employee from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1; ","""Retrieve the name of the department where the DepartmentID is equal to 1."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager'; ","""Retrieve the first names and last names of employees whose job title is 'Manager'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_projects_4003; ","""Retrieve all records from the employee_projects_4003 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'HR'; ","""Retrieve the first names and last names of employees from the employee table who work in the HR department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID IS NULL; ","""Select the first names and last names of employees who do not belong to any department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT DepartmentID FROM employee_4002; ","""Retrieve the distinct DepartmentIDs from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2; ","""Count the total number of employees in the employee_4002 table who belong to department 2."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID; ","""Select the first names and last names of employees along with the names of their corresponding departments, using a left join between the employee and department tables based on the department identifiers."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE EmployeeID IN (SELECT EmployeeID FROM employee_projects_4003 WHERE ProjectID = 1); ","""Retrieve the first and last names of employees who are involved in the project with ID 1."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) AS EmployeeCount FROM employee_projects_4003 GROUP BY ProjectID; ","""Count the number of employees assigned to each project by grouping the results based on the ProjectID from the employee_projects_4003 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate > '2023-01-01'; ","""Retrieve the first names, last names, and roles of employees from the employee table who are associated with projects that started after January 1, 2023."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees in each department, including departments with no employees, by grouping the results by department names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e ORDER BY LastName ASC; ","""Retrieve the first and last names of all employees, sorted by their last names in ascending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName FROM employee_4002 WHERE FirstName LIKE 'A%'; ","""Retrieve the first and last names of employees whose first names start with the letter 'A'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Leader'; ","""Retrieve the first names and last names of employees who have the role of 'Leader' in their projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.FirstName IS NOT NULL; ","""Retrieve the first and last names of employees from the employee table where their first names are not null."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentID, COUNT(EmployeeID) AS Count FROM employee_4002 GROUP BY DepartmentID; ","""Retrieve the department IDs and the count of employees in each department from the employee table, grouped by department ID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL; ","""Retrieve the first names and last names of employees along with the start dates of their projects where the end date of the projects is not specified."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"""Select the first names, last names, and job titles of employees who work in the department with a specific DepartmentID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001; ,"""Retrieve all columns from the department_4001 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_4002; ","""Retrieve all columns for every employee from the employee_4002 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1; ","""Retrieve the name of the department with the DepartmentID of 1 from the department_4001 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager'; ","""Retrieve the first names and last names of employees whose job title is 'Manager'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the first names and last names of employees along with their department names by joining the employee and department tables on the department ID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2; ","""Count the total number of employees in the employee_4002 table who belong to department 2."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DISTINCT JobTitle FROM employee_4002; ","""Retrieve the distinct job titles from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees in each department, including departments that may not have any employees, grouping the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e ORDER BY LastName ASC; ","""Retrieve the first and last names of all employees, sorted by their last names in ascending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NULL; ","""Retrieve the first names and last names of employees who do not belong to any department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.JobTitle LIKE '%Engineer%'; ","""Retrieve the first names, last names, and job titles of employees whose job titles include the word 'Engineer'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName IS NOT NULL; ","""Retrieve the first names and last names of employees along with their department names from the employee table, including employees from all departments, but only include those where the department name is not null."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE LENGTH(e.LastName) > 5; ","""Retrieve the first names and last names of employees whose last names have more than five characters."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT EmployeeID FROM employee_projects_4003 WHERE Role = 'Lead'); ","""Retrieve the first and last names of employees who have a role of 'Lead' in any project."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) as EmployeeCount FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC; ","""Retrieve the names of departments and the count of employees in each department, grouped by department name and sorted by the employee count in descending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT * FROM employee_4002 e WHERE e.EmployeeID BETWEEN 5 AND 10; ","""Retrieve all columns for employees with an EmployeeID between 5 and 10 from the employee_4002 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName || ' ' || e.LastName AS FullName FROM employee_4002 e; ","""Retrieve the full names of all employees by concatenating their first and last names from the employee_4002 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Sales'; ","""Retrieve the first names of employees and the names of departments from the employee table and the department table, where the department name is 'Sales'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT DepartmentID) FROM employee_4002; ","""Count the distinct DepartmentIDs from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.JobTitle IN ('Analyst', 'Developer'); ","""Retrieve the first names, last names, and job titles of employees whose job titles are either 'Analyst' or 'Developer'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"""Select the employee first names and last names from the employee table, along with their job titles, for employees who work in a department with a specific DepartmentID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001; ,"""Retrieve the names of all departments from the department table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName FROM employee_4002; ","""Retrieve the first and last names of all employees from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT FirstName, LastName, JobTitle FROM employee_4002 WHERE DepartmentID = 1; ","""Retrieve the first names, last names, and job titles of employees from the employee table who are in the department with DepartmentID equal to 1."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the first names and last names of employees along with the names of their departments by joining the employee and department tables."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM employee_4002 GROUP BY DepartmentID; ","""Retrieve the DepartmentID and count the number of employees in each department from the employee table, grouped by DepartmentID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 0; ","""Select the first names and last names of employees and the count of projects they are associated with, grouping by employee ID, only including those employees who are involved in at least one project."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, e.JobTitle FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName; ","""Select the department names and job titles of employees by joining the employee and department tables, and sort the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, AVG(ep.Role) AS AvgRole FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the first names and last names of employees along with the average of their roles from the employee_projects table, grouping the results by employee ID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, SUM(ep.EndDate - ep.StartDate) AS TotalProjectDuration FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID; ","""Retrieve the first names and last names of employees along with the total duration of their projects, calculated as the sum of the differences between the end dates and start dates of their projects, grouping the results by each employee's ID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.JobTitle, COUNT(*) FROM employee_4002 e GROUP BY e.JobTitle HAVING COUNT(*) > 5; ","""Retrieve the job titles of employees and the count of employees in each job title, grouping the results by job title, where the count of employees for that job title is greater than 5."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IN (SELECT DepartmentID FROM department_4001 WHERE DepartmentName LIKE '%Sales%'); ","""Retrieve the first and last names of employees who work in departments with names that include 'Sales'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentID, MIN(StartDate) AS FirstProjectStart FROM employee_projects_4003 GROUP BY DepartmentID; ","""Retrieve the Department IDs and the earliest start date of each project for employees, grouped by Department ID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE EXISTS (SELECT * FROM employee_projects_4003 ep WHERE ep.EmployeeID = e.EmployeeID AND ep.EndDate IS NULL); ","""Retrieve the first names, last names, and job titles of employees who are currently assigned to projects, meaning they have at least one project with no end date."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, p.ProjectID FROM employee_4002 e JOIN employee_projects_4003 p ON e.EmployeeID = p.EmployeeID WHERE p.EndDate < '2023-01-01'; ","""Retrieve the first names and last names of employees along with their project IDs for all projects that ended before January 1, 2023, by joining the employee details with their project assignments."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, SUM(CASE WHEN e.JobTitle = 'Manager' THEN 1 ELSE 0 END) AS ManagerCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees with the job title 'Manager' in each department, grouped by the department names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.EmployeeID, COUNT(ep.ProjectID) AS TotalProjects FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalProjects DESC; ","""Retrieve the employee IDs and the total number of projects assigned to each employee from the employee table, grouping the results by employee ID and sorting the total projects in descending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, MAX(ep.EndDate) AS MostRecentProjectEnd FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the most recent project end dates for employees in each department, where the data is obtained by left joining the department table with the employee table and then with the employee projects table, and group the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003); ","""Select the first and last names of employees who are not assigned to any projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e ORDER BY e.LastName, e.FirstName; ","""Retrieve the first and last names of all employees, sorted by their last names and then by their first names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(*) FROM employee_projects_4003 WHERE StartDate >= '2023-01-01'; ","""Count the total number of employee projects where the start date is on or after January 1, 2023."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'HR'); ","""Retrieve the first and last names of employees who work in the HR department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
", ,"""Select the first and last names of employees, their job titles, and the names of the departments they belong to, for employees who are in the 'Sales' department, ordering the results by their job titles in ascending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT DepartmentName, COUNT(*) AS EmployeeCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY DepartmentName; ","""Retrieve the names of departments and the count of employees in each department by joining the employee table with the department table, and group the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID ORDER BY d.DepartmentName; ","""Retrieve the first names and last names of employees along with their department names by joining the employee table with the department table, and sort the results by department names."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT JobTitle, COUNT(*) AS NumOfEmployees FROM employee_4002 GROUP BY JobTitle HAVING NumOfEmployees > 5; ","""Count the number of employees for each job title in the employee table, and include only those job titles that have more than 5 employees."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2023-01-01'; ","""Retrieve the first names, last names, and roles of employees who have worked on projects that started before January 1, 2023, by joining the employee and employee projects tables."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the average salary of employees in each department by joining the employee and department tables, and group the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003); ","""Select the first names and last names of employees who are not involved in any projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.JobTitle, COUNT(ep.ProjectID) AS ProjectsAssigned FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.JobTitle; ","""Retrieve the job titles of employees along with the count of projects assigned to each job title, by counting the project IDs for employees, using a left join between the employee table and the employee projects table, and grouping the results by job title."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT DepartmentName, SUM(e.Salary) AS TotalSalaries FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY DepartmentName HAVING TotalSalaries > 100000; ","""Retrieve the names of departments and the total salaries of employees in each department, grouping the results by department name, and including only those departments where the total salaries exceed 100,000."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE '%Sales%'; ","""Retrieve the first names and last names of employees along with the names of their departments, specifically for departments that have names containing 'Sales'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.ProjectID FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL; ","""Retrieve the first names, last names, and project IDs of employees who are currently working on projects, where these projects have not yet ended."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(*) FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) > 2; ","""Retrieve the names of departments and the total number of employees in each department, grouped by department name, where the total number of employees is greater than 2."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate >= '2022-01-01' ORDER BY ep.StartDate; ","""Retrieve the first names, last names, and start dates of employees from the employee table, along with their project start dates from the employee projects table, where the project start dates are on or after January 1, 2022, sorted by the project start dates."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'IT'); ","""Retrieve the first names and last names of employees along with the department names of those employees who work in the IT department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS AssignedProjects FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AssignedProjects > 3; ","""Retrieve the first and last names of employees along with the count of projects they are assigned to, from the employee table, including employees with no assigned projects, grouping the results by employee ID, and only include those employees who are assigned to more than 3 projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT e.JobTitle) AS UniqueJobTitles FROM employee_4002 e; ","""Count the number of distinct job titles from the employee table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS ProjectCount FROM employee_projects_4003 ep GROUP BY ep.EmployeeID ORDER BY ProjectCount DESC; ","""Retrieve the Employee IDs and the count of projects associated with each employee, grouping the results by Employee ID and sorting them by the project count in descending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, MAX(e.Salary) AS HighestSalary FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the highest salary of employees in each department by joining the employee and department tables, grouping the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.FirstName || ' ' || e.LastName IN (SELECT e2.FirstName || ' ' || e2.LastName FROM employee_4002 e2 WHERE e2.JobTitle = 'Manager'); ","""Retrieve the first and last names of employees who have the same full name as employees whose job title is 'Manager'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(*) AS EmployeeCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE e.JobTitle = 'Developer' GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the count of employees with the job title 'Developer', grouped by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.StartDate, ep.EndDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2022-06-01' AND ep.EndDate > '2022-12-31'; ","""Retrieve the first and last names of employees along with the start and end dates of their projects, where the project start date is before June 1, 2022, and the project end date is after December 31, 2022, by joining the employee and employee projects tables."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",,"""Select the first names and last names of employees who are working in a department with a specific DepartmentID, along with their job titles, while ensuring to retrieve this information from the employee_4002 table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID; ","""Retrieve the first names and last names of employees along with their department names by joining the employee table with the department table based on the DepartmentID."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.JobTitle, COUNT(*) AS EmployeeCount FROM employee_4002 e GROUP BY e.JobTitle; ","""Retrieve the job titles of employees and the total count of employees for each job title."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, AVG(e.EmployeeID) AS AverageEmployeeID FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName; ","""Calculate the average EmployeeID for each department by retrieving the department names from the department_4001 table and joining it with employee_4002 on DepartmentID, and group the results by DepartmentName."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.Role = 'Manager'); ","""Retrieve the first names and last names of employees who have the role of 'Manager' in any of their projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, ep.ProjectID FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate > '2023-01-01'; ","""Retrieve the first names of employees and the project IDs for projects they are working on, where the start date of the projects is after January 1, 2023."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(ep.EmployeeID) AS TotalEmployees FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the total number of employees associated with projects in each department, including departments that have no employees, by counting the employee IDs for each department and grouping the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL; ","""Retrieve the first names, last names, and roles of employees who are currently assigned to projects, without an end date, by joining the employee and employee projects tables."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 2; ","""Retrieve the first names and last names of employees who are involved in more than 2 projects, including those with no projects, and count the number of projects they are associated with, grouped by their employee IDs."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID = (SELECT DepartmentID FROM department_4001 WHERE DepartmentName = 'Engineering'); ","""Retrieve the first and last names of employees who work in the Engineering department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e1.FirstName, e1.LastName, e2.FirstName AS ManagerFirstName, e2.LastName AS ManagerLastName FROM employee_4002 e1 JOIN employee_4002 e2 ON e1.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.Role = 'Team Member'); ","""Select the first and last names of employees who are team members, along with the first and last names of their managers, by joining the employee table with itself based on the condition that the employees' IDs match those of team members from the employee projects table."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, SUM(ep.EndDate - ep.StartDate) AS TotalProjectDuration FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName; ","""Retrieve the names of departments and the total duration of projects for employees in each department by calculating the sum of the time between the start and end dates of their projects, grouping the results by department name."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM employee_projects_4003); ","""Retrieve the first and last names of employees who are not assigned to any projects."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT DISTINCT EmployeeID FROM employee_projects_4003 WHERE ProjectID = (SELECT ProjectID FROM project_2003 WHERE ProjectName = 'New System')); ","""Retrieve the first and last names of employees who are assigned to the project titled 'New System'."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC; ","""Retrieve the names of departments and the count of employees in each department, including departments with no employees, grouped by department name and sorted by the employee count in descending order."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName, COUNT(ep.Role) AS RoleCount FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.Role) >= 3; ","""Retrieve the first names and last names of employees along with the count of their roles in projects, selecting from the employee table and joining with the employee projects table, grouped by employee ID, including only those employees who have a count of roles in projects that is greater than or equal to 3."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NULL; ","""Retrieve the first and last names of employees who do not belong to any department."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'S%'; ","""Retrieve the last names of employees and the names of departments where the department names start with the letter 'S', by joining the employee table with the department table based on the department IDs."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2022-01-01' AND ep.EndDate > '2023-01-01'; ","""Retrieve the first and last names of employees who have worked on projects that started before January 1, 2022, and ended after January 1, 2023."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT ep.Role, COUNT(ep.ProjectID) AS RoleCount FROM employee_projects_4003 ep GROUP BY ep.Role; ","""Retrieve the roles of employees along with the count of projects associated with each role, grouped by the employee role."""
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
"," 
SELECT COUNT(DISTINCT ep.ProjectID) AS UniqueProjects FROM employee_projects_4003 ep;","""Count the number of unique projects recorded in the employee_projects_4003 table."""
