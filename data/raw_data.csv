database_id,schema,mongo_query,natural_language_query
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.traffic_events.find({}); ,Retrieve all documents from the 'traffic_events' collection without applying any filters or conditions. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.traffic_events.find({}); ," Select every record stored in the 'traffic_events' collection, with no restrictions or criteria specified."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }); ",Select all documents from the 'traffic_events' collection where the intersection ID is 'INT001'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }); ", Retrieve entries from the 'traffic_events' collection that have the intersection identifier set to 'INT001'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",Select all documents from the 'traffic_events' collection that have an event severity level classified as 'Critical'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ", Retrieve entries from the 'traffic_events' collection where the severity of the response event is marked as 'Critical'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); ",Select documents from the 'traffic_events' collection where the event type is 'Speeding' and the speed of the vehicles involved exceeds 80 units. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); ", Retrieve entries from the 'traffic_events' collection for which the event is classified as 'Speeding' and the recorded vehicle speeds are greater than 80.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^AB\d{2}CD\d{4}$/ } }); ","Retrieve all documents from the 'traffic_events' collection where the number plate of the vehicles matches the pattern starting with 'AB', followed by two digits, then 'CD', and ending with four digits. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^AB\d{2}CD\d{4}$/ } }); "," Find entries in the 'traffic_events' collection that have vehicle number plates conforming to the regex format of 'AB', two numerical characters, 'CD', and four additional numerical characters."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); ","Retrieve all documents from the 'traffic_events' collection that contain vehicle events where the timestamp of the vehicles is on or after January 1, 2023. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); "," Find entries in the 'traffic_events' collection with vehicle event timestamps that are greater than or equal to January 1, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM123"", ""response.event.type"": ""RedLightViolation"" }); ",Select all documents from the 'traffic_events' collection where the camera identifier is 'CAM123' and the event type is classified as a 'RedLightViolation'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM123"", ""response.event.type"": ""RedLightViolation"" }); ", Retrieve entries from the 'traffic_events' collection that have a camera ID of 'CAM123' and an event type designated as 'RedLightViolation'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $exists: true, $ne: [] } }); ",Find all documents in the 'traffic_events' collection where the 'response.event.vehicles' field exists and is not an empty array. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $exists: true, $ne: [] } }); "," Retrieve entries from the 'traffic_events' collection that have a 'vehicles' array under 'response.event', ensuring this field is present and contains at least one element."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}, { ""identifier"": 1, ""response.event.type"": 1 }).sort({ ""response.event.type"": 1 }); ","Retrieve all documents from the 'traffic_events' collection, selecting the 'identifier' field and the type of the event within the 'response.event' object, and sort the results by the event type in ascending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}, { ""identifier"": 1, ""response.event.type"": 1 }).sort({ ""response.event.type"": 1 }); "," Fetch data from the 'traffic_events' collection where both the 'identifier' and the type of event under 'response.event' are included, and arrange the outcome by the event type in increasing sequence."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT002"" }).limit(10); ",Find the first ten documents in the 'traffic_events' collection where the intersection identifier is 'INT002'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT002"" }).limit(10); ", Retrieve up to ten entries from the 'traffic_events' collection that have the intersection_id value of 'INT002'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.countDocuments({ ""response.event.severity"": ""High"" }); ",Count the number of documents in the 'traffic_events' collection where the severity of the event in the response is classified as 'High'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.countDocuments({ ""response.event.severity"": ""High"" }); ", Determine how many entries exist in the 'traffic_events' collection that indicate a 'High' severity level in the event response.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $lt: 50, $gt: 30 } }); ",Select all entries from the 'traffic_events' collection where the speed of vehicles involved in the event is strictly greater than 30 and less than 50. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $lt: 50, $gt: 30 } }); "," Retrieve records from the 'traffic_events' collection that have vehicle speeds recorded between 30 and 50, exclusive of those limits."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.distinct(""response.event.type""); ",Get a list of distinct event types from the 'traffic_events' collection that are recorded in the response of traffic incidents. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.distinct(""response.event.type""); ", Retrieve all unique values of event types related to traffic events from the 'traffic_events' collection within the response data.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": { $in: [""Critical"", ""High""] } }).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Retrieve all documents from the 'traffic_events' collection where the event severity is either 'Critical' or 'High', and sort these results by the timestamp of the vehicles in descending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": { $in: [""Critical"", ""High""] } }).sort({ ""response.event.vehicles.timestamp"": -1 }); "," Find all entries in the 'traffic_events' collection with event severity classified as 'Critical' or 'High', ordering the outcomes by the vehicle timestamps in reverse chronological order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [[-73.97, 40.77], 0.1] } } }); ","Find all traffic event documents in the 'traffic_events' collection where the location of the vehicles is within a radius of 0.1 degrees from the geographical coordinates of [-73.97, 40.77]. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [[-73.97, 40.77], 0.1] } } }); "," Retrieve documents from the 'traffic_events' collection that contain vehicle locations falling within a 0.1-degree radius around the point defined by the coordinates [-73.97, 40.77]."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM124"" }).project({ ""response.event.vehicles"": 1 }); ","Fetch all traffic event records from the 'traffic_events' collection that have a camera ID of 'CAM124', and only include the vehicles associated with the event in the response. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM124"" }).project({ ""response.event.vehicles"": 1 }); "," Retrieve documents from the 'traffic_events' collection where the camera identifier is 'CAM124', projecting the details of the vehicles involved in the event."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.intersection_id"", total_events: { $sum: 1 } } } ]); ","Select all traffic events from the 'traffic_events' collection where the severity of the event is classified as 'Low', and group these results by the intersection ID to calculate the total number of events per intersection. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.intersection_id"", total_events: { $sum: 1 } } } ]); "," Query the 'traffic_events' collection for entries with an event severity labeled 'Low', then aggregate the findings by intersection ID while counting the total events associated with each intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avg_speed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Unwind the array of vehicles from the event responses in the 'traffic_events' collection, grouping the results by the vehicle number plate and calculating the average speed of each vehicle. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avg_speed: { $avg: ""$response.event.vehicles.speed"" } } } ]); "," Extract individual vehicles from the event data in the 'traffic_events' collection, then aggregate the information by vehicle number plate to compute the average speed for each unique vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ",Select all records from the 'traffic_events' collection where at least one vehicle in the event has a speed greater than 100. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ", Retrieve documents from the 'traffic_events' collection that contain vehicles exceeding a speed of 100 in their associated event data.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all traffic event records from the 'traffic_events' collection, filtering for those involving specific intersections and camera units, and include details about the severity and type of events alongside vehicle information such as number plates, speeds, timestamps, and locations. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find all documents in the 'traffic_events' collection that pertain to particular camera and intersection identifiers, capturing event details including their severity and type, while also detailing the vehicles involved, including their number plates, speed metrics, timestamps, and respective locations."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""JUNCTION_1"" }); ","Find all documents in the 'traffic_events' collection where the 'intersection_id' field in the identifier is equal to ""JUNCTION_1"". "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""JUNCTION_1"" }); "," Retrieve entries from the 'traffic_events' collection that have the identifier's 'intersection_id' set to ""JUNCTION_1""."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",Select all entries from the 'traffic_events' collection where the severity of the event in the response is categorized as 'Critical'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ", Retrieve documents from the 'traffic_events' collection that feature an event severity level marked as 'Critical' within the response data.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); ",Select all documents from the 'traffic_events' collection where the event type is 'Speeding' and the speed of vehicles involved exceeds 80. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); ", Retrieve records from the 'traffic_events' collection that indicate a 'Speeding' incident and have vehicle speeds greater than 80.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAMERA_001"", ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Retrieve all records from the 'traffic_events' collection where the camera identifier is 'CAMERA_001' and the timestamps for the vehicles involved in the events occurred between January 1, 2023, and February 1, 2023. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAMERA_001"", ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); "," Find documents in the 'traffic_events' collection that match the camera ID 'CAMERA_001' and have vehicle event timestamps ranging from January 1, 2023, to just before February 1, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ",Retrieve all traffic event documents from the 'traffic_events' collection that contain vehicles with the number plate 'AB12CD1234'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ", Find entries in the 'traffic_events' collection where the vehicles involved have the number plate 'AB12CD1234'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $near: { $geometry: { type: ""Point"", coordinates: [102.0, 0.5] }, $maxDistance: 1000 } } }); ","Find traffic event records in the 'traffic_events' collection where the vehicles' location is within a radius of 1000 meters from the coordinates (102.0, 0.5), utilizing a geospatial query. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $near: { $geometry: { type: ""Point"", coordinates: [102.0, 0.5] }, $maxDistance: 1000 } } }); "," Retrieve documents from the 'traffic_events' collection that contain vehicle locations located near the point (102.0, 0.5), specifically within a maximum distance of 1000 meters, applied through a proximity search."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""JUNCTION_2"", ""response.event.severity"": { $ne: ""Low"" } }); ",Select all records from the 'traffic_events' collection where the 'intersection_id' is 'JUNCTION_2' and the 'severity' of the event is not 'Low'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""JUNCTION_2"", ""response.event.severity"": { $ne: ""Low"" } }); ", Retrieve entries from the 'traffic_events' collection that have an 'intersection_id' of 'JUNCTION_2' and where the event's 'severity' level does not equal 'Low'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 3 } }); ",Select all records from the 'traffic_events' collection where the number of vehicles involved in the event response equals three. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 3 } }); ", Retrieve entries from the 'traffic_events' collection that have exactly three vehicles listed in the event response section.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Select all records from the 'traffic_events' collection where the event type is classified as 'RedLightViolation', and arrange these results in descending order based on the timestamp of the vehicles involved in the event. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); "," Retrieve entries from the 'traffic_events' collection that have an event type of 'RedLightViolation', sorting the output by the vehicle timestamps in reverse chronological order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ $or: [{ ""response.event.severity"": ""High"" }, { ""response.event.severity"": ""Critical"" }] }); ",Select all records from the 'traffic_events' collection where the severity of the event is either 'High' or 'Critical'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ $or: [{ ""response.event.severity"": ""High"" }, { ""response.event.severity"": ""Critical"" }] }); ", Retrieve documents from the 'traffic_events' collection that have an event severity classified as either 'High' or 'Critical'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $exists: true } }); ",Retrieve all entries from the 'traffic_events' collection where the speed field of the vehicles within the event response exists. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $exists: true } }); ", Find all documents in the 'traffic_events' collection that contain a speed value for the vehicles recorded in the event response.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-03-01"") } }).limit(5); ","Fetch up to five records from the 'traffic_events' collection where the timestamp for vehicles in the event response is on or after March 1, 2023. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-03-01"") } }).limit(5); "," Retrieve a maximum of five documents from the 'traffic_events' collection that have vehicle event timestamps starting from March 1, 2023, onwards."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}, { ""identifier.camera_id"": 1, ""response.event.severity"": 1 }).sort({ ""response.event.severity"": 1 }); ","Retrieve all documents from the 'traffic_events' collection, selecting the fields for 'camera_id' within the 'identifier' object and the 'severity' of the 'event' in the 'response' object, while sorting the results by the 'severity' in ascending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}, { ""identifier.camera_id"": 1, ""response.event.severity"": 1 }).sort({ ""response.event.severity"": 1 }); "," Find all entries in the 'traffic_events' collection, projecting the 'camera_id' from the 'identifier' section and the 'event severity' from the 'response' part, and sort these entries by 'event severity' in ascending order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ",Retrieve all documents from the 'traffic_events' collection where there is at least one vehicle with a speed greater than 100. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ", Find entries in the 'traffic_events' collection that contain vehicles exceeding a speed of 100.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": { $regex: /^JUNCTION_/ } }); ",Retrieve all documents from the 'traffic_events' collection where the 'intersection_id' field starts with the string 'JUNCTION_'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": { $regex: /^JUNCTION_/ } }); ", Find all records in the 'traffic_events' collection that have an 'intersection_id' beginning with 'JUNCTION_'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).count(); ",Count the number of documents in the 'traffic_events' collection where the event type recorded in the response is 'IllegalParking'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).count(); ", Determine how many entries are in the 'traffic_events' collection that correspond to events categorized as 'IllegalParking' within their response details.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.updateMany({ ""response.event.severity"": ""Low"" }, { $set: { ""response.event.severity"": ""Medium"" } }); ","Update all records in the 'traffic_events' collection where the event severity is classified as 'Low', and change the severity level to 'Medium'. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.updateMany({ ""response.event.severity"": ""Low"" }, { $set: { ""response.event.severity"": ""Medium"" } }); "," Modify every document in the 'traffic_events' collection that has a severity of 'Low' for events, setting their severity to 'Medium'."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") }, ""response.event.vehicles.speed"": { $gt: 60 } }); ","Fetch all records from the 'traffic_events' collection where the 'timestamp' of vehicles in the 'response.event' field is between January 1, 2023, and January 31, 2023, and the 'speed' of those vehicles exceeds 60. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") }, ""response.event.vehicles.speed"": { $gt: 60 } }); "," Retrieve entries from the 'traffic_events' collection that have vehicle timestamps within the range of January 1, 2023, to January 30, 2023, while also ensuring the vehicle speed is greater than 60."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.camera_id"", totalViolations: { $sum: 1 } } } ]); ","Find all traffic events in the 'traffic_events' collection where the event type is 'Speeding', and group the results by the camera ID while counting the total number of violations for each camera. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.camera_id"", totalViolations: { $sum: 1 } } } ]); "," Query the 'traffic_events' collection to match events classified as 'Speeding', and aggregate the data by camera ID to calculate the total number of speeding violations associated with each camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all entries from the 'traffic_events' collection where the traffic incident severity is categorized as critical, and include details of the vehicles involved, specifying their number plates and speeds. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve all documents from the 'traffic_events' collection that report critical severity traffic events, and extract vehicle information such as number plates and speeds associated with those events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Unwind the list of vehicles from the 'traffic_events' collection, then group the entries by the vehicle's number plate while calculating the average speed for each vehicle. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); "," Deconstruct the vehicles array within the 'traffic_events' collection and aggregate the data by number plate, computing the average speed recorded for each unique vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }); ",Retrieve all documents from the 'traffic_events' collection where the intersection identifier is 'INT001'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }); ", Find entries in the 'traffic_events' collection that have the intersection ID set to 'INT001'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } } ]); ","Select all records from the 'traffic_events' collection where the severity of the event is marked as 'Critical', and then group the results by the camera identifier while counting the total number of occurrences for each camera. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } } ]); "," Gather data from the 'traffic_events' collection for events classified as 'Critical' in severity, subsequently aggregating the data to count how many events correspond to each unique camera ID."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Find all records in the 'traffic_events' collection where the event type is 'RedLightViolation', and sort the retrieved documents by the vehicle timestamp in descending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); "," Retrieve documents from the 'traffic_events' collection that classify the event type as 'RedLightViolation', ordering the results based on the timestamps of the vehicles in descending sequence."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $gte: 80 } } }, { $project: { ""vehicle"": ""$response.event.vehicles.number_plate"", ""speed"": ""$response.event.vehicles.speed"" } } ]); ","Retrieve traffic event records from the 'traffic_events' collection where the speed of vehicles is 80 or higher, and project the vehicle number plates along with their respective speeds. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $gte: 80 } } }, { $project: { ""vehicle"": ""$response.event.vehicles.number_plate"", ""speed"": ""$response.event.vehicles.speed"" } } ]); "," Find documents in the 'traffic_events' collection that have vehicles traveling at speeds of 80 or more, and display the number plates of those vehicles along with their speeds."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""IllegalParking""] }, 1, 0] } } } } ]); ","Aggregate the traffic events from the 'traffic_events' collection to calculate the total number of violations specifically for occurrences classified as 'IllegalParking', by first unwinding the list of vehicles involved in each event. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""IllegalParking""] }, 1, 0] } } } } ]); "," In the 'traffic_events' collection, compute the overall count of violations categorized as 'IllegalParking' by expanding the vehicle array for each event prior to summing the total."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"", ""response.event.type"": ""Speeding"" }); ",Select all documents from the 'traffic_events' collection where the event severity is classified as 'High' and the event type is identified as 'Speeding'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"", ""response.event.type"": ""Speeding"" }); ", Retrieve records from the 'traffic_events' collection for occurrences that have a 'High' severity level and are categorized under the 'Speeding' event type.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); ","Select all records from the 'traffic_events' collection where the timestamp of vehicle events falls between January 1, 2023, and December 31, 2023, and then group the results by the camera_id, counting the number of events for each camera. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); "," Retrieve data from the 'traffic_events' collection where vehicle event timestamps are within the range of January 1, 2023, to December 31, 2023, and aggregate this data by camera_id to calculate the total event occurrences per camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [[-73.97, 40.77], 1 / 3963.2] } } }); ","Select all records from the 'traffic_events' collection where the 'vehicles' location falls within a circular area centered at the coordinates [-73.97, 40.77] with a radius of 1 mile. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [[-73.97, 40.77], 1 / 3963.2] } } }); "," Retrieve documents from the 'traffic_events' collection that contain vehicles whose locations are situated within a spherical area defined by a center point at [-73.97, 40.77] and extending outwards for 1 mile."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $sort: { ""response.event.vehicles.timestamp"": -1 } }, { $group: { _id: ""$identifier.intersection_id"", lastEvent: { $first: ""$response.event"" } } } ]); ","Sort the traffic events in the 'traffic_events' collection by the timestamp of the vehicles in the event response in descending order, and then group the results by the intersection_id, retrieving the most recent event for each junction. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $sort: { ""response.event.vehicles.timestamp"": -1 } }, { $group: { _id: ""$identifier.intersection_id"", lastEvent: { $first: ""$response.event"" } } } ]); "," Organize the entries in the 'traffic_events' collection by the vehicles’ timestamp in the response event from most recent to oldest, and group them according to the intersection_id, capturing the latest event associated with each traffic junction."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the traffic events in the 'traffic_events' collection by the type of event in the response, counting the total number of occurrences for each event type, and then sort the grouped results in descending order based on the total count of events. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data from the 'traffic_events' collection by categorizing traffic event types and summing the number of events for each type, followed by sorting these categories in descending order of their respective totals."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $project: { ""vehicle"": ""$response.event.vehicles.number_plate"", ""timestamp"": ""$response.event.vehicles.timestamp"" } } ]); ","Select the traffic event records from the 'traffic_events' collection where the event type is categorized as 'Speeding', and project the vehicle number plates along with their corresponding timestamps from the vehicles involved. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $project: { ""vehicle"": ""$response.event.vehicles.number_plate"", ""timestamp"": ""$response.event.vehicles.timestamp"" } } ]); "," Identify documents in the 'traffic_events' collection that have an event type of 'Speeding', and return the number plates of the vehicles along with their timestamps from the event details."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 60 } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); ","Unwind the vehicles array from the 'traffic_events' collection, then filter for those vehicles with a speed greater than 60, and group the results by each vehicle's number plate, counting the occurrences for each plate. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 60 } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); "," Expand the vehicles within the 'traffic_events' collection, apply a condition to select only those where the vehicle speed exceeds 60, and then aggregate the data by number plate for a total count of events related to each plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-06-01""), $lte: new Date(""2023-06-30"") } }).sort({ ""response.event.type"": 1 }); ","Find all traffic event documents from the 'traffic_events' collection where the timestamp of the vehicles is between June 1, 2023, and June 30, 2023, and sort the results by the type of event in ascending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-06-01""), $lte: new Date(""2023-06-30"") } }).sort({ ""response.event.type"": 1 }); "," Retrieve records from the 'traffic_events' collection that include vehicles with timestamps ranging from June 1, 2023, to June 30, 2023, and arrange these records by the event type in increasing order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $group: { _id: ""$identifier.intersection_id"", totalIllegalParks: { $sum: 1 } } } ]); ","Select records from the 'traffic_events' collection where the event type is classified as 'IllegalParking' and then group these records by the intersection_id, calculating the total number of illegal parking incidents for each intersection. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $group: { _id: ""$identifier.intersection_id"", totalIllegalParks: { $sum: 1 } } } ]); "," Filter the 'traffic_events' collection to find all entries with an event type of 'IllegalParking', then aggregate the results by intersection_id to count and summarize the total occurrences of illegal parking at each junction."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $lookup: { from: ""traffic_events"", localField: ""_id"", foreignField: ""identifier.camera_id"", as: ""relatedEvents"" } } ]); ","Select all documents from the 'traffic_events' collection where the severity of the event is classified as 'Low', and associate each document with relevant records from the same collection based on the camera_id field. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $lookup: { from: ""traffic_events"", localField: ""_id"", foreignField: ""identifier.camera_id"", as: ""relatedEvents"" } } ]); "," Retrieve records from the 'traffic_events' collection that have a response event severity of 'Low', while linking each document to related entries in the same collection using the identifier.camera_id as the reference point."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM1001"" }).limit(5); ",Retrieve up to five documents from the 'traffic_events' collection where the camera identifier is 'CAM1001'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM1001"" }).limit(5); ", Select a maximum of five entries from the 'traffic_events' collection that match the camera ID 'CAM1001'.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $sort: { ""response.event.vehicles.speed"": -1 } }, { $group: { _id: ""$identifier.intersection_id"", highestSpeed: { $max: ""$response.event.vehicles.speed"" } } } ]); ","Sort the vehicle speed in descending order within the 'traffic_events' collection, and then group the results by intersection ID to determine the highest speed recorded for vehicles at each traffic junction. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $sort: { ""response.event.vehicles.speed"": -1 } }, { $group: { _id: ""$identifier.intersection_id"", highestSpeed: { $max: ""$response.event.vehicles.speed"" } } } ]); "," Order the speeds of vehicles from the 'traffic_events' collection in descending order, followed by grouping the data by intersection ID to find the maximum speed achieved by any vehicle at each intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'traffic_events' collection that include vehicles involved in events of severity level 'Critical', focusing on their number plates, speeds, timestamps, and locations. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find all records in the 'traffic_events' collection where the event severity is classified as 'Critical', and list details about the vehicles, such as number plates, speeds, timestamps, and their locations."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""XYZ123"" }); ",Fetch all documents from the 'traffic_events' collection where the 'intersection_id' within the 'identifier' field is equal to 'XYZ123'. 
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""XYZ123"" }); ", Retrieve entries from the 'traffic_events' collection that have an 'intersection_id' of 'XYZ123' specified in the 'identifier' field.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.type"": 1 }); ","Select all documents from the 'traffic_events' collection where the severity of the event is classified as ""Critical"", and sort the results by the type of event in ascending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.type"": 1 }); "," Retrieve entries in the 'traffic_events' collection that have an event severity marked as ""Critical"", arranged in order of event type from A to Z."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); ","Select all traffic event records from the 'traffic_events' collection where the event type is classified as ""Speeding"" and the speed of the vehicles involved exceeds 80. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.vehicles.speed"": { $gt: 80 } }); "," Retrieve entries from the 'traffic_events' collection where the event is marked as ""Speeding"" and at least one vehicle's speed is greater than 80."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM456"", ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Find all traffic event records in the 'traffic_events' collection where the camera identifier is 'CAM456' and the timestamps of the vehicles involved in the events are between January 1, 2023, and December 31, 2023. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM456"", ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); "," Retrieve documents from the 'traffic_events' collection that have a camera ID of 'CAM456' and where the vehicle timestamps within the event responses fall within the range from January 1, 2023, to just before January 1, 2024."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } } ]); ","Select traffic events from the 'traffic_events' collection where the severity of the event is classified as 'High', and group the results by the intersection identifier while counting the number of occurrences for each intersection. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } } ]); "," Retrieve all entries from the 'traffic_events' collection that have a 'High' severity for their events, and aggregate those entries by their intersection ID, calculating the total count of events for each intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 70 }, ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.camera_id"", totalSpeedingVehicles: { $sum: 1 } } } ]); ","Extract data from the 'traffic_events' collection, focusing on vehicles exceeding a speed of 70, specifically for incidents categorized as 'RedLightViolation', and group the results by camera ID to count the total number of speeding vehicles for each camera. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 70 }, ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.camera_id"", totalSpeedingVehicles: { $sum: 1 } } } ]); "," Gather records from the 'traffic_events' collection where vehicles are recorded speeding above 70 while associated with 'RedLightViolation' events, and aggregate the results by camera ID to determine the total number of speeding vehicles per camera unit."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group all traffic event documents in the 'traffic_events' collection by their event type and calculate the total count of events for each type, then sort these groups in descending order based on the total event counts. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data in the 'traffic_events' collection by classifying events according to their type, summing up the total number of events for each classification and ordering the results from highest to lowest total events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$/ } }).limit(10); ","Find up to 10 documents in the 'traffic_events' collection where the 'number_plate' of the vehicles matches a specific pattern of two letters, two digits, two letters, and four digits. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$/ } }).limit(10); "," Retrieve a maximum of 10 records from the 'traffic_events' collection that have vehicle number plates conforming to the format of two uppercase letters, followed by two digits, two uppercase letters, and then four digits."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $lookup: { from: ""vehicles"", localField: ""response.event.vehicles.number_plate"", foreignField: ""number_plate"", as: ""vehicle_info"" } }, { $project: { intersection_id: 1, ""vehicle_info.owner"": 1 } } ]); ","Select records from the 'traffic_events' collection where the event type is 'IllegalParking', and join this data with the 'vehicles' collection using the vehicle number plate to retrieve specific owner information, while only displaying the intersection ID and the corresponding vehicle owner details. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $lookup: { from: ""vehicles"", localField: ""response.event.vehicles.number_plate"", foreignField: ""number_plate"", as: ""vehicle_info"" } }, { $project: { intersection_id: 1, ""vehicle_info.owner"": 1 } } ]); "," Gather documents from the 'traffic_events' collection that report 'IllegalParking' incidents, linking these records to the 'vehicles' collection through the vehicle number plates to access the owners, and project only the intersection ID along with the owners' information for the vehicles involved."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Select all traffic events from the 'traffic_events' collection where the severity of the response event is classified as 'Low', then unwind the vehicles array to calculate the average speed of those vehicles. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); "," Query the 'traffic_events' collection for events with a low severity level in their response, and flatten the vehicles list to determine the average speed across those vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.9876, 40.7661], [-73.9786, 40.7731]] } } }); ","Select all records from the 'traffic_events' collection where the vehicles' locations are within the geographical boundaries defined by the coordinates of the box formed by the points [-73.9876, 40.7661] and [-73.9786, 40.7731]. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.9876, 40.7661], [-73.9786, 40.7731]] } } }); "," Retrieve documents from the 'traffic_events' collection that match vehicles located within the area specified by the geographical box created by the coordinates [-73.9876, 40.7661] and [-73.9786, 40.7731]."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $lookup: { from: ""vehicles"", localField: ""response.event.vehicles.number_plate"", foreignField: ""number_plate"", as: ""vehicle_details"" } }, { $match: { ""vehicle_details.owner"": { $ne: null } } } ]); ","Join the 'traffic_events' collection with the 'vehicles' collection to retrieve details of vehicles involved in traffic events by matching their number plates, and then filter the results to include only those vehicle details where the owner is not null. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $lookup: { from: ""vehicles"", localField: ""response.event.vehicles.number_plate"", foreignField: ""number_plate"", as: ""vehicle_details"" } }, { $match: { ""vehicle_details.owner"": { $ne: null } } } ]); "," Combine information from the 'traffic_events' collection with the 'vehicles' collection by linking the number plate of vehicles reported in traffic events, while ensuring the output only contains entries where the vehicle owner is known."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INTERSECTION_001"" }).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(5); ","Retrieve the latest five traffic event documents from the 'traffic_events' collection where the intersection ID is 'INTERSECTION_001', sorted by the timestamp of the vehicles involved in each event in descending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INTERSECTION_001"" }).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(5); "," Find up to five recent entries in the 'traffic_events' collection that match the intersection ID 'INTERSECTION_001', ordered by the vehicle timestamps in each event from newest to oldest."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.camera_id"", maxSpeed: { $max: ""$response.event.vehicles.speed"" } } }, { $match: { maxSpeed: { $gt: 90 } } } ]); ","Unwind the 'vehicles' array from each event in the 'traffic_events' collection, then group the results by the 'camera_id' field and calculate the maximum speed recorded for those vehicles, filtering the results to include only those cameras where the maximum speed exceeds 90. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.camera_id"", maxSpeed: { $max: ""$response.event.vehicles.speed"" } } }, { $match: { maxSpeed: { $gt: 90 } } } ]); "," Expand the 'vehicles' array within each event in the 'traffic_events' collection, group the data by 'camera_id', and determine the highest speed for the vehicles, presenting only those groups where the maximum speed is greater than 90."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", totalEvents: { $sum: 1 }, avgSeverity: { $avg: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 3, { $cond: [{ $eq: [""$response.event.severity"", ""High""] }, 2, 1] }] } } } }, { $sort: { totalEvents: -1 } } ]); ","Group the traffic event documents from the 'traffic_events' collection by their intersection ID, counting the total number of events for each intersection and calculating the average severity, where the severity is scored as 3 for 'Critical', 2 for 'High', and 1 for 'Low', then sort the results by the total number of events in descending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", totalEvents: { $sum: 1 }, avgSeverity: { $avg: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 3, { $cond: [{ $eq: [""$response.event.severity"", ""High""] }, 2, 1] }] } } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the documents in the 'traffic_events' collection by intersection identifier, summing the total events per intersection and determining the average severity with values of 3 for 'Critical', 2 for 'High', and 1 for 'Low', subsequently ordering the output by the total event count in descending order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } } }, { $group: { _id: ""$response.event.type"", count: { $sum: 1 } } } ]); ","Select traffic event records from the 'traffic_events' collection where the vehicle timestamp falls between January 1, 2023, and January 31, 2023, and then group the results by the type of event, counting the total occurrences for each type. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } } }, { $group: { _id: ""$response.event.type"", count: { $sum: 1 } } } ]); "," Gather entries from the 'traffic_events' collection that have vehicle timestamps within the range of January 1, 2023, to January 31, 2023, and aggregate these entries by event type, calculating the number of events for each distinct type."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersection_id: 1, severity: ""$response.event.severity"" } }, { $lookup: { from: ""severity_levels"", localField: ""severity"", foreignField: ""level"", as: ""severity_info"" } } ]); ","Select documents from the 'traffic_events' collection, projecting the intersection ID and the severity level from the response event, and retrieve additional severity details by joining with the 'severity_levels' collection using the severity field. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersection_id: 1, severity: ""$response.event.severity"" } }, { $lookup: { from: ""severity_levels"", localField: ""severity"", foreignField: ""level"", as: ""severity_info"" } } ]); "," From the 'traffic_events' collection, obtain the intersection identifier along with the event severity, and enrich the data with severity information by performing a lookup in the 'severity_levels' collection based on the severity level."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Find all traffic event records from the 'traffic_events' collection, filtering for those that involve a specific intersection and camera, while also retrieving details about the severity and type of events, including the associated vehicles' number plates, speeds, timestamps, and locations. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve traffic events from the 'traffic_events' collection where a designated intersection and surveillance camera are in use, and include information about the event's severity and type along with the details of the vehicles involved, such as their number plates, speeds, timestamps, and geographical locations."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $match: { totalSpeed: { $gt: 100 } } } ]); ","Extract data from the 'traffic_events' collection by unwinding the vehicle records within the event responses, then group the results by the vehicle's number plate to calculate the total speed and count of events for each vehicle, and finally filter to find those with a total speed exceeding 100. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $match: { totalSpeed: { $gt: 100 } } } ]); "," Retrieve information from the 'traffic_events' collection by separating each vehicle entry in the event data, grouping them by number plate to sum their speeds and count the occurrences, and applying a condition to include only those with a total speed greater than 100."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Select all traffic events from the 'traffic_events' collection where the severity of the event is classified as 'Critical', and group the results by the intersection ID while counting the occurrences of each group, finally sorting the output in descending order based on the counts. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); "," Find records in the 'traffic_events' collection that have an event severity labeled as 'Critical', aggregating the data by intersection ID and tallying the number of events for each, then ordering the aggregated results from highest to lowest count."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", averageSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { averageSpeed: { $gt: 60 } } } ]); ","Group the documents in the 'traffic_events' collection by the type of traffic event and calculate the average speed of vehicles involved, including only those event types where the average speed exceeds 60. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", averageSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { averageSpeed: { $gt: 60 } } } ]); "," Aggregate the data from the 'traffic_events' collection by event category, determining the average speed of vehicles, and filter the results to show only the event types with an average speed greater than 60."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $addFields: { timestampDay: { $dayOfYear: ""$response.event.vehicles.timestamp"" } } }, { $group: { _id: ""$timestampDay"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Add a new field representing the day of the year from the timestamp of vehicles in the events contained within the 'traffic_events' collection, then group the results by this new field and calculate the total number of events for each day, sorting the output in descending order of the event counts. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $addFields: { timestampDay: { $dayOfYear: ""$response.event.vehicles.timestamp"" } } }, { $group: { _id: ""$timestampDay"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); "," Create a field that indicates the day of the year using the timestamp of the vehicles associated with events in the 'traffic_events' collection, subsequently grouping these entries by that field and summing up the count of events for each day, while sorting the final results by the number of events in descending order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $project: { vehiclePlate: ""$response.event.vehicles.number_plate"", speed: ""$response.event.vehicles.speed"", date: { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.vehicles.timestamp"" } } } }, { $group: { _id: { plate: ""$vehiclePlate"", date: ""$date"" }, avgSpeed: { $avg: ""$speed"" } } }, { $match: { avgSpeed: { $gte: 80 } } } ]); ","Unwind the vehicle data from the events in the 'traffic_events' collection, then project the vehicle number plate, speed, and the date of the event formatted as ""YYYY-MM-DD"". Group the results by the vehicle's number plate and date while calculating the average speed, and finally filter those groups to only include those where the average speed is 80 or higher. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $project: { vehiclePlate: ""$response.event.vehicles.number_plate"", speed: ""$response.event.vehicles.speed"", date: { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.vehicles.timestamp"" } } } }, { $group: { _id: { plate: ""$vehiclePlate"", date: ""$date"" }, avgSpeed: { $avg: ""$speed"" } } }, { $match: { avgSpeed: { $gte: 80 } } } ]); "," Expand the vehicle information for each event in the 'traffic_events' collection, selecting the vehicle's number plate, speed, and the event date in the ""YYYY-MM-DD"" format. Aggregate the data by vehicle plate and date, computing the average speed for each group, and restrict the results to groups with an average speed of at least 80."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""CAM123"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: 1 } } } ]); ","Aggregate the traffic events from the 'traffic_events' collection where the camera identifier is 'CAM123', unwind the vehicles involved in the event responses, and count the total number of violations. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""CAM123"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: 1 } } } ]); ", Count the total number of violations recorded in the 'traffic_events' collection by filtering for events captured by the camera identified as 'CAM123' and then expanding the vehicle entries within those events.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersectionId: ""$identifier.intersection_id"", severity: ""$response.event.severity"", speed: ""$response.event.vehicles.speed"" } }, { $group: { _id: ""$intersectionId"", maxSpeed: { $max: ""$speed"" }, minSpeed: { $min: ""$speed"" } } } ]); ","Project the intersection_id, severity of the event, and vehicle speed from the 'traffic_events' collection, then group the data by intersection_id while calculating the maximum and minimum vehicle speeds for each junction. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersectionId: ""$identifier.intersection_id"", severity: ""$response.event.severity"", speed: ""$response.event.vehicles.speed"" } }, { $group: { _id: ""$intersectionId"", maxSpeed: { $max: ""$speed"" }, minSpeed: { $min: ""$speed"" } } } ]); "," From the 'traffic_events' collection, select the intersection ID, event severity, and vehicle's speed, and subsequently aggregate the results by intersection ID to determine the highest and lowest speeds recorded at each location."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.intersection_id"", totalRedLightViolations: { $sum: 1 }, averageSpeed: { $avg: ""$response.event.vehicles.speed"" } } }, { $sort: { totalRedLightViolations: -1 } } ]); ","Select all records from the 'traffic_events' collection where the event type is classified as a Red Light Violation, then group the results by the intersection ID while calculating the total number of Red Light Violations and the average speed of vehicles involved, and finally sort the grouped results in descending order based on the total number of violations. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.intersection_id"", totalRedLightViolations: { $sum: 1 }, averageSpeed: { $avg: ""$response.event.vehicles.speed"" } } }, { $sort: { totalRedLightViolations: -1 } } ]); "," From the 'traffic_events' collection, filter for entries where the event type indicates a Red Light Violation, aggregate the findings by intersection ID to determine the count of such violations and the mean speed of the involved vehicles, and order these aggregated results by the total violations in decreasing order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.timestamp"": { $gt: new Date(""2022-01-01""), $lt: new Date(""2022-12-31"") } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); ","Extract all traffic event records from the 'traffic_events' collection where the timestamp of vehicles falls between January 1, 2022, and December 31, 2022, grouping the results by number plate to count the occurrences for each vehicle. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.timestamp"": { $gt: new Date(""2022-01-01""), $lt: new Date(""2022-12-31"") } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); "," Gather data from the 'traffic_events' collection on vehicle incidents that occurred within the date range of January 1, 2022, to December 31, 2022, and summarize the data by number plate, calculating the total number of events for each vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"", ""response.event.severity"": ""High"" } }, { $unwind: ""$response.event.vehicles"" }, { $project: { number_plate: ""$response.event.vehicles.number_plate"", violationTime: ""$response.event.vehicles.timestamp"" } } ]); ","Select records from the 'traffic_events' collection where the event type is 'IllegalParking' and the severity is 'High', then unwind the vehicles array to access individual vehicle entries, and finally project the vehicle number plate and violation timestamp for each entry. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"", ""response.event.severity"": ""High"" } }, { $unwind: ""$response.event.vehicles"" }, { $project: { number_plate: ""$response.event.vehicles.number_plate"", violationTime: ""$response.event.vehicles.timestamp"" } } ]); "," Gather all documents in the 'traffic_events' collection that report 'IllegalParking' incidents classified with 'High' severity, unwind the vehicles array to handle each vehicle separately, and project only the number plate and timestamp of the violation for each vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""INT123"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $sort: { totalSpeed: -1 } } ]); ","Aggregate data from the 'traffic_events' collection by first filtering for documents where the intersection ID is 'INT123', then unwinding the vehicles array within the event response, grouping the results by vehicle number plate to calculate the total speed and count of events, and finally sorting the output by total speed in descending order. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""INT123"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $sort: { totalSpeed: -1 } } ]); "," From the 'traffic_events' collection, find all records with an intersection ID of 'INT123', unwind each vehicle from the event response, group the data by number plate to sum the speeds and tally the event occurrences, and sort the final results by the aggregated total speed in a descending manner."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.type"", totalVehicles: { $sum: 1 }, averageSpeed: { $avg: ""$response.event.vehicles.speed"" } } }, { $match: { totalVehicles: { $gt: 20 } } } ]); ","Unwind the 'vehicles' array from the 'response.event' field in the 'traffic_events' collection, group the results by the type of event, calculating the total count of vehicles and the average speed for each event type, and only include those groups with more than 20 vehicles recorded. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.type"", totalVehicles: { $sum: 1 }, averageSpeed: { $avg: ""$response.event.vehicles.speed"" } } }, { $match: { totalVehicles: { $gt: 20 } } } ]); "," Deconstruct the 'vehicles' array within the 'response.event' data of the 'traffic_events' collection, aggregate the data by event type to determine the number of vehicles and the mean speed for each category, filtering out groups that do not exceed 20 vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $unwind: ""$response.event.vehicles"" }, { $project: { speed: ""$response.event.vehicles.speed"", location: ""$response.event.vehicles.location"" } }, { $group: { _id: null, averageSpeed: { $avg: ""$speed"" } } } ]); ","Select all records from the 'traffic_events' collection where the severity of the response event is rated as ""Low"", unwind the array of vehicles associated with those events, and then project the speed and location of each vehicle, finally calculating the average speed of all vehicles across the filtered events. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $unwind: ""$response.event.vehicles"" }, { $project: { speed: ""$response.event.vehicles.speed"", location: ""$response.event.vehicles.location"" } }, { $group: { _id: null, averageSpeed: { $avg: ""$speed"" } } } ]); "," From the 'traffic_events' collection, retrieve entries where the event severity is classified as ""Low"", expand the vehicles array within the response events, project the speed and location data of each vehicle, and compute the average speed of these vehicles in the resulting dataset."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersectionId: ""$identifier.intersection_id"", totalVehicles: { $size: ""$response.event.vehicles"" } } }, { $group: { _id: ""$intersectionId"", totalEvents: { $sum: 1 }, avgVehicles: { $avg: ""$totalVehicles"" } } } ]); ","Project the identifiers of traffic junctions and count the total number of vehicles involved in each traffic event from the 'traffic_events' collection, then group the results by intersection ID to calculate the total number of events and the average number of vehicles per event. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersectionId: ""$identifier.intersection_id"", totalVehicles: { $size: ""$response.event.vehicles"" } } }, { $group: { _id: ""$intersectionId"", totalEvents: { $sum: 1 }, avgVehicles: { $avg: ""$totalVehicles"" } } } ]); "," From the 'traffic_events' collection, retrieve the intersection IDs and the count of vehicles in each event, subsequently grouping the information to determine the total events per intersection as well as the average number of vehicles per event."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 50 } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); ","Extract all vehicle records from the 'traffic_events' collection where the speed of the vehicles exceeds 50, and group the results by the number plate, counting the occurrences for each plate. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gt: 50 } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } } ]); "," Gather information on vehicles from the 'traffic_events' collection that have a speed greater than 50, and aggregate the data by number plate to count how many times each vehicle appears."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { avgSpeed: { $gt: 75 } } } ]); ","Group the traffic events by the intersection ID in the 'traffic_events' collection, calculating the average speed of vehicles involved in each event, and then filter the results to keep only those groups where the average speed exceeds 75. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { avgSpeed: { $gt: 75 } } } ]); "," In the 'traffic_events' collection, aggregate the data to group by intersection ID and compute the average speed of vehicles for each identifier, subsequently filtering for groups with an average speed greater than 75."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", maxSpeed: { $max: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } } ]); ","Unwind the vehicles in the event responses for each document in the 'traffic_events' collection, then group the data by vehicle number plates to find the maximum speed and count the number of events for each vehicle. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", maxSpeed: { $max: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } } ]); "," Decompose the vehicle array within traffic events from the 'traffic_events' collection, subsequently aggregating the results by number plates to calculate the highest speed recorded and tally the total number of events associated with each vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Fetch all records from the 'traffic_events' collection where the event type is either 'Speeding' or 'RedLightViolation', and retrieve the associated vehicles and their number plates, speeds, and timestamps. "
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Obtain data from the 'traffic_events' collection for events classified as 'Speeding' or 'RedLightViolation', including details about the vehicles such as their number plates, speeds, and the respective timestamps of the incidents."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.toll_events.find({}); ,Retrieve all documents from the 'toll_events' collection without any filtering or conditions. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.toll_events.find({}); ," Select every entry in the 'toll_events' collection, showing all available data without applying any restrictions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Select all records from the 'toll_events' collection where the highway identifier is set to ""H1"". "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); "," Retrieve entries in the 'toll_events' collection that have a highway_id of ""H1""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ",Select all documents from the 'toll_events' collection where the transaction amount in the event response is greater than 10.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ", Fetch records from the 'toll_events' collection that have a transaction amount exceeding 10.00 in their event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01"") } }); ","Find all records in the 'toll_events' collection where the transaction timestamp within the response event is on or after January 1, 2023. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01"") } }); "," Retrieve documents from the 'toll_events' collection that have a transaction timestamp in the response event that is greater than or equal to January 1, 2023."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""XYZ123"" }); ",Retrieve all documents from the 'toll_events' collection where the number plate in the event identification response is 'XYZ123'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""XYZ123"" }); ", Find records in the 'toll_events' collection that have an identification number plate matching 'XYZ123' within the event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ",Select all entries from the 'toll_events' collection where the lane number in the identifier is equal to 2. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ", Retrieve all documents from the 'toll_events' collection that have an identifier with a lane number of 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lt: 5 } }); ",Select all documents from the 'toll_events' collection where the axle count in the transaction is less than 5. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lt: 5 } }); ", Retrieve documents from the 'toll_events' collection that have a transaction with an axle count of fewer than 5.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $eq: 25.00 } }); ",Find all records in the 'toll_events' collection where the amount of the transaction in the response event is exactly 25.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $eq: 25.00 } }); ", Retrieve toll event documents from the 'toll_events' collection that have a transaction amount of precisely 25.00 in the event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ",Select all records from the 'toll_events' collection where the 'rfid_tag' field within the 'response.event.identification' object exists. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ", Retrieve all documents in the 'toll_events' collection that contain an 'rfid_tag' in the 'response.event.identification' sub-document.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H2"", ""response.event.transaction.vehicle_class"": 1 }); ",Retrieve all documents from the 'toll_events' collection where the 'highway_id' in the identifier is 'H2' and the 'vehicle_class' in the response event transaction is 1. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H2"", ""response.event.transaction.vehicle_class"": 1 }); ", Find entries in the 'toll_events' collection that have a 'highway_id' of 'H2' and a 'vehicle_class' of 1 in the transaction details within the response event.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({}); ",Count the total number of documents present in the 'toll_events' collection without applying any filters or conditions. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({}); "," Calculate the number of records in the 'toll_events' collection, considering all entries without any restrictions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $lte: 50.00 } }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Select all documents in the 'toll_events' collection where the transaction amount in the event response is less than or equal to 50.00, and order the results by the transaction timestamp in descending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $lte: 50.00 } }).sort({ ""response.event.transaction.timestamp"": -1 }); "," Retrieve entries from the 'toll_events' collection that have a transaction amount of 50.00 or below in the event response, sorted by the transaction timestamp from most recent to oldest."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": { $ne: 3 } }); ",Select all documents from the 'toll_events' collection where the vehicle class associated with the transaction is not equal to 3. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": { $ne: 3 } }); ", Retrieve entries from the 'toll_events' collection that have a vehicle class in the transaction details which does not correspond to the value 3.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }); ","Find all records in the 'toll_events' collection where the lane number is either 1, 2, or 3. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }); "," Retrieve documents from the 'toll_events' collection that have a lane number of 1, 2, or 3."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": 4 }).limit(5); ",Select up to five records from the 'toll_events' collection where the axle count of the transaction within the event response equals four. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": 4 }).limit(5); ", Retrieve a maximum of five documents from the 'toll_events' collection that have a transaction axle count of four in their event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": /XYZ/ }); ",Retrieve all documents from the 'toll_events' collection where the 'number_plate' field in the 'response.event.identification' object matches the regular expression for 'XYZ'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": /XYZ/ }); ", Find entries in the 'toll_events' collection that contain a 'number_plate' in the 'response.event.identification' field that corresponds to the pattern 'XYZ'.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"", ""response.event.transaction.amount"": { $gt: 20.00 } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Retrieve documents from the 'toll_events' collection where the 'identifier.highway_id' is 'H1' and the 'response.event.transaction.amount' exceeds 20.00, sorted by 'response.event.transaction.timestamp' in ascending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"", ""response.event.transaction.amount"": { $gt: 20.00 } }).sort({ ""response.event.transaction.timestamp"": 1 }); "," Find entries in the 'toll_events' collection that have a 'highway_id' of 'H1' and a 'transaction.amount' greater than 20.00, ordered by 'transaction.timestamp' from the earliest to the latest."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H3"", ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-06-30"") } }); ","Fetch all records from the 'toll_events' collection where the highway identifier is 'H3' and the transaction timestamps fall between June 1, 2023, and June 30, 2023. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H3"", ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-06-30"") } }); ", Retrieve entries from the 'toll_events' collection that have a highway ID of 'H3' and where the transaction occurred from the start of June 2023 to the end of June 2023.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": NumberLong(12345678901234) }); ",Find all documents in the 'toll_events' collection that have a response event where the RFID tag is equal to 12345678901234. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": NumberLong(12345678901234) }); ", Retrieve entries from the 'toll_events' collection where the response event identification includes an RFID tag matching 12345678901234.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 1, ""response.event.transaction.amount"": { $gte: 30.00 } }).sort({ ""response.event.transaction.amount"": -1 }); ","Select all documents from the 'toll_events' collection where the lane number is 1 and the transaction amount in the event response is greater than or equal to 30.00, ordering the results in descending order based on the transaction amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 1, ""response.event.transaction.amount"": { $gte: 30.00 } }).sort({ ""response.event.transaction.amount"": -1 }); "," Fetch records from the 'toll_events' collection that indicate a lane number of 1 and have a transaction amount of at least 30.00, sorted by the transaction amount in descending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'toll_events' collection where the 'highway_id' corresponds to a specific road network and includes details about the vehicle's transaction amount, timestamp, vehicle class, and axle count, as well as their identification number plate and RFID tag. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Select records from the 'toll_events' collection that match a particular 'highway_id', detailing the transaction amount, timestamp, vehicle class, and axle count, alongside the vehicle's number plate and RFID tag information."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""123"" }); ","Fetch all documents from the 'toll_events' collection where the 'highway_id' within the 'identifier' field matches ""123"". "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""123"" }); "," Retrieve entries from the 'toll_events' collection that have an 'identifier.highway_id' value of ""123""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ",Retrieve all documents from the 'toll_events' collection where the transaction amount in the event response exceeds 10.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ", Find entries in the 'toll_events' collection that have a transaction amount greater than 10.00 within the event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC1234"" }); ",Find all documents in the 'toll_events' collection where the number plate in the response event's identification is 'ABC1234'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC1234"" }); ", Retrieve entries from the 'toll_events' collection that have 'ABC1234' as the vehicle's number plate within the identification details of the event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ",Select all documents from the 'toll_events' collection where the lane number in the identifier is 2. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ", Find records in the 'toll_events' collection that have an identifier with a lane number equal to 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 2 } }); ",Select documents from the 'toll_events' collection where the 'axle_count' in the 'response.event.transaction' field is greater than or equal to 2. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 2 } }); ", Retrieve entries from the 'toll_events' collection for which the 'transaction' within 'response.event' has an 'axle_count' of at least 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Fetch all toll event records from the 'toll_events' collection where the transaction timestamp falls on or after January 1, 2023, but before January 1, 2024. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); "," Retrieve documents from the 'toll_events' collection that have a transaction timestamp starting from January 1, 2023, up to, but not including, January 1, 2024."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 1 }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Find all toll event records in the 'toll_events' collection where the vehicle class is equal to 1, and arrange the results in descending order based on the transaction timestamp. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 1 }).sort({ ""response.event.transaction.timestamp"": -1 }); "," Retrieve documents from the 'toll_events' collection that have a vehicle class of 1, sorting the results by the transaction timestamp in reverse chronological order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""456"", ""response.event.transaction.amount"": { $lt: 5.00 } }); ",Select all entries from the 'toll_events' collection where the highway ID is '456' and the transaction amount recorded in the event is less than 5.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""456"", ""response.event.transaction.amount"": { $lt: 5.00 } }); ", Retrieve documents from the 'toll_events' collection that have a highway ID of '456' and where the transaction amount within the event is below 5.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": 1234567890 }); ",Retrieve all documents from the 'toll_events' collection where the RFID tag in the event identification is equal to 1234567890. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": 1234567890 }); ", Find entries in the 'toll_events' collection that have a matching RFID tag of 1234567890 in their event identification details.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.findOne({ ""response.event.transaction.amount"": { $ne: 0 } }); ",Find a document in the 'toll_events' collection where the transaction amount in the event response is not equal to zero. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.findOne({ ""response.event.transaction.amount"": { $ne: 0 } }); ", Retrieve a single record from the 'toll_events' collection that has a transaction amount within the event response that is different from zero.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""101"", ""identifier.lane_number"": { $in: [1, 3] } }); ",Retrieve all documents from the 'toll_events' collection where the highway identifier is '101' and the lane number is either 1 or 3. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""101"", ""identifier.lane_number"": { $in: [1, 3] } }); ", Find entries in the 'toll_events' collection that correspond to highway ID '101' and are recorded for lane numbers 1 or 3.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gt: new Date(""2023-06-01"") } }).limit(5); ","Retrieve up to five documents from the 'toll_events' collection where the timestamp of the transaction in the event response is later than June 1, 2023. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gt: new Date(""2023-06-01"") } }).limit(5); "," Select a maximum of five records from the 'toll_events' collection that have a transaction timestamp in the event response exceeding June 1, 2023."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 15.00 } }).sort({ ""response.event.transaction.amount"": 1 }); ","Select all records from the 'toll_events' collection where the transaction amount in the event response is greater than or equal to 15.00, and arrange the results in ascending order based on the transaction amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 15.00 } }).sort({ ""response.event.transaction.amount"": 1 }); "," Retrieve entries from the 'toll_events' collection that have a transaction amount of at least 15.00 in the event response, and sort these entries in increasing order according to the transaction amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 4 }).count(); ",Count the number of documents in the 'toll_events' collection where the 'lane_number' field in the identifier is equal to 4. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 4 }).count(); ", Determine how many entries exist in the 'toll_events' collection that have a lane number specified as 4 in the identifier.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""789"" }).project({ ""response.event.identification.number_plate"": 1, _id: 0 }); ","Select the number plate from the documents in the 'toll_events' collection where the highway identifier is '789', while excluding the default MongoDB identifier from the results. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""789"" }).project({ ""response.event.identification.number_plate"": 1, _id: 0 }); "," Retrieve the number plate details from the 'toll_events' collection for records that have a highway ID of '789', making sure not to include the _id field in the outcome."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": 3 }).limit(10).sort({ ""response.event.transaction.timestamp"": -1 }); ","Find up to 10 entries in the 'toll_events' collection where the axle count in the transaction details is exactly 3, and organize the results by sorting the transaction timestamps in descending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": 3 }).limit(10).sort({ ""response.event.transaction.timestamp"": -1 }); "," Retrieve a maximum of 10 records from the 'toll_events' collection that have a transaction axle count of 3, arranging the results with the most recent timestamps first."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 20.00 }, ""response.event.transaction.vehicle_class"": { $eq: 2 } }); ",Select all documents from the 'toll_events' collection where the transaction amount is greater than 20.00 and the vehicle class equals 2. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 20.00 }, ""response.event.transaction.vehicle_class"": { $eq: 2 } }); ", Retrieve records from the 'toll_events' collection for transactions where the amount exceeds 20.00 and the vehicle class is specifically 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ",Retrieve all documents from the 'toll_events' collection where the 'rfid_tag' field within the 'response.event.identification' object exists. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ", Find entries in the 'toll_events' collection that have a present 'rfid_tag' field in the 'response.event.identification' structure.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lt: 2 }, ""identifier.highway_id"": ""999"" }); ",Select all records from the 'toll_events' collection where the axle count in the transaction is less than 2 and the highway ID is 999. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lt: 2 }, ""identifier.highway_id"": ""999"" }); ", Retrieve documents from the 'toll_events' collection that have an axle count in the transaction under 2 and belong to the highway with the identifier 999.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all records from the 'toll_events' collection where the highway_id and lane_number meet specific criteria, focusing on the details of transactions including the amount, timestamp, vehicle class, and axle count, along with number plate and RFID tag identification. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve entries from the 'toll_events' collection that match given filters for highway_id and lane_number, capturing all relevant transaction details such as the amount, timestamp, vehicle class, and axle count, as well as identification features including the number plate and RFID tag."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H123"" }); ",Retrieve all documents from the 'toll_events' collection where the highway identifier is 'H123'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H123"" }); ", Find entries in the 'toll_events' collection that have a highway ID of 'H123'.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ",Find all documents in the 'toll_events' collection where the transaction amount in the event response exceeds 10.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10.00 } }); ", Retrieve records from the 'toll_events' collection that have a transaction amount greater than 10.00 within the event's response data.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ",Find all documents in the 'toll_events' collection where the vehicle's number plate in the identification section of the event response is 'ABC123'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ", Retrieve entries from the 'toll_events' collection that have a number plate of 'ABC123' within the event identification part of their response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 3 }).sort({ ""response.event.transaction.timestamp"": -1 }); ",Select all records from the 'toll_events' collection where the lane number is 3 and arrange the results in descending order based on the transaction timestamp from the event responses. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 3 }).sort({ ""response.event.transaction.timestamp"": -1 }); "," Retrieve entries from the 'toll_events' collection filtered by lane number 3, sorting the output in reverse chronological order according to the timestamp of the transactions in the event responses."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $gte: 2 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 } } }]); ","Select documents from the 'toll_events' collection where the transaction's axle count is greater than or equal to 2, and group the results by the highway ID while counting the total number of transactions for each highway. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $gte: 2 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 } } }]); "," Retrieve entries from the 'toll_events' collection that have an axle count of at least 2 in their transaction data, and aggregate these entries by highway ID, summarizing the count of transactions for each unique highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); ","Group the records in the 'toll_events' collection by the vehicle class extracted from the transaction data, summing the total amount for each class, and then sort the results in descending order based on the total amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); "," Aggregate the toll event data by vehicle class from the 'toll_events' collection, calculating the total transaction amount for each class and ordering the output from highest to lowest total amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date('2023-01-01'), $lt: new Date('2023-01-31') } } }, { $group: { _id: ""$identifier.highway_id"", avgTransactionAmount: { $avg: ""$response.event.transaction.amount"" } } }]); ","Select all documents from the 'toll_events' collection where the transaction timestamp is between January 1, 2023, and January 31, 2023, then group the results by the highway_id and calculate the average transaction amount for each highway. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date('2023-01-01'), $lt: new Date('2023-01-31') } } }, { $group: { _id: ""$identifier.highway_id"", avgTransactionAmount: { $avg: ""$response.event.transaction.amount"" } } }]); "," Retrieve records from the 'toll_events' collection that have transaction timestamps falling within the range of January 1, 2023, to January 31, 2023, and aggregate the data by highway_id to compute the average amount of transactions per highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""relatedEvents"" } }, { $match: { ""relatedEvents"": { $ne: [] } } }]); ","Join the 'toll_events' collection with itself to create an array of related events where the highway_id matches in both documents, and then filter for entries that have related events present. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""relatedEvents"" } }, { $match: { ""relatedEvents"": { $ne: [] } } }]); "," Aggregate data from the 'toll_events' collection by looking up related events with matching highway_id in the same collection, ensuring only those records with associated events are included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $lt: 5.00 } }).limit(10); ",Select the first ten documents from the 'toll_events' collection where the transaction amount under the response event is less than 5.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $lt: 5.00 } }).limit(10); "," Retrieve up to ten entries from the 'toll_events' collection, filtering for records where the transaction amount in the event response is below 5.00."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": { $exists: true } } }, { $group: { _id: ""$response.event.identification.rfid_tag"", count: { $sum: 1 } } }]); ","Find all documents in the 'toll_events' collection where the 'rfid_tag' exists within the 'response.event.identification' field, then group these documents by the 'rfid_tag' and count the total occurrences for each tag. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": { $exists: true } } }, { $group: { _id: ""$response.event.identification.rfid_tag"", count: { $sum: 1 } } }]); "," Retrieve entries from the 'toll_events' collection that contain an 'rfid_tag' in the 'response.event.identification' field, aggregating the results to produce a count for each unique 'rfid_tag' present in those entries."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, totalTransactions: { $sum: 1 }, avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $sort: { totalTransactions: -1 } }]); ","Group the toll events from the 'toll_events' collection by both the highway_id and lane_number, calculating the total number of transactions and the average transaction amount for each group, and then sort the results by the total number of transactions in descending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, totalTransactions: { $sum: 1 }, avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $sort: { totalTransactions: -1 } }]); "," Aggregate the data in the 'toll_events' collection to group records based on highway_id and lane_number, summing up the total transactions and computing the average amount for each group, followed by sorting the output by total transactions in decreasing order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date('2023-01-01'), $lt: new Date('2023-02-01') } } }, { $group: { _id: ""null"", totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }]); ","Collect all documents from the 'toll_events' collection where the transaction timestamps in the 'response.event.transaction' field are between January 1, 2023, and January 31, 2023, and calculate the total revenue by summing the 'amount' from the same field. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date('2023-01-01'), $lt: new Date('2023-02-01') } } }, { $group: { _id: ""null"", totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }]); "," Aggregate data from the 'toll_events' collection to find the total revenue, filtering for transactions occurring from January 1, 2023, to January 31, 2023, by summing the 'transaction.amount' from the 'response.event' structure."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""H123"", ""H456""] } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Select all documents from the 'toll_events' collection where the 'highway_id' field is either 'H123' or 'H456', and order the results by the 'timestamp' of the transaction in ascending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""H123"", ""H456""] } }).sort({ ""response.event.transaction.timestamp"": 1 }); "," Query the 'toll_events' collection for entries that have a 'highway_id' of 'H123' or 'H456', while sorting these results by the 'transaction' timestamp in chronological order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.vehicle_class"": 1 } }, { $group: { _id: ""$identifier.highway_id"", totalAmountCollected: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmountCollected: -1 } }]); ","Select all documents from the 'toll_events' collection where the vehicle class in the transaction is 1, then group the results by highway ID and calculate the total amount collected across these transactions, finally sorting the groups in descending order of total amount collected. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.vehicle_class"": 1 } }, { $group: { _id: ""$identifier.highway_id"", totalAmountCollected: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmountCollected: -1 } }]); "," Query the 'toll_events' collection for transactions with a vehicle class of 1, aggregate the data by highway ID to sum up the total amounts collected, and order the results by total amount collected in a descending manner."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $eq: 2 } }).count(); ",Count the total number of documents in the 'toll_events' collection where the lane number in the identifier is equal to 2. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $eq: 2 } }).count(); ", Determine how many entries exist in the 'toll_events' collection that have a lane number of 2 in their identifier field.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.identification.number_plate"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalTransactions: { $gt: 5 } } }]); ","Group the toll events by the vehicle number plate recorded in the event identification, calculating the total number of transactions and the total amount of money transacted, then filter to include only those vehicle number plates with more than five transactions. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.identification.number_plate"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalTransactions: { $gt: 5 } } }]); "," Aggregate data from the toll events collection by vehicle number plate found in the response event identification, summing up the number of transactions and the total amount, while only retaining those number plates that have greater than five transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $lt: 3 } } }, { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 5 }]); ","Select the latest five entries from the 'toll_events' collection where the transaction's axle count is less than 3, sorting the results by the transaction timestamp in descending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $lt: 3 } } }, { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 5 }]); "," Retrieve a maximum of five documents from the 'toll_events' collection, filtered for transactions with fewer than 3 axles, and arrange the records in order of the transaction timestamp from newest to oldest."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all documents from the 'toll_events' collection where the 'highway_id' and 'lane_number' identifiers correspond to specified values, and retrieve details about the transaction amount, timestamp, vehicle class, and axle count from the response object. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Query the 'toll_events' collection for entries that match certain 'highway_id' and 'lane_number' identifiers, extracting information regarding the transaction amount, date, vehicle classification, and the number of axles from the response data."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ",Select all documents from the 'toll_events' collection where the 'highway_id' field within the 'identifier' object is equal to 'H1'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ", Retrieve entries from the 'toll_events' collection that have a 'highway_id' of 'H1' located inside the 'identifier' object.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 100.00 } }); ",Retrieve all documents from the 'toll_events' collection where the transaction amount recorded in the event's response exceeds 100.00. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 100.00 } }); ", Find entries in the 'toll_events' collection for which the transaction amount within the event's response is greater than 100.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ",Obtain all records from the 'toll_events' collection where the number plate in the event identification response is 'ABC123'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ", Retrieve entries from the 'toll_events' collection that have a number plate of 'ABC123' in the identification section of the event response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 5 }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Fetch all entries from the 'toll_events' collection where the lane number is 5, and order the results by the transaction timestamp in descending order. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 5 }).sort({ ""response.event.transaction.timestamp"": -1 }); "," Retrieve records from the 'toll_events' collection that have a lane number equal to 5, sorting them by the timestamp of the transaction in reverse chronological order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $lt: 50 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 } } }]); ","Select all records from the 'toll_events' collection where the transaction amount within the event response is less than 50, and group the results by highway ID while counting the total number of transactions for each highway. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $lt: 50 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 } } }]); "," Retrieve entries from the 'toll_events' collection that have a transaction amount under 50, aggregating the data by highway ID to determine the total number of transactions for each respective highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); ","Group the documents in the 'toll_events' collection by the vehicle class from the transaction data, calculating the total amount for each class, and sort the results in descending order of total amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); "," Aggregate the records from the 'toll_events' collection by vehicle class within the transaction information, summing the amounts associated with each class, and order the output by total amount in descending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": { $exists: true } } }, { $group: { _id: ""$identifier.highway_id"", averageAmount: { $avg: ""$response.event.transaction.amount"" } } }]); ","Select all records from the 'toll_events' collection where the 'rfid_tag' field in the 'response.event.identification' object is present, and then group these records by 'highway_id', calculating the average of the 'amount' in the 'response.event.transaction' object for each group. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": { $exists: true } } }, { $group: { _id: ""$identifier.highway_id"", averageAmount: { $avg: ""$response.event.transaction.amount"" } } }]); "," Query the 'toll_events' collection for documents that contain the 'rfid_tag' within the 'response.event.identification' object, grouping the results by 'highway_id' and determining the average transaction 'amount' from the 'response.event.transaction'."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway: ""$identifier.highway_id"", lane: ""$identifier.lane_number"" }, totalAxles: { $sum: ""$response.event.transaction.axle_count"" }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalAmount: { $gt: 1000 } } }]); ","Group the documents in the 'toll_events' collection by highway ID and lane number, then calculate the total axle count and total transaction amount for each group, subsequently filtering out those groups where the total amount exceeds 1000. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway: ""$identifier.highway_id"", lane: ""$identifier.lane_number"" }, totalAxles: { $sum: ""$response.event.transaction.axle_count"" }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalAmount: { $gt: 1000 } } }]); "," Aggregate data from the 'toll_events' collection by identifying unique combinations of highway ID and lane number, summing the axle counts and transaction amounts, and only returning the groups with total amounts greater than 1000."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().sort({ ""response.event.transaction.timestamp"": 1 }).limit(10); ","Retrieve all records from the 'toll_events' collection, sort them by the 'timestamp' field within the 'transaction' subdocument in ascending order, and limit the results to the first 10 entries. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().sort({ ""response.event.transaction.timestamp"": 1 }).limit(10); "," Select documents from the 'toll_events' collection, ordering them by the 'transaction.timestamp' in an ascending manner and restricting the output to a maximum of 10 results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Select all transactions from the 'toll_events' collection where the timestamp of the transaction occurs between January 1, 2023, and December 31, 2023, and group the results by the vehicle class, summing the total transaction amounts for each class. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); "," Gather records from the 'toll_events' collection for transaction timestamps that fall within the range of January 1, 2023, to December 31, 2023, and categorize these by vehicle class while calculating the total amount for each vehicle category."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""response.event.identification.number_plate"", foreignField: ""response.event.identification.number_plate"", as: ""eventsWithSamePlate"" } }, { $unwind: ""$eventsWithSamePlate"" }, { $match: { ""eventsWithSamePlate.identifier.highway_id"": ""H2"" } }]); ","Join the 'toll_events' collection with itself by matching the 'number_plate' field in the 'response.event.identification' object, creating a list of records named 'eventsWithSamePlate', and then filter the results to only include those records where the 'highway_id' is 'H2'. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""response.event.identification.number_plate"", foreignField: ""response.event.identification.number_plate"", as: ""eventsWithSamePlate"" } }, { $unwind: ""$eventsWithSamePlate"" }, { $match: { ""eventsWithSamePlate.identifier.highway_id"": ""H2"" } }]); "," Perform an aggregation on the 'toll_events' collection where you look up entries with the same 'number_plate' from the same collection, store these in 'eventsWithSamePlate', and subsequently restrict the results to those that have a 'highway_id' equal to 'H2'."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-05-01""), $lt: new Date(""2023-06-01"") } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Gather all entries from the 'toll_events' collection where the transaction timestamp falls between May 1, 2023, and June 1, 2023, and subsequently group the results by highway_id, calculating the total number of transactions and the total amount of toll fees collected. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-05-01""), $lt: new Date(""2023-06-01"") } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); "," Select records from the 'toll_events' collection that have transaction timestamps in the date range starting from May 1, 2023, up to but not including June 1, 2023, then organize the data by highway_id while summing both the count of transactions and the total amount of fees."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 2, $lte: 6 } }); ","Select all documents from the 'toll_events' collection where the transaction's axle count is between 2 and 6, inclusive. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 2, $lte: 6 } }); "," Retrieve entries from the 'toll_events' collection that have a transaction axle count ranging from 2 to 6, including both endpoints."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": 1234567890 } }, { $project: { highway: ""$identifier.highway_id"", amount: ""$response.event.transaction.amount"" } }]); ",Select the highway ID and transaction amount from the 'toll_events' collection for records where the RFID tag in the event identification is 1234567890. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.identification.rfid_tag"": 1234567890 } }, { $project: { highway: ""$identifier.highway_id"", amount: ""$response.event.transaction.amount"" } }]); ", Query the 'toll_events' collection to retrieve the highway_id and the transaction amount for entries that match the RFID tag of 1234567890 in the event's identification section.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $sort: { ""response.event.transaction.amount"": -1 } }, { $group: { _id: null, largestTransaction: { $first: ""$response.event.transaction.amount"" } } }]); ",Sort the transaction amounts in descending order from the 'toll_events' collection and group the results to retrieve the largest transaction amount. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $sort: { ""response.event.transaction.amount"": -1 } }, { $group: { _id: null, largestTransaction: { $first: ""$response.event.transaction.amount"" } } }]); "," Organize the 'toll_events' collection by the transaction amounts in descending order, then group the entries to find the highest transaction amount recorded."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", transactionCount: { $sum: 1 }, maxAmount: { $max: ""$response.event.transaction.amount"" } } }, { $match: { maxAmount: { $gt: 500 } } }]); ","Group the documents in the 'toll_events' collection by the 'highway_id' from the 'identifier' field, counting the number of transactions and finding the maximum transaction amount, then filter the results to only include groups where the maximum amount exceeds 500. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", transactionCount: { $sum: 1 }, maxAmount: { $max: ""$response.event.transaction.amount"" } } }, { $match: { maxAmount: { $gt: 500 } } }]); "," Aggregate data from the 'toll_events' collection by the 'highway_id' specified in the 'identifier', calculating both the total transaction count and the highest transaction amount, and then narrow down the results to those where the maximum amount is greater than 500."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""H1"", ""H3""] } }).limit(5); ",Retrieve a maximum of five documents from the 'toll_events' collection where the highway identifier is either 'H1' or 'H3'. 
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""H1"", ""H3""] } }).limit(5); ", Select up to five records from the 'toll_events' collection that contain a highway_id of 'H1' or 'H3'.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-07-01"") } } }, { $group: { _id: ""$identifier.lane_number"", totalTransactions: { $sum: 1 } } }]); ","Select documents from the 'toll_events' collection where the transaction timestamp in the response event is on or after July 1, 2023, and then group the results by lane number, counting the total number of transactions for each lane. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-07-01"") } } }, { $group: { _id: ""$identifier.lane_number"", totalTransactions: { $sum: 1 } } }]); "," Query the 'toll_events' collection to find all entries where the event transaction occurred from July 1, 2023, onward, grouping the outcomes by the lane number and calculating the total transaction count for each lane."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all toll event documents from the 'toll_events' collection where the vehicle's axle count is greater than 4 and the transaction amount exceeds 10.00, including the vehicle class and number plate in the result. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find entries in the 'toll_events' collection for which the axle count of the vehicle exceeds 4 and the transaction amount is over 10.00, ensuring that the output contains details about the vehicle class and number plate."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gte: 10 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Select all documents from the 'toll_events' collection where the transaction amount in the response event is greater than or equal to 10, and group the results by highway ID, calculating the total number of transactions and the total amount of these transactions. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gte: 10 } } }, { $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); "," Query the 'toll_events' collection for records with a transaction amount of 10 or more, aggregating the data by highway ID to determine the sum of transactions and the cumulative transaction amounts."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $sort: { avgAmount: -1 } }]); ","Group the documents in the 'toll_events' collection by the vehicle class found in the transaction details, calculating the average transaction amount for each vehicle class, and sort the results in descending order of the average amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $sort: { avgAmount: -1 } }]); "," Aggregate data from the 'toll_events' collection to determine the average amount spent per vehicle class in the transaction records, arranging the vehicle classes in order from the highest to lowest average amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.lane_number"", totalTransactions: { $sum: 1 }, avgAmount: { $avg: ""$response.event.transaction.amount"" } } }]); ","Select records from the 'toll_events' collection where the transaction timestamps fall between January 1, 2023, and December 31, 2023, then group the results by lane number, calculating the total number of transactions and the average transaction amount for each lane. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.lane_number"", totalTransactions: { $sum: 1 }, avgAmount: { $avg: ""$response.event.transaction.amount"" } } }]); "," From the 'toll_events' collection, retrieve documents with transaction timestamps from the start of 2023 until the end of 2023, grouping them by the lane number while determining the count of transactions and the average amount of each transaction per lane."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $gte: 2 } } }, { $group: { _id: ""$response.event.identification.number_plate"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }, { $limit: 10 }]); ","Select records from the 'toll_events' collection where the axle count in the transaction is greater than or equal to 2, and group the results by the vehicle's number plate while calculating the total amount for each group. Finally, sort the results in descending order by total amount and limit the output to the top 10 entries. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.axle_count"": { $gte: 2 } } }, { $group: { _id: ""$response.event.identification.number_plate"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }, { $limit: 10 }]); "," From the 'toll_events' collection, query for entries that have a transaction axle count of at least 2, then perform grouping by number plate to sum the transaction amounts, order the summed amounts in descending order, and restrict the results to 10 records."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, maxAmount: { $max: ""$response.event.transaction.amount"" } } }, { $match: { maxAmount: { $lt: 50 } } }]); ","Group the toll events by the highway ID from the 'toll_events' collection, calculating the total number of transactions and the maximum transaction amount, then filter the results to include only those groups where the maximum transaction amount is less than 50. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", totalTransactions: { $sum: 1 }, maxAmount: { $max: ""$response.event.transaction.amount"" } } }, { $match: { maxAmount: { $lt: 50 } } }]); "," Aggregate the records in the 'toll_events' collection by highway ID, summing the transaction counts and identifying the highest transaction amount, while restricting the output to groups with a maximum amount below 50."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z""), $lt: new Date(""2023-01-02T00:00:00Z"") } } }, { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, totalAxle: { $sum: ""$response.event.transaction.axle_count"" } } }]); ","Select all entries from the 'toll_events' collection where the transaction timestamps fall between January 1, 2023, at midnight and January 2, 2023, at midnight, and group the results by the highway ID while calculating the total transaction amounts and total axle counts for each group. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z""), $lt: new Date(""2023-01-02T00:00:00Z"") } } }, { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, totalAxle: { $sum: ""$response.event.transaction.axle_count"" } } }]); "," Retrieve records from the 'toll_events' collection with transaction timestamps greater than or equal to January 1, 2023, and less than January 2, 2023, and aggregate them by highway ID to compute the sum of amounts and the sum of axle counts for each highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gt: 20 }, ""response.event.transaction.vehicle_class"": 1 } }, { $group: { _id: ""$response.event.identification.rfid_tag"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); ","Select all records from the 'toll_events' collection where the transaction amount exceeds 20 and the vehicle class is equal to 1, then group these results by the RFID tag and calculate the total amount for each tag, finally sorting the results in descending order of the total amounts. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gt: 20 }, ""response.event.transaction.vehicle_class"": 1 } }, { $group: { _id: ""$response.event.identification.rfid_tag"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } }]); "," Retrieve documents from the 'toll_events' collection that have a transaction amount greater than 20 and belong to vehicle class 1, aggregate the findings by RFID tag while summing the transaction amounts, and sort the aggregated results from highest to lowest total amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, totalTransactions: { $sum: 1 } } }, { $match: { totalTransactions: { $gte: 100 } } }]); ","Aggregate the records in the 'toll_events' collection by grouping them according to the highway identifier and lane number, and then calculate the total number of transactions for each group, only including those groups where the total transaction count is no less than 100. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, totalTransactions: { $sum: 1 } } }, { $match: { totalTransactions: { $gte: 100 } } }]); "," Group the data from the 'toll_events' collection by highway ID and lane number, summing the total transactions, and filter the results to only show those entries with at least 100 transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, avgAxle: { $avg: ""$response.event.transaction.axle_count"" } } }, { $project: { vehicle_class: ""$_id"", totalAmount: 1, avgAxle: 1 } }, { $sort: { totalAmount: -1 } }]); ","Group the documents from the 'toll_events' collection by the 'vehicle_class' field in the 'transaction' object of the 'response.event', calculating the total sum of the 'amount' and the average 'axle_count' for each class. Then, project the vehicle class along with the total amount and average axle count, sorting the results in descending order based on the total amount. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, avgAxle: { $avg: ""$response.event.transaction.axle_count"" } } }, { $project: { vehicle_class: ""$_id"", totalAmount: 1, avgAxle: 1 } }, { $sort: { totalAmount: -1 } }]); "," Aggregate the records in the 'toll_events' collection by categorizing them according to the 'vehicle_class' present in the 'transaction' object within 'response.event', summing up the 'amount' and averaging the 'axle_count' for each vehicle class. Finally, present the vehicle class, total amount, and average axle count, arranging the outcome in order of highest total amount first."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""same_highway_events"" } }, { $unwind: ""$same_highway_events"" }, { $group: { _id: ""$identifier.highway_id"", totalAmountForSameHighway: { $sum: ""$same_highway_events.response.event.transaction.amount"" } } }]); ","Aggregate data from the 'toll_events' collection by joining documents with the same 'highway_id', and for each highway, calculate the total amount of transactions by summing the 'amount' field from the joined events. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""same_highway_events"" } }, { $unwind: ""$same_highway_events"" }, { $group: { _id: ""$identifier.highway_id"", totalAmountForSameHighway: { $sum: ""$same_highway_events.response.event.transaction.amount"" } } }]); "," From the 'toll_events' collection, perform a lookup to gather events sharing the same 'highway_id' and then group the results to determine the total transaction amount for each highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gt: 100 } } }, { $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Select all toll events from the 'toll_events' collection where the transaction amount is greater than 100, then group the results by highway ID and lane number, calculating the total number of events for each group, and finally sort the groups in descending order based on the count. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $gt: 100 } } }, { $group: { _id: { highway_id: ""$identifier.highway_id"", lane_number: ""$identifier.lane_number"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }]); "," Query the 'toll_events' collection to find records with transaction amounts exceeding 100, aggregate these records by highway ID and lane number to count occurrences, and sort the aggregated results by count in descending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $project: { vehicle_class: ""$_id"", avgAmount: { $divide: [""$totalAmount"", ""$totalTransactions""] } } }]); ","Group the records from the 'toll_events' collection by the vehicle class found in the transaction data, calculating the total number of transactions and the total amount for each class. Then, project the vehicle class along with the average transaction amount by dividing the total amount by the total number of transactions for each group. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.vehicle_class"", totalTransactions: { $sum: 1 }, totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $project: { vehicle_class: ""$_id"", avgAmount: { $divide: [""$totalAmount"", ""$totalTransactions""] } } }]); "," Aggregate the documents in the 'toll_events' collection by vehicle class in the transaction details, summing up the count of transactions and the total amount spent, and subsequently calculate the average amount per transaction for each vehicle class in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01T00:00:00Z""), $lt: new Date(""2023-06-30T23:59:59Z"") } } }, { $group: { _id: ""$identifier.highway_id"", transactionCount: { $sum: 1 }, totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }]); ","Select all documents from the 'toll_events' collection where the transaction date falls between June 1, 2023, and June 30, 2023, and group the results by highway ID, counting the number of transactions and summing the total revenue from those transactions. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01T00:00:00Z""), $lt: new Date(""2023-06-30T23:59:59Z"") } } }, { $group: { _id: ""$identifier.highway_id"", transactionCount: { $sum: 1 }, totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }]); "," Retrieve records from the 'toll_events' collection within the date range of June 1, 2023, to June 30, 2023, aggregating the data by highway ID to calculate the total number of transactions and the overall revenue generated from those transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { avgAmount: { $gt: 25 } } }]); ","Group the toll events by highway ID from the 'toll_events' collection and calculate the average transaction amount, then filter the results to only include those groups where the average amount exceeds 25. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { avgAmount: { $gt: 25 } } }]); "," Aggregate toll transactions in the 'toll_events' collection by highway ID, determining the average transaction amount, and return only the averages that are greater than 25."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.identification.number_plate"", totalTrips: { $sum: 1 }, totalSpent: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalSpent: -1 } }, { $limit: 5 }]); ","Group the documents in the 'toll_events' collection by the 'number_plate' field from the 'response.event.identification', calculating the total number of trips and the total amount spent for each vehicle, then sort the results by the total amount spent in descending order and limit the output to the top five entries. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.identification.number_plate"", totalTrips: { $sum: 1 }, totalSpent: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalSpent: -1 } }, { $limit: 5 }]); "," Aggregate the data in the 'toll_events' collection by the 'number_plate' within the 'response.event.identification', summing the trip counts and the total expenditure per vehicle, while sorting the results by total expenditure in descending order and restricting the output to five records."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $lte: 15 }, ""response.event.transaction.vehicle_class"": 2 } }, { $lookup: { from: ""toll_events"", localField: ""response.event.identification.number_plate"", foreignField: ""response.event.identification.number_plate"", as: ""same_plate_events"" } }]); ","Select records from the 'toll_events' collection where the transaction amount is less than or equal to 15 and the vehicle class is 2, and also join these records with other events that have the same number plate to produce a list of events associated with those vehicles. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""response.event.transaction.amount"": { $lte: 15 }, ""response.event.transaction.vehicle_class"": 2 } }, { $lookup: { from: ""toll_events"", localField: ""response.event.identification.number_plate"", foreignField: ""response.event.identification.number_plate"", as: ""same_plate_events"" } }]); "," Query the 'toll_events' collection for entries with a transaction amount not exceeding 15 and a vehicle class of 2, while additionally performing a lookup to find other events linked by the same number plate, compiling a collection of events for those vehicles."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.axle_count"", transactionCount: { $sum: 1 }, totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { transactionCount: { $gte: 50 } } }]); ","Group the toll event records by the axle count from the transaction data within the 'toll_events' collection, calculating the count of transactions and the sum of the total revenue for each axle count, while filtering to include only those groups with a transaction count of at least 50. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$response.event.transaction.axle_count"", transactionCount: { $sum: 1 }, totalRevenue: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { transactionCount: { $gte: 50 } } }]); "," In the 'toll_events' collection, aggregate the data by counting the number of transactions and summing the revenue based on the axle count in the transaction details, ensuring to only return results where the transaction count is 50 or higher."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Find all entries in the 'toll_events' collection where the vehicle's axle count is greater than 2, including details about the transaction amount and the timestamp of the event. "
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve records from the 'toll_events' collection for vehicles with more than 2 axles, extracting information on the transaction amount along with the event's timestamp."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.parking_events.find({}); ,Retrieve all entries from the 'parking_events' collection without any filters or conditions applied. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.parking_events.find({}); ," Select every document available in the 'parking_events' database collection, encompassing all records and without restrictions."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Retrieve all documents from the 'parking_events' collection where the 'identifier.parking_lot_id' is equal to ""A1"". "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); "," Find all entries in the 'parking_events' collection that have a 'parking_lot_id' identifier with the value of ""A1""."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30 } }); ",Select all documents from the 'parking_events' collection where the duration of parking in minutes is greater than or equal to 30. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30 } }); ", Retrieve entries from the 'parking_events' collection that have a parking duration of at least 30 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ123"" }); ",Find all documents in the 'parking_events' collection where the vehicle's number plate is 'XYZ123'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ123"" }); ", Retrieve entries from the 'parking_events' collection that have a vehicle with the number plate 'XYZ123'.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }); ",Select all records from the 'parking_events' collection where the zone identifier is equal to 2. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }); ", Retrieve entries from the 'parking_events' collection that have a zone value of 2 in their identifiers.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gt: new Date(""2023-01-01"") } }); ","Select all records from the 'parking_events' collection where the entry time of the parking event is after January 1, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gt: new Date(""2023-01-01"") } }); "," Retrieve documents from the 'parking_events' collection that have an entry time for the event greater than January 1st, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $lt: new Date(""2023-12-31"") } }); ","Select all records from the 'parking_events' collection where the exit time of the event in the response is earlier than December 31, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $lt: new Date(""2023-12-31"") } }); "," Retrieve documents from the 'parking_events' collection where the exit_time field of the event in the response object is less than the date of December 31, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 1 } }); ",Select all records from the 'parking_events' collection where the space occupied by the vehicle is less than or equal to one. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 1 } }); ", Retrieve documents from the 'parking_events' collection that indicate vehicles occupying no more than one parking space.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 2000 } }); ",Select all documents from the 'parking_events' collection where the vehicle's weight is greater than 2000 kilograms. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 2000 } }); ", Find entries in the 'parking_events' collection that have a vehicle weight exceeding 2000 kg.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""identifier.zone"": 3 }); ",Retrieve all documents from the 'parking_events' collection where the parking lot ID is 'B2' and the zone number is 3. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""identifier.zone"": 3 }); ", Find records in the 'parking_events' collection that have a parking lot identifier of 'B2' and are located in zone 3.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": 60 }).sort({ ""response.event.entry_time"": -1 }); ","Select all parking event records from the 'parking_events' collection where the duration of the event is exactly 60 minutes, and sort these records by the entry time in descending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": 60 }).sort({ ""response.event.entry_time"": -1 }); "," Retrieve records from the 'parking_events' collection for events lasting 60 minutes, arranged in order from the most recent entry time to the oldest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $regex: /^AB/ } }); ",Retrieve all documents from the 'parking_events' collection where the vehicle's number plate starts with the letters 'AB' using a regular expression match. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $regex: /^AB/ } }); "," Find entries in the 'parking_events' collection that have vehicle number plates commencing with 'AB', utilizing a regular expression for the search."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }); ",Select all documents from the 'parking_events' collection where the 'exit_time' for the event in the response field is present. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }); ", Retrieve documents from the 'parking_events' collection that have an existing 'exit_time' recorded within the event response.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") } }); ","Fetch all records from the 'parking_events' collection where the entry time of the event is on or after January 1, 2023, and before January 31, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") } }); "," Retrieve entries in the 'parking_events' collection that have an event entry time between January 1, 2023, and January 31, 2023, not including the latter date."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""C3"", ""response.event.vehicle.space_occupied"": { $gte: 2 } }); ",Fetch all entries from the 'parking_events' collection where the parking lot identifier is 'C3' and the number of occupied spaces by vehicles is greater than or equal to 2. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""C3"", ""response.event.vehicle.space_occupied"": { $gte: 2 } }); ", Retrieve records from the 'parking_events' collection that have a parking lot ID of 'C3' and show vehicles occupying 2 or more parking spaces.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $between: [1500, 2500] } }); ",Find all documents within the 'parking_events' collection where the vehicle's weight is between 1500 and 2500 kilograms. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $between: [1500, 2500] } }); ", Retrieve records from the 'parking_events' collection that have vehicles weighing between 1500 kg and 2500 kg.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""LMN456"", ""identifier.zone"": 1 }); ",Find parking event records in the 'parking_events' collection where the vehicle's number plate is 'LMN456' and the identifier's zone is 1. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""LMN456"", ""identifier.zone"": 1 }); ", Retrieve documents from the 'parking_events' collection that have a vehicle with the number plate 'LMN456' and are located in zone 1 as specified by the identifier.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lte: 15 } }).limit(10); ",Find up to 10 parking event records from the 'parking_events' collection where the duration of the event is 15 minutes or less. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lte: 15 } }).limit(10); ", Retrieve a maximum of 10 entries from the 'parking_events' collection that have a duration of no more than 15 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 1 }).sort({ ""response.event.entry_time"": 1 }); ",Select all parking event records from the 'parking_events' collection where the vehicle occupies a single space and arrange the results in ascending order based on the entry time of the events. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 1 }).sort({ ""response.event.entry_time"": 1 }); "," Retrieve documents from the 'parking_events' collection that show vehicles occupying one parking space, sorted by the entry time of the events in chronological order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": { $in: [""A1"", ""A2"", ""A3""] } }); ","Select all records from the 'parking_events' collection where the parking lot identifier is either 'A1', 'A2', or 'A3'. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": { $in: [""A1"", ""A2"", ""A3""] } }); "," Retrieve documents from the 'parking_events' collection that have a parking lot ID matching any of the following: 'A1', 'A2', or 'A3'."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all records from the 'parking_events' collection where the parking lot ID and zone are specified, retrieving the entry time, exit time, duration in minutes, and vehicle details, which include the number plate, space occupied, and weight in kilograms. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Fetch data from the 'parking_events' collection filtered by specific values for parking lot ID and zone, and obtain the entry and exit times, duration in minutes, as well as the vehicle's number plate, occupied space, and weight in kilograms."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ",Select all records from the 'parking_events' collection where the parking lot identifier is 'A1'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ", Retrieve documents from the 'parking_events' collection that have a parking lot ID of 'A1'.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lt: 30 } }); ",Select all documents from the 'parking_events' collection where the duration of parking events is less than 30 minutes. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lt: 30 } }); ", Retrieve entries from the 'parking_events' collection that have a parking duration of under 30 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"" }); ",Retrieve all entries from the 'parking_events' collection where the vehicle's number plate matches 'XYZ-1234'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"" }); ", Find documents in the 'parking_events' collection that have a vehicle with the number plate 'XYZ-1234'.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).limit(10); ",Retrieve the first ten records from the 'parking_events' collection where the 'exit_time' field in the 'event' object of the 'response' is present. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).limit(10); ", Find a maximum of ten documents in the 'parking_events' collection that contain an 'exit_time' within the 'event' section of the 'response' data.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 5, ""response.event.duration_mins"": { $gt: 60 } }); ",Fetch all records from the 'parking_events' collection where the zone is equal to 5 and the duration of the parking event exceeds 60 minutes. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 5, ""response.event.duration_mins"": { $gt: 60 } }); ", Select documents from the 'parking_events' collection that match the criteria of being in zone 5 and having a parking duration greater than 60 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 2 } }); ",Find all parking event records in the 'parking_events' collection where the number of occupied spaces by the vehicle is greater than or equal to 2. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 2 } }); ", Retrieve documents from the 'parking_events' collection that show events where the vehicle has occupied at least 2 parking spaces.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01"") } }); ","Select all documents from the 'parking_events' collection where the entry time of the event is on or after January 1, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01"") } }); "," Retrieve records from the 'parking_events' collection with event entry times that are greater than or equal to January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lte: 1500 } }).sort({ ""response.event.entry_time"": 1 }); ","Select all documents from the 'parking_events' collection where the vehicle's weight is 1500 kilograms or less, and arrange the results by the entry time of the events in ascending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lte: 1500 } }).sort({ ""response.event.entry_time"": 1 }); "," Retrieve entries from the 'parking_events' collection for vehicles weighing no more than 1500 kg, sorted chronologically by their entry times from earliest to latest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $lt: new Date(""2023-12-31"") }, ""response.event.exit_time"": { $gte: new Date(""2023-12-01"") } }); ","Select all records from the 'parking_events' collection where the entry time of the events occurred before December 31, 2023, and the exit time of the events is on or after December 1, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $lt: new Date(""2023-12-31"") }, ""response.event.exit_time"": { $gte: new Date(""2023-12-01"") } }); "," Retrieve documents from the 'parking_events' collection where the event's entry time is earlier than December 31, 2023, while the exit time is not before December 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""response.event.vehicle.number_plate"": { $regex: /^ABC-/ } }); ",Fetch all records from the 'parking_events' collection where the parking lot identifier is 'B2' and the vehicle's number plate starts with the prefix 'ABC-'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""response.event.vehicle.number_plate"": { $regex: /^ABC-/ } }); ", Retrieve documents from the 'parking_events' collection that have a parking lot ID of 'B2' and contain vehicles whose number plate begins with 'ABC-'.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 3 }).count(); ",Count the number of parking events in the 'parking_events' collection where the zone identifier is equal to 3. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 3 }).count(); ", Determine how many entries in the 'parking_events' collection correspond to a zone value of 3.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": 45 }).sort({ ""response.event.entry_time"": -1 }); ","Find all records in the 'parking_events' collection where the event duration is exactly 45 minutes, and sort these results by the entry time in descending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": 45 }).sort({ ""response.event.entry_time"": -1 }); "," Retrieve documents from the 'parking_events' collection that have a duration of 45 minutes for the event, sorted by entry time in descending order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"", ""response.event.vehicle.space_occupied"": { $gt: 1 } }).limit(5); ",Select up to five documents from the 'parking_events' collection where the parking lot identifier is 'A1' and the number of parking spaces occupied by the vehicle is greater than one. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"", ""response.event.vehicle.space_occupied"": { $gt: 1 } }).limit(5); ", Retrieve a maximum of five entries from the 'parking_events' collection that match the parking lot ID 'A1' and have vehicles occupying more than one space.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $disk: { $exists: true } } }).skip(5).limit(10); ","Fetch parking event documents from the 'parking_events' collection where the exit time of the event is present, skipping the first 5 records and limiting the output to the next 10 entries. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $disk: { $exists: true } } }).skip(5).limit(10); "," Retrieve records from the 'parking_events' collection that include parking events with an existing exit time, while omitting the first 5 entries and returning only the subsequent 10 results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 2000 } }); ",Fetch all records from the 'parking_events' collection where the weight of the vehicle exceeds 2000 kilograms. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 2000 } }); ", Retrieve documents from the 'parking_events' collection that meet the condition of the vehicle's weight being greater than 2000 kg.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-06-01""), $lte: new Date(""2023-08-31"") } }); ","Fetch all documents from the 'parking_events' collection where the event's entry time falls between June 1, 2023, and August 31, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-06-01""), $lte: new Date(""2023-08-31"") } }); "," Retrieve entries from the 'parking_events' collection that have an event entry time on or after June 1, 2023, but not later than August 31, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 120, $lte: 180 } }); ","Select all documents from the 'parking_events' collection where the duration of the parking event falls between 120 and 180 minutes, inclusive. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 120, $lte: 180 } }); ", Retrieve entries from the 'parking_events' collection that have a duration ranging from 120 to 180 minutes for their parking events.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""C3"" }).sort({ ""response.event.exit_time"": -1 }); ","Find all records in the 'parking_events' collection where the parking lot identifier is 'C3', and arrange the results in descending order based on the exit time of the events. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""C3"" }).sort({ ""response.event.exit_time"": -1 }); "," Retrieve documents from the 'parking_events' collection that have a parking lot ID of 'C3', sorted by the exit time of the events from latest to earliest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $exists: true } }).limit(20); ",Select the first 20 records from the 'parking_events' collection where the vehicle number plate is present in the event response. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $exists: true } }).limit(20); ", Retrieve up to 20 entries from the 'parking_events' collection that contain a vehicle number plate in the associated event response.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $in: [1, 2, 3] } }); ","Select all documents from the 'parking_events' collection where the zone identifier is either 1, 2, or 3. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $in: [1, 2, 3] } }); "," Retrieve parking event records from the 'parking_events' collection that belong to zones 1, 2, or 3."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'parking_events' collection where the 'identifier.parking_lot_id' is specified for a particular facility, including the entry time, exit time, and vehicle details associated with each event. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find parking event records in the 'parking_events' collection that filter by a specific parking lot, and retrieve information such as the entry and exit times along with the vehicle's number plate and weight."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Select all parking event records from the 'parking_events' collection where the 'parking_lot_id' field is equal to ""A1"". "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); "," Retrieve all documents in the 'parking_events' collection that match the condition where the 'identifier.parking_lot_id' is ""A1""."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ",Fetch all documents from the 'parking_events' collection where the duration of the parking event exceeds 60 minutes. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ", Retrieve records from the 'parking_events' collection that indicate a parking duration greater than 60 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find().sort({ ""response.event.entry_time"": 1 }); ",Retrieve all documents from the 'parking_events' collection and sort them in ascending order based on the entry time of the response event. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find().sort({ ""response.event.entry_time"": 1 }); ", Find all records in the 'parking_events' collection and arrange them by the entry time of the event in chronological order.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1500 } }); ",Select all documents from the 'parking_events' collection where the weight of the vehicle recorded in the response event is less than 1500 kilograms. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1500 } }); ", Retrieve entries from the 'parking_events' collection that have a vehicle weight under 1500 kg as indicated in the event response.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": 2 } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEntries: { $sum: 1 } } } ]); ","Select the parking events where the zone identifier is 2 and aggregate the results by parking lot ID, counting the total number of entries for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": 2 } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEntries: { $sum: 1 } } } ]); "," Identify all parking events associated with zone 2 and group them by the parking lot ID, calculating the total entries for every distinct lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ",Calculate the average parking duration in minutes from all events recorded in the 'parking_events' collection by grouping the results together without any additional filters applied. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ", Determine the mean duration of parking events in minutes from the 'parking_events' collection by aggregating the data without applying specific criteria to narrow down the results.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Select all parking events from the 'parking_events' collection where the entry time is from January 1, 2023, to December 31, 2023, and group the results by parking lot ID while calculating the average duration of parking in minutes for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); "," Retrieve parking event data from the 'parking_events' collection for entries occurring between January 1, 2023, and December 31, 2023, and then aggregate the information by parking lot ID to compute the average duration in minutes that vehicles were parked."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ 1234"" }); ",Find all documents in the 'parking_events' collection where the vehicle's number plate is 'XYZ 1234'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ 1234"" }); ", Retrieve records from the 'parking_events' collection that have a vehicle with the number plate 'XYZ 1234'.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.updateMany({ ""identifier.zone"": 1 }, { $set: { ""response.event.duration_mins"": 30 } }); ","Update all documents in the 'parking_events' collection where the zone identifier is 1, setting the event duration to 30 minutes. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.updateMany({ ""identifier.zone"": 1 }, { $set: { ""response.event.duration_mins"": 30 } }); ", Modify every record within the 'parking_events' collection that has a zone value of 1 by assigning a duration of 30 minutes to the event response.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $project: { _id: 0, parkingLotId: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"" } } ]); ","Select the parking events from the 'parking_events' collection where the exit time exists in the event records, and project only the parking lot identifier and the duration in minutes of each event without including the document ID. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $project: { _id: 0, parkingLotId: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"" } } ]); "," Filter the 'parking_events' collection to retrieve records that have an exit time for the event, and display only the identifiers for the parking lots along with the duration of the events measured in minutes, omitting the unique document IDs."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $sort: { totalWeight: -1 } } ]); ","Group the parking events from the 'parking_events' collection by the parking lot identifier, calculating the total weight of vehicles for each lot, and then sort the results in descending order based on the total weight. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $sort: { totalWeight: -1 } } ]); "," Aggregate the data from the 'parking_events' collection by the parking lot ID, summing up the vehicle weights and ordering the outcome in decreasing order of total weight."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $lt: new Date(""2023-06-01"") } }).count(); ","Count all parking event documents in the 'parking_events' collection where the entry time recorded in the response is before June 1, 2023. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $lt: new Date(""2023-06-01"") } }).count(); "," Calculate the total number of entries in the 'parking_events' collection that have an entry time earlier than June 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 15 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Select all parking events from the 'parking_events' collection where the duration of the event is greater than 15 minutes, and tally the total count of these events, grouping the results by the parking lot identifier. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 15 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); "," Query the 'parking_events' collection for events with a duration exceeding 15 minutes, aggregating the counts while organizing the output by the identifier of the parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).sort({ ""response.event.exit_time"": -1 }).limit(10); ","Find the ten most recent parking events from the 'parking_events' collection where the exit time is recorded, sorted in descending order by exit time. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).sort({ ""response.event.exit_time"": -1 }).limit(10); "," Retrieve up to ten entries from the 'parking_events' collection that have an exit time specified, ordered by exit time from latest to earliest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: { parkingLot: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Group the parking events from the 'parking_events' collection by the parking lot ID and zone, calculating the average duration in minutes for each grouping. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: { parkingLot: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); "," Aggregate the data from the 'parking_events' collection based on the parking lot ID and zone, determining the average duration of events in minutes for each unique combination."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 2 } }).limit(5); ",Retrieve up to five parking event records from the 'parking_events' collection where the 'space_occupied' field of the vehicle is greater than or equal to two. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 2 } }).limit(5); ", Find a maximum of five documents in the 'parking_events' collection that have vehicles occupying two or more parking spaces.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lte: new Date(""2023-07-01"") } } }, { $sort: { ""response.event.exit_time"": -1 } } ]); ","Select all parking events from the 'parking_events' collection where the entry time recorded in the response event is on or before July 1, 2023, and order the results by exit time in descending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lte: new Date(""2023-07-01"") } } }, { $sort: { ""response.event.exit_time"": -1 } } ]); "," Retrieve records from the 'parking_events' collection that show entries with an entry time prior to or equal to July 1, 2023, and sort these entries by their exit time, starting with the most recent."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parkingLot: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"", weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { weight: { $gt: 2000 } } } ]); ","Select the parking lot identifier, the event duration in minutes, and the vehicle weight from the 'parking_events' collection, filtering the results to include only those entries with a vehicle weight greater than 2000 kilograms. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parkingLot: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"", weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { weight: { $gt: 2000 } } } ]); "," From the 'parking_events' collection, project the parking lot ID, duration of the event in minutes, and the vehicle's weight, while limiting the results to records where the weight exceeds 2000 kg."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $ne: null } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]);","Select all documents from the 'parking_events' collection where the exit time in the response's event is not null, and then group the results by parking lot identifier to calculate the total duration in minutes for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $ne: null } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]);"," Filter the 'parking_events' collection to find entries where the exit time in the event response exists, and group these findings by the parking lot ID to compute the cumulative duration in minutes for each parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ",Select all records from the 'parking_events' collection where the duration of the event exceeds 60 minutes. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ", Retrieve entries from the 'parking_events' collection that have a duration greater than one hour.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A123"" }).sort({ ""response.event.entry_time"": 1 }); ","Fetch all records from the 'parking_events' collection where the parking lot identifier is 'A123', and sort these entries by the event's entry time in ascending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A123"" }).sort({ ""response.event.entry_time"": 1 }); "," Retrieve documents from the 'parking_events' collection that have a parking lot ID of 'A123', arranging the results based on the entry time of the events in chronological order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $group: { _id: ""$identifier.parking_lot_id"", avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Select all parking events from the 'parking_events' collection where the exit time of the event is recorded, and then group the results by the parking lot identifier while calculating the average duration in minutes for each group. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $group: { _id: ""$identifier.parking_lot_id"", avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); "," Retrieve records from the 'parking_events' collection that have an exit time for the event, and subsequently aggregate these records by parking lot ID to determine the average duration in minutes of parking events for each lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date(""2023-01-01"") } } }, { $group: { _id: null, totalVehicles: { $sum: 1 } } } ]); ","Select all parking event records from the 'parking_events' collection where the entry time is earlier than January 1, 2023, and calculate the total number of vehicles during that period. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date(""2023-01-01"") } } }, { $group: { _id: null, totalVehicles: { $sum: 1 } } } ]); "," Query the 'parking_events' collection for events that occurred before January 1, 2023, and aggregate the results to determine the overall count of vehicles recorded."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-123"" }).count(); ",Count the number of parking events in the 'parking_events' collection where the vehicle's number plate is 'XYZ-123'. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-123"" }).count(); ", Determine how many records exist in the 'parking_events' collection for which the vehicle with the number plate 'XYZ-123' is registered.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { totalWeight: { $gt: 5000 } } } ]); ","Group the parking events by the zone identifier from the 'parking_events' collection, calculating the total weight of vehicles in each zone, and then filter the results to only include zones where the total weight exceeds 5000 kilograms. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { totalWeight: { $gt: 5000 } } } ]); "," Aggregate the data from the 'parking_events' collection to sum the vehicle weights per zone, and subsequently select only those zones where the summed weight is greater than 5000 kilograms."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lte: 30 } }).sort({ ""response.event.entry_time"": -1 }).limit(10); ","Find up to 10 parking event records from the 'parking_events' collection where the event duration is 30 minutes or less, sorted by entry time from most recent to oldest. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $lte: 30 } }).sort({ ""response.event.entry_time"": -1 }).limit(10); "," Retrieve a maximum of 10 documents from the 'parking_events' collection that have an event duration of 30 minutes or fewer, arranging the results in descending order based on the entry time of the events."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parkingLot: ""$identifier.parking_lot_id"", entryTime: ""$response.event.entry_time"", duration: ""$response.event.duration_mins"" } }, { $match: { duration: { $gt: 120 } } } ]); ","Project the parking lot identifier, entry time, and duration in minutes from the 'parking_events' collection where the duration exceeds 120 minutes. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parkingLot: ""$identifier.parking_lot_id"", entryTime: ""$response.event.entry_time"", duration: ""$response.event.duration_mins"" } }, { $match: { duration: { $gt: 120 } } } ]); "," Retrieve the parking lot ID, entry timestamp, and duration (in minutes) from the 'parking_events' collection for events where the duration is greater than 120 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Group the parking events by the parking lot identifier in the 'parking_events' collection, counting the number of events for each parking lot, and then sort the results in descending order based on the count. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); "," Aggregate the data from the 'parking_events' collection by parking lot ID, summing the total number of events per parking lot while sorting the aggregated counts from highest to lowest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $eq: 5 }, ""response.event.vehicle.space_occupied"": { $gt: 1 } }); ",Select all entries from the 'parking_events' collection where the zone identifier is 5 and the number of parking spaces occupied by the vehicles is greater than 1. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $eq: 5 }, ""response.event.vehicle.space_occupied"": { $gt: 1 } }); ", Retrieve documents from the 'parking_events' collection that have a zone value of 5 and where each vehicle occupies more than one parking space.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]); ","Retrieve all parking events from the 'parking_events' collection where the exit time of the vehicle is between January 1, 2023, and February 1, 2023, and group these events by parking lot ID while calculating the total duration of parking in minutes for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]); "," Find parking events within the 'parking_events' collection that have an exit time on or after January 1, 2023, and before February 1, 2023, then summarize the total parking duration in minutes for each unique parking lot ID."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1500 } }).sort({ ""response.event.exit_time"": 1 }).limit(5); ","Select the first five documents from the 'parking_events' collection where the weight of the vehicle is less than 1500 kilograms, and sort the results by the exit time in ascending order. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1500 } }).sort({ ""response.event.exit_time"": 1 }).limit(5); "," Retrieve up to five records from the 'parking_events' collection with vehicles weighing under 1500 kg, ordered by their exit time from earliest to latest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lte: new Date(""2023-03-01"") } } }, { $lookup: { from: ""parking_events"", localField: ""identifier.parking_lot_id"", foreignField: ""identifier.parking_lot_id"", as: ""lotDetails"" } } ]); ","Select all records from the 'parking_events' collection where the entry time of the event is on or before March 1, 2023, and join with the same collection to retrieve additional details about the parking lot using the parking_lot_id. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lte: new Date(""2023-03-01"") } } }, { $lookup: { from: ""parking_events"", localField: ""identifier.parking_lot_id"", foreignField: ""identifier.parking_lot_id"", as: ""lotDetails"" } } ]); "," Retrieve entries from the 'parking_events' collection that occurred before or on March 1, 2023, while also including associated parking lot information by performing a join on the parking_lot_id field within the same collection."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", minEntry: { $min: ""$response.event.entry_time"" }, maxExit: { $max: ""$response.event.exit_time"" } } } ]); ","Group the parking events from the 'parking_events' collection by the parking lot identifier, and calculate the earliest entry time and the latest exit time for each parking lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", minEntry: { $min: ""$response.event.entry_time"" }, maxExit: { $max: ""$response.event.exit_time"" } } } ]); "," Aggregate data from the 'parking_events' collection by the identifier of the parking lot, determining the minimum entry time and maximum exit time for each group of events associated with that parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).sort({ ""response.event.exit_time"": -1 }).limit(3); ","Select documents from the 'parking_events' collection where the exit time of an event is present, sort these results in descending order based on the exit time, and limit the output to the top three entries. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).sort({ ""response.event.exit_time"": -1 }).limit(3); "," Retrieve records from the 'parking_events' collection that have a defined exit time for events, order the results by exit time from newest to oldest, and restrict the selection to the three most recent entries."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", weightSum: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { weightSum: { $gte: 2000 } } } ]); ","Group the parking events based on the zone identifier from the 'parking_events' collection and calculate the total weight of vehicles for each zone, including only those zones where the total weight is 2000 kilograms or more. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", weightSum: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { weightSum: { $gte: 2000 } } } ]); "," Aggregate data from the 'parking_events' collection by zone identifier, summing up the vehicle weights for each zone and filtering the results to include only those zones with a total vehicle weight equal to or exceeding 2000 kilograms."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 45, $lte: 90 } }).count(); ","Count the number of parking event documents in the 'parking_events' collection where the event duration falls between 45 and 90 minutes, inclusive. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 45, $lte: 90 } }).count(); ", Calculate how many records from the 'parking_events' collection have an event duration ranging from 45 to 90 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gte: 2 } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEvents: { $sum: 1 } } } ]); ","Select all records from the 'parking_events' collection where the space occupied by the vehicle is greater than or equal to 2, and then group these records by the parking lot ID, counting the total number of events for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gte: 2 } } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEvents: { $sum: 1 } } } ]); "," From the 'parking_events' collection, filter for events where the vehicle occupies at least 2 spaces, and subsequently aggregate the results by parking lot ID to calculate the total event count for each lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01"") } } }, { $project: { vehicle: ""$response.event.vehicle.number_plate"", duration: ""$response.event.duration_mins"" } } ]);","Select all parking events from the 'parking_events' collection where the exit time is on or after January 1, 2023, and return the vehicle's number plate along with the duration of the event in minutes. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01"") } } }, { $project: { vehicle: ""$response.event.vehicle.number_plate"", duration: ""$response.event.duration_mins"" } } ]);"," Retrieve records from the 'parking_events' collection for which the exit time occurs on or after the date of January 1, 2023, and project the vehicle's number plate and the duration of the parking in minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 60 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" } } } ]); ","Select the parking events from the 'parking_events' collection where the event duration is greater than 60 minutes, and group the results by the parking lot identifier while calculating the total duration for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 60 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" } } } ]); "," Identify records in the 'parking_events' collection where the duration of events exceeds 60 minutes, and aggregate the data by parking lot ID to determine the cumulative duration of events for each lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_weight: { $avg: ""$response.event.vehicle.weight_kg"" } } }, { $match: { avg_weight: { $gt: 2000 } } } ]); ","Group the parking events in the 'parking_events' collection by the parking lot identifier, calculating the average vehicle weight, and then filter the results to include only those lots where the average weight exceeds 2000 kilograms. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_weight: { $avg: ""$response.event.vehicle.weight_kg"" } } }, { $match: { avg_weight: { $gt: 2000 } } } ]); "," Aggregate data from the 'parking_events' collection by parking lot IDs to determine the average weight of vehicles, subsequently selecting only the parking lots with an average weight greater than 2000 kg."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: { $dateToString: { format: ""%Y-%m"", date: ""$response.event.entry_time"" } }, total_vehicles: { $sum: 1 } } } ]); ","Aggregate data from the 'parking_events' collection to count the total number of vehicles parked, filtering for events where the entry time falls between January 1, 2023, and December 31, 2023, grouping the results by month and year of the entry time. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: { $dateToString: { format: ""%Y-%m"", date: ""$response.event.entry_time"" } }, total_vehicles: { $sum: 1 } } } ]); "," Summarize the number of vehicles from the 'parking_events' collection, applying a condition to include only records with entry times from the start of 2023 through the end of 2023, and grouping the outcome by the month and year extracted from the entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_space: { $sum: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { total_space: -1 } } ]); ","Group the parking events by their zone from the 'parking_events' collection, calculating the total space occupied by vehicles for each zone, and sort the results in descending order based on the total space. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_space: { $sum: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { total_space: -1 } } ]); "," Aggregate the data within the 'parking_events' collection by zone, summing up the space occupied by vehicles, and order the zones by the total space occupied in a descending manner."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $unwind: ""$response.event.vehicle"" }, { $group: { _id: ""$response.event.vehicle.number_plate"", total_duration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { total_duration: -1 } }, { $limit: 5 } ]); ","Unwind the parking events in the 'parking_events' collection to access each vehicle's details, then group the results by the vehicle's number plate while summing up the total duration in minutes for each vehicle, and finally sort the vehicles in descending order of total duration, limiting the results to the top five entries. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $unwind: ""$response.event.vehicle"" }, { $group: { _id: ""$response.event.vehicle.number_plate"", total_duration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { total_duration: -1 } }, { $limit: 5 } ]); "," From the 'parking_events' collection, decompose the parking records to examine individual vehicles, aggregating the durations in minutes by vehicle number plate, sorting the total durations from highest to lowest, and only returning the five vehicles with the longest parking times."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gt: 2 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_entries: { $sum: 1 } } }, { $sort: { total_entries: -1 } } ]); ","Select records from the 'parking_events' collection where the 'space_occupied' field in the vehicle object is greater than 2, then group these entries by the 'parking_lot_id' and count the total number of entries for each parking lot, sorting the results in descending order of total entries. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gt: 2 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_entries: { $sum: 1 } } }, { $sort: { total_entries: -1 } } ]); "," Retrieve data from the 'parking_events' collection filtering for vehicles that occupy more than 2 spaces, group the results by 'parking_lot_id' to sum the total entries for each lot, and sort the output by the total entries in descending order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", average_duration: { $avg: ""$response.event.duration_mins"" } } }, { $match: { average_duration: { $gte: 30 } } } ]); ","Group the parking events by zone from the 'parking_events' collection and calculate the average duration of events in minutes, then filter the results to include only those zones where the average duration is at least 30 minutes. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", average_duration: { $avg: ""$response.event.duration_mins"" } } }, { $match: { average_duration: { $gte: 30 } } } ]); "," From the 'parking_events' collection, aggregate the parking events by their zone identifier to find the average event duration in minutes, and subsequently select only those zones where this average duration meets or exceeds 30 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-06-01T00:00:00Z""), $lt: new Date(""2023-06-30T23:59:59Z"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Gather all parking event records from the 'parking_events' collection where the exit time of the event falls between June 1, 2023, and June 30, 2023, then group the results by parking lot ID and count the number of occurrences for each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-06-01T00:00:00Z""), $lt: new Date(""2023-06-30T23:59:59Z"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); "," Select documents from the 'parking_events' collection where the exit time for events is greater than or equal to June 1, 2023, and less than June 30, 2023, and summarize the total number of events for each parking lot by grouping them based on their identifiers."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, max_duration: { $max: ""$response.event.duration_mins"" } } }, { $project: { _id: 0, max_duration: 1 } } ]); ",Calculate the maximum duration in minutes from the parking events in the 'parking_events' collection by grouping all records together and excluding the identifier from the output. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, max_duration: { $max: ""$response.event.duration_mins"" } } }, { $project: { _id: 0, max_duration: 1 } } ]); ", Determine the highest duration in minutes of parking events within the 'parking_events' collection by aggregating all entries and projecting only the maximum duration while omitting the identifier from the results.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $lt: 5 } } }, { $group: { _id: ""$response.event.vehicle.number_plate"", short_stays: { $sum: 1 } } }, { $sort: { short_stays: -1 } } ]); ","Select all parking events from the 'parking_events' collection where the event duration is less than 5 minutes, group the results by vehicle number plate while counting the occurrences of short stays, and sort the final output in descending order of the short stay count. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $lt: 5 } } }, { $group: { _id: ""$response.event.vehicle.number_plate"", short_stays: { $sum: 1 } } }, { $sort: { short_stays: -1 } } ]); "," Retrieve records from the 'parking_events' collection that have event durations under 5 minutes, aggregate these by the vehicle's number plate to sum up the number of brief stays, and present the results sorted by the count of short stays in a descending manner."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_space: { $avg: ""$response.event.vehicle.space_occupied"" } } }, { $match: { avg_space: { $gte: 3 } } } ]); ","Group the parking events by parking lot ID from the 'parking_events' collection and calculate the average space occupied by vehicles, selecting only those parking lots where the average space occupied is greater than or equal to 3. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_space: { $avg: ""$response.event.vehicle.space_occupied"" } } }, { $match: { avg_space: { $gte: 3 } } } ]); "," Aggregate data from the 'parking_events' collection to determine the average number of parking spaces occupied per vehicle for each parking lot, filtering the results to include only those lots that have an average space occupied of 3 or more."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"", weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { duration: { $gt: 20 }, weight: { $lt: 1500 } } } ]); ","Project the parking lot ID, zone, duration in minutes, and vehicle weight from the 'parking_events' collection, filtering for records where the duration exceeds 20 minutes and the weight is less than 1500 kilograms. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"", weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { duration: { $gt: 20 }, weight: { $lt: 1500 } } } ]); "," Select the parking lot identifier, zone, event duration, and vehicle weight from the 'parking_events' collection, only including documents that have a duration greater than 20 minutes and a vehicle weight under 1500 kilograms."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date(Date.now() - 604800000) } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_revenue: { $sum: { $multiply: [""$response.event.duration_mins"", 2] } } } } ]); ","Select entries from the 'parking_events' collection where the entry time of the parking events occurred more than seven days ago, and group the results by parking lot ID, calculating the total revenue by multiplying the duration in minutes by two. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date(Date.now() - 604800000) } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_revenue: { $sum: { $multiply: [""$response.event.duration_mins"", 2] } } } } ]); "," Gather data from the 'parking_events' collection for events that have an entry time earlier than a week ago, grouping the outcomes by parking lot ID and computing the total revenue generated by multiplying the duration in minutes by a factor of two."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"", vehicle_space: ""$response.event.vehicle.space_occupied"" } }, { $match: { vehicle_space: { $gt: 2 }, duration: { $gte: 1 } } } ]); ","Select the parking lot ID, zone, duration in minutes, and the space occupied by vehicles from the 'parking_events' collection, while filtering for records where the space occupied is greater than 2 and the duration is at least 1 minute. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"", vehicle_space: ""$response.event.vehicle.space_occupied"" } }, { $match: { vehicle_space: { $gt: 2 }, duration: { $gte: 1 } } } ]); "," From the 'parking_events' collection, project the parking lot identifier, zone details, duration in minutes, and occupied vehicle space, applying a filter to include only those entries where the vehicle space exceeds 2 and the duration meets or exceeds 1 minute."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: 'parking_events', localField: 'identifier.parking_lot_id', foreignField: 'identifier.parking_lot_id', as: 'events' } }, { $project: { lot_id: ""$identifier.parking_lot_id"", event_count: { $size: ""$events"" } } } ]); ","Join the 'parking_events' collection with itself, linking entries based on the 'parking_lot_id' field in the identifier, and return a list that includes each parking lot ID along with the count of related events. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: 'parking_events', localField: 'identifier.parking_lot_id', foreignField: 'identifier.parking_lot_id', as: 'events' } }, { $project: { lot_id: ""$identifier.parking_lot_id"", event_count: { $size: ""$events"" } } } ]); "," Aggregate data from the 'parking_events' collection by performing a self-join on the 'parking_lot_id', and project the lot ID alongside the total number of associated events for each parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_weight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $project: { zone: ""$_id"", total_weight: 1 } } ]); ",Group the parking events by the zone identifier in the 'parking_events' collection and calculate the total weight of vehicles for each zone by summing the weight_kg field from the event's vehicle information. 
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_weight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $project: { zone: ""$_id"", total_weight: 1 } } ]); "," Aggregate the data in the 'parking_events' collection by zone, summing the weight of the vehicles to get the total weight for each distinct zone identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $sort: { ""response.event.exit_time"": -1 } }, { $group: { _id: ""$identifier.parking_lot_id"", latest_exit: { $first: ""$response.event.exit_time"" } } } ]); ","Sort the parking events in the 'parking_events' collection by the exit time of the event in descending order, and then group the results by the parking lot identifier while retrieving the latest exit time for each facility. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $sort: { ""response.event.exit_time"": -1 } }, { $group: { _id: ""$identifier.parking_lot_id"", latest_exit: { $first: ""$response.event.exit_time"" } } } ]); "," Organize the parking events from the 'parking_events' collection by the exit time of each event from newest to oldest, and subsequently group the entries by the identifier of the parking lot, extracting the most recent exit time for each lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", unique_vehicles: { $addToSet: ""$response.event.vehicle.number_plate"" } } }, { $project: { lot_id: ""$_id"", unique_vehicle_count: { $size: ""$unique_vehicles"" } } } ]); ","Group the parking events from the 'parking_events' collection by the parking lot identifier, and for each group, compile a set of unique vehicle number plates. Then, project the parking lot ID along with the count of unique vehicles in each lot. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", unique_vehicles: { $addToSet: ""$response.event.vehicle.number_plate"" } } }, { $project: { lot_id: ""$_id"", unique_vehicle_count: { $size: ""$unique_vehicles"" } } } ]); "," Aggregate the data from the 'parking_events' collection by the parking lot ID, collecting unique vehicle number plates, and then output the lot ID alongside the total number of distinct vehicles for each parking facility."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'parking_events' collection where the entry time is on or after January 1, 2023, and project the vehicle's number plate and space occupied along with the event's exit time. "
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find parking event records in the 'parking_events' collection that have an entry time of January 1, 2023, or later, and include the vehicle's number plate and space occupied in the results, as well as the corresponding exit time of the event."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ",Retrieve all documents from the 'patient_events' collection where the hospital identifier is equal to 'H001'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ", Find entries in the 'patient_events' collection that have a hospital ID matching 'H001'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""W01"" }); ",Retrieve all documents from the 'patient_events' collection where the ward number specified in the identifier is 'W01'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""W01"" }); ", Find records in the 'patient_events' collection that have an identifier with a ward number equal to 'W01'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B10"" }); ",Fetch all records from the 'patient_events' collection where the bed identifier is 'B10'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B10"" }); ", Retrieve documents from the 'patient_events' collection that have a bed_id value of 'B10'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ",Obtain all records from the 'patient_events' collection where the priority of the event in the response is classified as 'Urgent'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ", Retrieve entries from the 'patient_events' collection that have an 'Urgent' priority set for the event within the response object.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ","Find all documents in the 'patient_events' collection where the 'alert_type' within the 'response.event' field is set to ""FallDetected."" "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); "," Retrieve entries from the 'patient_events' collection that have an 'alert_type' of ""FallDetected"" in the 'response.event' data field."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Retrieve all records from the 'patient_events' collection where the heart rate in the biometrics data exceeds 100 beats per minute. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ", Find entries in the 'patient_events' collection that have a heart rate value greater than 100 recorded in their biometrics information.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 90 } }); ",Select all documents from the 'patient_events' collection where the blood pressure recorded in the biometrics under the event response is less than 90. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 90 } }); ", Retrieve entries from the 'patient_events' collection in which the blood pressure data within the event biometrics is below 90.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Retrieve all documents from the 'patient_events' collection where the oxygen saturation value in the event's biometrics is greater than or equal to 95. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ", Find records in the 'patient_events' collection that have an oxygen saturation level of at least 95 within the biometrics data of their events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ",Select all documents from the 'patient_events' collection where the 'movement_patterns' field within the 'biometrics' sub-document of the 'event' object in the 'response' exists. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ", Retrieve records from the 'patient_events' collection that contain the 'movement_patterns' attribute in the 'biometrics' section of the 'event' element within the 'response' document.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Routine"" } }); ",Select all documents from the 'patient_events' collection where the event priority in the response is not classified as 'Routine'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Routine"" } }); ", Retrieve entries from the 'patient_events' collection where the priority level of the response event does not equal 'Routine'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Select all documents from the 'patient_events' collection that contain exactly three biometric entries in the 'response.event.biometrics' array. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ", Retrieve entries from the 'patient_events' collection where the array in 'response.event.biometrics' has a size of three.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H002"", ""response.event.alert_type"": ""VitalSigns"" }); ",Find all records in the 'patient_events' collection where the hospital ID is 'H002' and the alert type in the response event is 'VitalSigns'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H002"", ""response.event.alert_type"": ""VitalSigns"" }); ", Retrieve documents from the 'patient_events' collection that correspond to the hospital with ID 'H002' and have an alert type of 'VitalSigns' within their event response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""W02"", ""response.event.priority"": ""Emergency"" }); ",Find all records in the 'patient_events' collection where the ward number is 'W02' and the event priority is classified as 'Emergency'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""W02"", ""response.event.priority"": ""Emergency"" }); ", Retrieve documents from the 'patient_events' collection that meet the criteria of having a ward number of 'W02' and an event priority listed as 'Emergency'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": 80 }).sort({ ""identifier.bed_id"": 1 }); ","Find all patient event records in the 'patient_events' collection where the heart rate value in the biometrics field is exactly 80, and sort these records by the bed ID in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": 80 }).sort({ ""identifier.bed_id"": 1 }); "," Retrieve documents from the 'patient_events' collection that have a heart rate of 80 in the biometrics section, and arrange the results in ascending order based on the bed ID."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H003"" }).limit(5); ",Fetch a maximum of five documents from the 'patient_events' collection where the hospital ID in the identifier is 'H003'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H003"" }).limit(5); "," Retrieve up to five entries from the 'patient_events' collection filtered by the identifier field, specifically for records where the hospital ID equals 'H003'."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": { $in: [""FallDetected"", ""Medication""] } }); ",Retrieve all documents from the 'patient_events' collection where the 'alert_type' in the 'response.event' field is either 'FallDetected' or 'Medication'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": { $in: [""FallDetected"", ""Medication""] } }); ", Find entries in the 'patient_events' collection that have an 'alert_type' of 'FallDetected' or 'Medication' within the 'response.event' property.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $gt: 120, $lt: 180 } }); ",Select all entries from the 'patient_events' collection where the blood pressure recorded in the event biometrics is greater than 120 and less than 180. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $gt: 120, $lt: 180 } }); ", Retrieve documents from the 'patient_events' collection that have blood pressure measurements in the event biometrics field which exceed 120 and are below 180.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().sort({ ""response.event.priority"": -1 }).limit(10); ","Fetch all records from the 'patient_events' collection, sorted by the 'priority' field within the 'response.event' object in descending order, limiting the results to the top 10 entries. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().sort({ ""response.event.priority"": -1 }).limit(10); "," Select documents from the 'patient_events' collection, ordering them by the 'response.event.priority' attribute in a descending manner, and restrict the output to a maximum of 10 items."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B01"", ""response.event.priority"": ""Routine"" }).count(); ",Count all entries in the 'patient_events' collection where the bed identifier is 'B01' and the event priority is categorized as 'Routine'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B01"", ""response.event.priority"": ""Routine"" }).count(); ", Find the total number of documents in the 'patient_events' collection that have a bed_id of 'B01' and an event priority labeled as 'Routine'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $regex: /^[0-9]+$/ } }); ","Find all records in the 'patient_events' collection where the heart rate in the biometrics data matches a numeric pattern, specifically an expression that begins with one or more digits. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $regex: /^[0-9]+$/ } }); "," Retrieve documents from the 'patient_events' collection that contain heart rate values in the biometrics section, filtered to include only those heart rates that consist entirely of numbers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all patient event documents from the 'patient_events' collection where the hospital_id, ward_number, and bed_id identifiers match specific criteria, including details about the event priority and alert type, as well as the relevant biometrics such as heart rate and blood pressure. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Find documents in the 'patient_events' collection that correspond to certain hospital_id, ward_number, and bed_id, including event details like priority and alert type, along with associated biometrics, which encompass heart rate and blood pressure metrics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ",Find all entries in the 'patient_events' collection where the hospital identifier is 'H001'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ", Retrieve documents from the 'patient_events' collection that have a hospital_id field matching 'H001'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 2 }); ",Fetch all documents from the 'patient_events' collection where the ward number in the identifier is equal to 2. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 2 }); ", Retrieve entries from the 'patient_events' collection that have a ward number of 2 in their identifier field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B12345"" }); ",Fetch all documents from the 'patient_events' collection where the bed identifier is 'B12345'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B12345"" }); ", Retrieve entries from the 'patient_events' collection that correspond to the bed ID 'B12345'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }); ",Fetch all entries from the 'patient_events' collection where the priority of the event in the response is classified as 'Emergency'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }); ", Retrieve all records from the 'patient_events' collection that have an event priority marked as 'Emergency' in the response field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ",Retrieve all documents from the 'patient_events' collection where the 'alert_type' within the 'response.event' field is set to 'FallDetected'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ", Find entries in the 'patient_events' collection that have an 'alert_type' of 'FallDetected' in the 'response.event' section.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Select all documents from the 'patient_events' collection where the heart rate recorded in the biometrics section of the event response is greater than 100. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ", Retrieve entries from the 'patient_events' collection that indicate a heart rate exceeding 100 within the biometrics data of the response event.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ",Select all documents from the 'patient_events' collection where the blood pressure readings in the biometrics data are below 120. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ", Retrieve entries from the 'patient_events' collection that have blood pressure measurements in the biometrics section less than 120.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Select all records from the 'patient_events' collection where the oxygen saturation level in the biometrics field is greater than or equal to 95. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ", Retrieve entries from the 'patient_events' collection that have an oxygen saturation measurement of 95 or higher in the biometrics section.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ",Select all records from the 'patient_events' collection where the 'movement_patterns' field within the 'biometrics' array of the 'event' object inside the 'response' property is present. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ", Retrieve documents from the 'patient_events' collection that contain the 'movement_patterns' attribute in the 'biometrics' array nested within the 'event' object of the 'response' field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""identifier.hospital_id"": 1 }); ","Find all records from the 'patient_events' collection where the event priority in the response is classified as 'Urgent', and arrange these results by the hospital identifier in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""identifier.hospital_id"": 1 }); "," Retrieve documents from the 'patient_events' collection that have an event marked with 'Urgent' priority in the response, sorted in ascending order by the hospital_id within the identifier field."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $elemMatch: { heart_rate: { $gte: 60, $lte: 100 } } } }); ",Find all documents in the 'patient_events' collection where the biometrics array includes a heart rate value between 60 and 100. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $elemMatch: { heart_rate: { $gte: 60, $lte: 100 } } } }); ", Retrieve records from the 'patient_events' collection that have at least one biometrics entry with a heart rate that falls in the range of 60 to 100.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H002"", ""response.event.alert_type"": ""VitalSigns"" }); ",Find all records in the 'patient_events' collection where the hospital ID is 'H002' and the alert type within the event response is 'VitalSigns'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H002"", ""response.event.alert_type"": ""VitalSigns"" }); ", Retrieve entries from the 'patient_events' collection that match the condition of having a hospital ID of 'H002' along with an alert type of 'VitalSigns' in the event response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 3, ""response.event.priority"": ""Routine"" }); ",Select all records from the 'patient_events' collection where the ward number is 3 and the event priority is categorized as 'Routine'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 3, ""response.event.priority"": ""Routine"" }); ", Retrieve entries from the 'patient_events' collection that have a ward number of 3 and an event priority marked as 'Routine'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B54321"", ""response.event.alert_type"": ""Medication"" }); ",Retrieve documents from the 'patient_events' collection where the 'bed_id' is 'B54321' and the 'alert_type' in the 'response.event' is 'Medication'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B54321"", ""response.event.alert_type"": ""Medication"" }); ", Find entries in the 'patient_events' collection that have a 'bed_id' of 'B54321' and an 'alert_type' of 'Medication' within the 'response.event' field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $ne: null } }).limit(10); ",Find the first ten records from the 'patient_events' collection where the heart rate data in the biometrics section of the event response is not null. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $ne: null } }).limit(10); ", Retrieve up to ten documents from the 'patient_events' collection that have a defined heart rate value within the biometrics of the event response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }).sort({ ""response.event.priority"": -1 }); ","Fetch all documents from the 'patient_events' collection where the hospital ID is 'H001', and sort the results by the event priority in descending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }).sort({ ""response.event.priority"": -1 }); "," Retrieve entries from the 'patient_events' collection that have the hospital identifier set to 'H001', ordering the findings by the priority of the events from highest to lowest."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Retrieve all records from the 'patient_events' collection where the 'biometrics' array within the 'event' response contains exactly three elements. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ", Find entries in the 'patient_events' collection that have a 'biometrics' array within the 'event' response having a size of three.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": { $in: [1, 2, 3] } }); ","Find all records in the 'patient_events' collection where the ward number is either 1, 2, or 3. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": { $in: [1, 2, 3] } }); "," Retrieve documents from the 'patient_events' collection that have a ward number of 1, 2, or 3."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.bed_id"": ""B12345"" }); ",Find a single document in the 'patient_events' collection where the bed ID is 'B12345' as specified in the identifier field. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.bed_id"": ""B12345"" }); ", Retrieve one record from the 'patient_events' collection that matches the bed_id value of 'B12345' within its identifier.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 90 } }).sort({ ""identifier.bed_id"": 1 }); ","Select all documents from the 'patient_events' collection where the oxygen saturation in the biometrics response event is greater than or equal to 90, and sort the results by the bed ID in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 90 } }).sort({ ""identifier.bed_id"": 1 }); "," Retrieve records from the 'patient_events' collection where the oxygen saturation levels recorded in the event's biometrics are at least 90, arranging the output by the bed ID in increasing sequence."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'patient_events' collection where the 'hospital_id', 'ward_number', and 'bed_id' fields are filtered to specific values, ensuring that the document includes the associated event details, priority, alert type, and biometrics information. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Select all records in the 'patient_events' collection that match given values for 'hospital_id', 'ward_number', and 'bed_id', while also retrieving comprehensive event data including priority levels, alert types, and biometric readings."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H1234"" }); ",Select all documents from the 'patient_events' collection where the hospital identifier is 'H1234'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H1234"" }); ", Retrieve entries from the 'patient_events' collection that have a hospital_id of 'H1234' in their identifier field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 3, ""response.event.priority"": ""Urgent"" }); ",Retrieve all records from the 'patient_events' collection where the ward number is 3 and the event priority is marked as Urgent. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 3, ""response.event.priority"": ""Urgent"" }); ", Find patient events in the 'patient_events' collection that have a ward number of 3 and an event priority classified as Urgent.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } }]); ","Aggregate all records in the 'patient_events' collection where the 'alert_type' in the 'response.event' is 'FallDetected', and group the results by the 'bed_id' from the 'identifier', counting the occurrences for each bed. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } }]); "," Select entries from the 'patient_events' collection that have an 'alert_type' of 'FallDetected', and then group these entries by 'bed_id' in the 'identifier', calculating the total count of alerts per bed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }).sort({ ""response.event.priority"": 1 }); ","Select all documents from the 'patient_events' collection where the heart rate in the biometrics data exceeds 100, and arrange the results in ascending order by the event priority. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }).sort({ ""response.event.priority"": 1 }); "," Find patient event records in the 'patient_events' collection that have a heart rate greater than 100 in their biometrics, sorted by the priority of the event from lowest to highest."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B12"" }).limit(10); ",Fetch up to ten records from the 'patient_events' collection where the patient bed identifier is 'B12'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B12"" }).limit(10); ", Retrieve a maximum of ten documents from the 'patient_events' collection that correspond to the bed ID 'B12'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } }]); ",Unwind the biometrics array from each event in the 'patient_events' collection and calculate the average heart rate across all events present in the collection. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } }]); ", Expand the biometrics data in the 'patient_events' collection and determine the average heart rate for all recorded events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 90 } }); ",Select all records from the 'patient_events' collection where the blood pressure value within the biometrics of the event response is less than 90. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 90 } }); ", Retrieve documents from the 'patient_events' collection that have a blood pressure reading in the event's biometrics below 90.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", heart_rate: ""$response.event.biometrics.heart_rate"" } }]); ","Select all documents from the 'patient_events' collection where the 'alert_type' under 'response.event' is specified as 'VitalSigns', and return the 'hospital_id' along with the patient's 'heart_rate' from the biometrics. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", heart_rate: ""$response.event.biometrics.heart_rate"" } }]); "," From the 'patient_events' collection, filter to find entries where the alert type within 'response.event' is 'VitalSigns', projecting the 'hospital_id' and 'heart_rate' data from the biometrics for each matched document."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $in: [""Emergency"", ""Urgent""] } }).sort({ ""identifier.hospital_id"": 1, ""identifier.ward_number"": 1 }); ","Select all entries from the 'patient_events' collection where the event priority is either 'Emergency' or 'Urgent', and arrange the results by the hospital ID and ward number in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $in: [""Emergency"", ""Urgent""] } }).sort({ ""identifier.hospital_id"": 1, ""identifier.ward_number"": 1 }); "," Retrieve records from the 'patient_events' collection that have an event priority classified as 'Emergency' or 'Urgent', sorted in ascending order by both the hospital ID and ward number."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.biometrics.movement_patterns"": { $exists: true } } }, { $lookup: { from: ""another_collection"", localField: ""identifier.bed_id"", foreignField: ""bed_id"", as: ""related_data"" } }]); ","Select all documents from the 'patient_events' collection where the 'movement_patterns' field within the 'biometrics' array exists in the 'response.event' object, and join this data with another collection using the 'bed_id' field from the 'identifier' to relate to the corresponding 'bed_id' in the other collection. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.biometrics.movement_patterns"": { $exists: true } } }, { $lookup: { from: ""another_collection"", localField: ""identifier.bed_id"", foreignField: ""bed_id"", as: ""related_data"" } }]); "," Retrieve entries from the 'patient_events' collection that contain the 'movement_patterns' attribute in the 'biometrics' section of the 'response.event', while also linking these records to data in another collection by matching the 'bed_id' in the 'identifier' with the 'bed_id' in the related collection."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""identifier.hospital_id"": ""H5678"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } }]); ","Aggregate data from the 'patient_events' collection to count the total number of alerts for each ward, filtering to include only entries from the hospital with the identifier 'H5678'. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""identifier.hospital_id"": ""H5678"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } }]); "," In the 'patient_events' collection, group the records by ward number and calculate the total alerts, specifically considering only those associated with the hospital ID 'H5678'."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Fetch documents from the 'patient_events' collection where the oxygen saturation in the biometrics data of the response event is greater than or equal to 95. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ", Retrieve records from the 'patient_events' collection that indicate an oxygen saturation level of 95 or higher within the biometrics section of the event response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""Medication"" } }, { $sort: { ""response.event.priority"": -1 } }, { $project: { _id: 0, bed_id: ""$identifier.bed_id"", alert_type: ""$response.event.alert_type"" } }]); ","Select documents from the 'patient_events' collection where the alert type in the response event is 'Medication', sort the results by the priority of the events in descending order, and only return the bed ID and alert type while excluding the document IDs. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""Medication"" } }, { $sort: { ""response.event.priority"": -1 } }, { $project: { _id: 0, bed_id: ""$identifier.bed_id"", alert_type: ""$response.event.alert_type"" } }]); "," Retrieve records from the 'patient_events' collection for events categorized as 'Medication', arrange these findings by the event priority in descending order, and display only the bed ID and alert type, omitting the IDs of the documents."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.ward_number"": 2 }); ",Retrieve a single document from the 'patient_events' collection where the ward number in the identifier matches the value 2. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.ward_number"": 2 }); ", Find one entry in the 'patient_events' collection that has a ward number of 2 in the identifier field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gte: 70, $lte: 90 } } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } }]); ","Unwind the 'biometrics' array in the 'patient_events' collection and select documents where the 'heart_rate' in 'response.event.biometrics' is between 70 and 90, then group the results by 'bed_id' and count the occurrences for each bed. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gte: 70, $lte: 90 } } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } }]); "," Expand the 'biometrics' array from the 'patient_events' collection, filtering for entries where the 'heart_rate' in 'response.event.biometrics' falls within the range of 70 to 90, and aggregate the data by 'bed_id' to tally the total for each bed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"", ""response.event.priority"": ""Routine"" }); ",Select all documents from the 'patient_events' collection where the 'response.event.alert_type' is 'VitalSigns' and the 'response.event.priority' is 'Routine'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"", ""response.event.priority"": ""Routine"" }); ", Retrieve entries from the 'patient_events' collection for those records that have an 'alert_type' of 'VitalSigns' and a 'priority' status of 'Routine' in the 'response.event' field.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $group: { _id: ""$identifier.hospital_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } }, { $sort: { maxOxygenSaturation: -1 } }]); ","Group the records in the 'patient_events' collection by the hospital identifier and calculate the maximum oxygen saturation from the biometrics data, then sort the results in descending order based on the maximum oxygen saturation values. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $group: { _id: ""$identifier.hospital_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } }, { $sort: { maxOxygenSaturation: -1 } }]); "," Aggregate the entries in the 'patient_events' collection by the hospital ID, finding the highest oxygen saturation recorded in the biometrics and then order the results from highest to lowest oxygen saturation levels."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H1234"", ""response.event.priority"": ""Emergency"" }).count(); ",Count all entries in the 'patient_events' collection where the hospital identifier is 'H1234' and the event priority level is classified as 'Emergency'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H1234"", ""response.event.priority"": ""Emergency"" }).count(); ", Determine the total number of documents in the 'patient_events' collection that have a hospital ID of 'H1234' and indicate an event priority of 'Emergency'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"" } }]); ","Select all records from the 'patient_events' collection where the alert type in the event response indicates a 'FallDetected', and return the corresponding hospital ID and ward number for each matching record. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([{ $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"" } }]); "," Retrieve entries from the 'patient_events' collection that have an alert type of 'FallDetected' in the event response, and project only the hospital ID and ward number fields from those entries."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Select all records from the 'patient_events' collection where the 'hospital_id', 'ward_number', and 'bed_id' match specific criteria, and include the details of the response object, which contains the event information such as priority, alert type, and biometrics like heart rate, blood pressure, oxygen saturation, and movement patterns. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Retrieve documents from the 'patient_events' collection filtered by specific values for 'hospital_id', 'ward_number', and 'bed_id', while projecting the response fields that detail events with their priority, alert type, and biometric measurements including heart rate, blood pressure, oxygen saturation, and movement patterns."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""12345"" }); ",Extract all documents from the 'patient_events' collection where the hospital identifier is '12345'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""12345"" }); ", Retrieve entries from the 'patient_events' collection that have a hospital ID of '12345'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""A101"" }); ",Find all entries in the 'patient_events' collection where the ward number specified in the identifier is 'A101'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""A101"" }); ", Retrieve documents from the 'patient_events' collection that have the identifier's ward number equal to 'A101'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $eq: ""Emergency"" } }); ",Retrieve all entries from the 'patient_events' collection where the event priority is classified as 'Emergency'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $eq: ""Emergency"" } }); ", Find records in the 'patient_events' collection that have an event priority of 'Emergency'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"", ""identifier.bed_id"": ""B32"" }); ",Retrieve patient event records from the 'patient_events' collection where the alert type is 'FallDetected' and the bed ID is 'B32'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"", ""identifier.bed_id"": ""B32"" }); ", Find all documents in the 'patient_events' collection that indicate a 'FallDetected' alert type and are associated with the bed ID 'B32'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Find all records in the 'patient_events' collection where the heart rate in the biometrics response exceeds 100. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ", Retrieve documents from the 'patient_events' collection that have a heart rate measurement greater than 100 in the response event's biometrics data.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ",Find all records in the 'patient_events' collection where the blood pressure value in the biometrics event is less than 120. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ", Retrieve documents from the 'patient_events' collection that have a blood pressure reading in the event's biometrics lower than 120.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Select all records from the 'patient_events' collection where the event type in the response is labeled as 'Medication', and group the results by the hospital identifier, counting the occurrences for each hospital. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); "," Retrieve data from the 'patient_events' collection that filters for events categorized as 'Medication' in the response, and aggregate the data by the hospital ID, summing the total number of incidents per hospital."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.ward_number"": { $in: [""A101"", ""B202""] } } }, { $sort: { ""response.event.priority"": 1 } } ]); ","Select all records from the 'patient_events' collection where the ward number is either 'A101' or 'B202', and order the results by the event priority in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.ward_number"": { $in: [""A101"", ""B202""] } } }, { $sort: { ""response.event.priority"": 1 } } ]); "," Retrieve entries from the 'patient_events' collection that have a ward number of 'A101' or 'B202', sorting the outcomes by their event priority in increasing sequence."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ","Aggregate the heart rates from the biometrics data by unwinding the array and computing the average heart rate for each hospital, based on the hospital_id in the 'patient_events' collection. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ", Extract average heart rates from the biometrics field by flattening the array and grouping the results by hospital_id from the 'patient_events' collection.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $count: ""urgent_event_count"" } ]); ",Count all documents in the 'patient_events' collection where the event priority is categorized as 'Urgent'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $count: ""urgent_event_count"" } ]); ", Determine the total number of records in the 'patient_events' collection that have an event priority marked as 'Urgent'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", maxOxygenSaturation: { $max: { $arrayElemAt: [""$response.event.biometrics.oxygen_saturation"", 0] } } } } ]); ","Group the entries in the 'patient_events' collection by the ward number in the identifier, and calculate the maximum oxygen saturation from the first element of the biometrics array within the response event for each ward. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", maxOxygenSaturation: { $max: { $arrayElemAt: [""$response.event.biometrics.oxygen_saturation"", 0] } } } } ]); "," Aggregate data from the 'patient_events' collection by ward number identified in the documents, determining the highest oxygen saturation value from the initial biometrics entry for each ward's events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics.movement_patterns"": { $exists: true, $ne: [] } } }, { $project: { hospital_id: ""$identifier.hospital_id"", movement_patterns: ""$response.event.biometrics.movement_patterns"" } } ]); ","Select documents from the 'patient_events' collection where the movement patterns in the biometrics of the event response exists and is not empty, and return the hospital ID along with the respective movement patterns. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics.movement_patterns"": { $exists: true, $ne: [] } } }, { $project: { hospital_id: ""$identifier.hospital_id"", movement_patterns: ""$response.event.biometrics.movement_patterns"" } } ]); "," Query the 'patient_events' collection for entries that have non-empty movement patterns recorded in the event's biometrics, retrieving the hospital identifier and the corresponding movement patterns."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", totalBloodPressure: { $sum: ""$response.event.biometrics.blood_pressure"" } } }, { $sort: { totalBloodPressure: -1 } } ]); ","Aggregate the documents from the 'patient_events' collection by grouping them according to the hospital ID in the identifier field, calculating the total sum of the blood pressure readings from the biometrics data within the event response, and then sort the results in descending order based on the total blood pressure. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", totalBloodPressure: { $sum: ""$response.event.biometrics.blood_pressure"" } } }, { $sort: { totalBloodPressure: -1 } } ]); "," Group the records in the 'patient_events' collection by hospital ID found in the identifier, summing the blood pressure values from the event's biometrics data, and subsequently arrange the grouped results in order from highest to lowest blood pressure total."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } }, { $match: { ""related_events.response.event.alert_type"": ""VitalSigns"" } } ]); ","Join the 'patient_events' collection with itself to gather related events based on matching hospital IDs, and filter the results to only include incidents with an alert type of 'VitalSigns'. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } }, { $match: { ""related_events.response.event.alert_type"": ""VitalSigns"" } } ]); "," Aggregate data from the 'patient_events' collection by performing a self-join on the hospital ID, subsequently narrowing down the results to those where the alert type within related events is 'VitalSigns'."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, overallAvgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ","Extract the average heart rate from the biometrics data found in the 'patient_events' collection, after separating each entry in the biometrics array and grouping the results without any specific identifier. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, overallAvgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); "," Calculate the overall average heart rate by unwinding the biometrics array within the event responses in the 'patient_events' collection, while grouping all records together without an identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", alert_type: ""$response.event.alert_type"" } } ]); ","Select documents from the 'patient_events' collection where the alert type in the event response is classified as 'Medication', and project the hospital ID along with the alert type. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", alert_type: ""$response.event.alert_type"" } } ]); "," Filter the 'patient_events' collection to retrieve records with an event alert type of 'Medication', while including only the hospital ID and the alert type in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", minOxygenSaturation: { $min: { $arrayElemAt: [""$response.event.biometrics.oxygen_saturation"", 0] } } } } ]); ","Group patient event records from the 'patient_events' collection by the ward number, calculating the minimum oxygen saturation from the first element of the biometrics array for each ward. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", minOxygenSaturation: { $min: { $arrayElemAt: [""$response.event.biometrics.oxygen_saturation"", 0] } } } } ]); "," Aggregate data from the 'patient_events' collection, summarizing by the identifier's ward number and determining the lowest oxygen saturation value found in the first position of the biometrics array for every group."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } } ]); ","Select all patient events from the 'patient_events' collection where the event priority is classified as 'Routine', and group the results by the patient bed ID while counting the occurrences of each bed ID. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $group: { _id: ""$identifier.bed_id"", count: { $sum: 1 } } } ]); "," Retrieve records from the 'patient_events' collection that have an event priority set to 'Routine', then aggregate the data by bed ID and calculate the total number of events for each distinct bed ID."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'patient_events' collection where the hospital_id, ward_number, and bed_id match specific values, and include the related event details such as priority, alert_type, and biometrics information. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Find patient events in the 'patient_events' collection that correspond to given hospital_id, ward_number, and bed_id, and extract details regarding the event's priority, alert_type, and associated biometrics data."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" }, avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } } ]); ","Unwind the biometric data from the 'patient_events' collection and calculate the average heart rate and average blood pressure for each hospital, grouping the results by the hospital identifier. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" }, avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } } ]); "," Deconstruct the biometrics within the 'patient_events' collection to compute the average heart rate and average blood pressure per hospital, organizing the data by hospital ID."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }).sort({ ""identifier.hospital_id"": 1 }); ","Retrieve all documents from the 'patient_events' collection where the event priority is classified as 'Emergency', and sort the results by the hospital identifier in ascending order. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }).sort({ ""identifier.hospital_id"": 1 }); "," Find entries in the 'patient_events' collection for which the event priority is 'Emergency', then arrange the results by the hospital ID in increasing order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } } ]); ","Collect all patient event records from the 'patient_events' collection where the alert type is 'FallDetected', and group the results by the ward number, counting the total number of alerts for each ward. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } } ]); "," Aggregate data from the 'patient_events' collection to find the number of 'FallDetected' alerts, organizing the information by ward number to determine the total alerts occurring in each department."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital: ""$identifier.hospital_id"", ward: ""$identifier.ward_number"", priority: ""$response.event.priority"", heartRate: ""$response.event.biometrics.heart_rate"" } }, { $match: { priority: ""Urgent"" } } ]); ","Project the hospital ID, ward number, event priority, and heart rate from the 'patient_events' collection, filtering the results to only include those entries where the priority is classified as 'Urgent'. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital: ""$identifier.hospital_id"", ward: ""$identifier.ward_number"", priority: ""$response.event.priority"", heartRate: ""$response.event.biometrics.heart_rate"" } }, { $match: { priority: ""Urgent"" } } ]); "," Select the hospital identifier, ward details, priority of the event, and heart rate measurements from the 'patient_events' collection, ensuring that only records with an 'Urgent' priority are included in the final output."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $addFields: { avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { avgOxygenSaturation: { $lt: 90 } } } ]); ","Calculate the average oxygen saturation from the biometrics data within the 'patient_events' collection, then filter the results to include only those records where the average oxygen saturation is below 90. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $addFields: { avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { avgOxygenSaturation: { $lt: 90 } } } ]); ", Determine the average oxygen saturation levels for biometrics in the 'patient_events' collection and restrict the output to cases where this average is less than 90.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.bed_id"", maxHeartRate: { $max: ""$response.event.biometrics.heart_rate"" } } }, { $match: { maxHeartRate: { $gt: 120 } } } ]); ","Group the records from the 'patient_events' collection by the 'bed_id' field, calculating the maximum heart rate from the biometrics data, and filter the results to only include those where the maximum heart rate exceeds 120. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.bed_id"", maxHeartRate: { $max: ""$response.event.biometrics.heart_rate"" } } }, { $match: { maxHeartRate: { $gt: 120 } } } ]); "," Aggregate the data in the 'patient_events' collection by 'bed_id', determining the highest recorded heart rate from the biometrics, and return only those entries where this maximum heart rate is greater than 120."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.ward_number"", totalMovementPatterns: { $sum: { $size: ""$response.event.biometrics.movement_patterns"" } } } } ]); ",Extract the ward numbers from the 'patient_events' collection and calculate the total number of movement patterns recorded in the biometrics for each ward by first unwinding the biometrics array in the event response. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.ward_number"", totalMovementPatterns: { $sum: { $size: ""$response.event.biometrics.movement_patterns"" } } } } ]); "," Gather ward identifiers from the 'patient_events' collection while summing the counts of movement patterns found within the biometrics object for every ward, starting by expanding the biometrics array from the event responses."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.bed_id"", foreignField: ""identifier.bed_id"", as: ""bed_events"" } }, { $project: { hospital: ""$identifier.hospital_id"", routineEventsCount: { $size: ""$bed_events"" } } } ]); ","Select all documents from the 'patient_events' collection that have a priority level classified as 'Routine', and join with other records in the same collection to gather events related to the same bed by matching the 'bed_id'. Subsequently, project the 'hospital_id' and count the number of associated 'bed_events' for these routine events. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.bed_id"", foreignField: ""identifier.bed_id"", as: ""bed_events"" } }, { $project: { hospital: ""$identifier.hospital_id"", routineEventsCount: { $size: ""$bed_events"" } } } ]); "," Find entries in the 'patient_events' collection where the event's priority is marked as 'Routine', while also linking to additional events connected to the same bed by 'bed_id', and display the hospital identifier along with a count of related events for those routine occurrences."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $count: ""totalVitalSignsAlerts"" } ]); ",Count the total number of patient events in the 'patient_events' collection that have an alert type of 'VitalSigns'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $count: ""totalVitalSignsAlerts"" } ]); ", Calculate the total occurrences of alerts classified as 'VitalSigns' from the 'patient_events' collection.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""hospital_events"" } }, { $unwind: ""$hospital_events"" }, { $group: { _id: ""$identifier.hospital_id"", totalEvents: { $sum: 1 } } } ]); ","Join the 'patient_events' collection with itself by matching the hospital_id field within the identifier, then unwind the joined events and group the results by hospital_id to calculate the total number of events for each hospital. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""hospital_events"" } }, { $unwind: ""$hospital_events"" }, { $group: { _id: ""$identifier.hospital_id"", totalEvents: { $sum: 1 } } } ]); "," Aggregate data from the 'patient_events' collection by performing a self-join on the hospital_id in the identifier, unwinding the resulting records, and grouping them by hospital_id to find the total count of events for each hospital."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $group: { _id: ""$identifier.ward_number"", avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } } ]); ","Select patient event records from the 'patient_events' collection where the event priority is marked as 'Urgent', and then group these records by the ward number while calculating the average blood pressure for each ward. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $group: { _id: ""$identifier.ward_number"", avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } } ]); "," Find all entries in the 'patient_events' collection that have an 'Urgent' priority for events, and perform a grouping operation by the ward number to compute the average blood pressure across those grouped entries."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", distinctUnits: { $addToSet: ""$identifier.ward_number"" } } } ]); ","Select all records from the 'patient_events' collection where the alert type in the response event is 'Medication', and group the results by hospital ID while collecting distinct ward numbers into a set. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", distinctUnits: { $addToSet: ""$identifier.ward_number"" } } } ]); "," From the 'patient_events' collection, retrieve entries that have an alert type of 'Medication' within the response event and aggregate these entries by hospital ID, creating a unique list of ward numbers for each hospital."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospitalId: ""$identifier.hospital_id"", bedId: ""$identifier.bed_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { maxOxygenSaturation: { $gte: 95 } } } ]); ","Select the hospital ID and bed ID from the 'patient_events' collection while calculating the maximum oxygen saturation from the biometrics data, and only return those records where this maximum oxygen saturation is 95 or higher. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospitalId: ""$identifier.hospital_id"", bedId: ""$identifier.bed_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { maxOxygenSaturation: { $gte: 95 } } } ]); "," From the 'patient_events' collection, retrieve the identifiers for hospital and bed, along with the highest value of oxygen saturation found in the biometrics, filtering for cases where this value is at least 95."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $lt: 60 } } }, { $group: { _id: ""$identifier.ward_number"", alertCount: { $sum: 1 } } } ]); ","Extract details from the 'patient_events' collection by unwinding the 'biometrics' array within the 'event' response, filtering for instances where the heart rate is less than 60, and then grouping the results by the ward number while counting the number of alerts in each ward. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $lt: 60 } } }, { $group: { _id: ""$identifier.ward_number"", alertCount: { $sum: 1 } } } ]); "," Retrieve records from the 'patient_events' collection that expand the 'biometrics' array in the 'event' response, apply a filter to identify entries with a heart rate below 60, and subsequently aggregate the total alert occurrences for each ward number."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospitalId: ""$identifier.hospital_id"", wardId: ""$identifier.ward_number"", heartRate: ""$response.event.biometrics.heart_rate"" } }, { $match: { heartRate: { $gt: 100 } } }, { $sort: { heartRate: -1 } } ]); ","Select the hospital ID, ward number, and heart rate from the 'patient_events' collection, filtering to only include cases where the heart rate exceeds 100, and then sort the results in descending order based on heart rate. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospitalId: ""$identifier.hospital_id"", wardId: ""$identifier.ward_number"", heartRate: ""$response.event.biometrics.heart_rate"" } }, { $match: { heartRate: { $gt: 100 } } }, { $sort: { heartRate: -1 } } ]); "," Retrieve the identifier fields for hospital and ward, along with the heart rate value from the 'patient_events' collection, ensuring that only records with a heart rate greater than 100 are included, and present them sorted by heart rate in descending order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Aggregate the patient events from the 'patient_events' collection by grouping them according to the ward number and calculate the total count for each ward, then sort the results in descending order based on the count. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); "," Group the documents in the 'patient_events' collection by the ward number, summing the occurrences for each distinct ward, and order the output with the most frequent wards listed first."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: null, maxPriority: { $max: ""$response.event.priority"" } } } ]); ","Aggregate the data from the 'patient_events' collection to find the maximum priority level from the event responses, grouping all entries together without any specific identifiers. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: null, maxPriority: { $max: ""$response.event.priority"" } } } ]); "," Group the entries in the 'patient_events' collection to calculate the highest event priority found in the responses, returning a single result that does not distinguish between individual documents."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $count: ""totalFallAlerts"" } ]); ",Count the total number of patient events from the 'patient_events' collection where the alert type in the response event is 'FallDetected'. 
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $count: ""totalFallAlerts"" } ]); ", Determine the total amount of fall alerts in the 'patient_events' collection by filtering for records where the alert_type under response event is 'FallDetected'.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Fetch all documents from the 'patient_events' collection where the 'hospital_id' and 'ward_number' fields match specified criteria, and include details of the 'event' response, particularly focusing on the priority and alert type. "
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Retrieve records from the 'patient_events' collection that filter by specific values for 'hospital_id' and 'ward_number', including information about the 'event' response with an emphasis on its priority and type of alert."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",db.store_events.find({}); ,Fetch all documents from the 'store_events' collection without applying any filters or conditions. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",db.store_events.find({}); ," Retrieve every entry in the 'store_events' collection, displaying all available data without any restrictions."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"" }); ","Select all records from the 'store_events' collection where the 'store_id' in the identifier is equal to ""12345"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"" }); "," Retrieve documents from the 'store_events' collection that match the condition where the store identifier's 'store_id' is ""12345""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ","Select all records from the 'store_events' collection where the event type within the response is classified as a ""Purchase."" "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); "," Retrieve documents from the 'store_events' collection that specifically indicate an event type of ""Purchase"" in the response section."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 3, ""response.event.type"": ""Return"" }); ",Find records in the 'store_events' collection where the aisle number is 3 and the event type is categorized as a 'Return'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 3, ""response.event.type"": ""Return"" }); ", Retrieve documents from the 'store_events' collection that have an aisle_number of 3 and indicate that the event type is a 'Return'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ","Select all documents from the 'store_events' collection where the age group in the customer profile section of the response event is categorized as ""18-25"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); "," Retrieve entries from the 'store_events' collection that contain customer profiles indicating an age group of ""18-25"" within the event response."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""A1"" }).limit(10); ",Select the first 10 documents from the 'store_events' collection where the point of sale terminal identifier is 'A1'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""A1"" }).limit(10); ", Fetch a maximum of 10 entries from the 'store_events' collection that have the pos_terminal set to 'A1'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ",Select all documents from the 'store_events' collection where the 'dwell_time' of the customer profile in the response event is greater than or equal to 30 minutes. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ", Retrieve entries from the 'store_events' collection where the customer profile's dwell time in the event response is at least 30 minutes.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""67890"", ""response.event.type"": ""Browse"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); ","Fetch all records from the 'store_events' collection where the 'store_id' is '67890' and the event type in the response is 'Browse', and arrange the results by the 'dwell_time' in the customer profile in descending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""67890"", ""response.event.type"": ""Browse"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); "," Retrieve entries from the 'store_events' collection that have a 'store_id' of '67890' and an event type classified as 'Browse', sorting the output by customer profile dwell time from highest to lowest."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true, $ne: [] } }); ","Find all documents in the 'store_events' collection where the customer profile includes basket items, ensuring that this field exists and is not an empty array. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true, $ne: [] } }); "," Retrieve documents from the 'store_events' collection that contain customer profile data with non-empty basket items, confirming the presence of this field."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"", ""response.event.customer_profile.staff_interaction"": true }).count(); ",Count the number of documents in the 'store_events' collection where the store identifier is '12345' and the customer profile indicates staff interaction has occurred. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"", ""response.event.customer_profile.staff_interaction"": true }).count(); ", Determine the total number of entries in the 'store_events' collection for which the store ID is '12345' and the customer profile reflects a positive staff interaction.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""54321"" }); ","Retrieve a single document from the 'store_events' collection where the store identifier is set to ""54321"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""54321"" }); "," Find one record within the 'store_events' collection that corresponds to the store ID of ""54321""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({}).limit(5).sort({ ""response.event.type"": 1 }); ","Retrieve the first five records from the 'store_events' collection, sorting the results in ascending order based on the type of event contained in the response field. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({}).limit(5).sort({ ""response.event.type"": 1 }); "," Select up to five documents from the 'store_events' collection, arranged by the event type in the response, in an ascending sequence."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lt: 5 } }).skip(5); ","Select all documents from the 'store_events' collection where the aisle number is less than 5, and skip the first 5 results. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lt: 5 } }).skip(5); "," Retrieve entries from the 'store_events' collection that have an aisle number of under 5, omitting the initial 5 records from the output."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""36-45"" }).count(); ",Count all documents in the 'store_events' collection where the age group in the customer profile is between 36 and 45 years old. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""36-45"" }).count(); ", Determine the total number of entries in the 'store_events' collection that include customer profiles indicating an age group of 36 to 45 years.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"" }).sort({ ""identifier.aisle_number"": -1 }).limit(3); ","Select the top three documents from the 'store_events' collection where the 'store_id' is '12345', and sort the results by 'aisle_number' in descending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"" }).sort({ ""identifier.aisle_number"": -1 }).limit(3); "," Retrieve three entries from the 'store_events' collection where the store identifier is '12345', sorting those results by the aisle number in reverse order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": { $in: [""Purchase"", ""Return""] } }); ",Select all documents from the 'store_events' collection where the event type in the response is either 'Purchase' or 'Return'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": { $in: [""Purchase"", ""Return""] } }); ", Retrieve entries from the 'store_events' collection that have an event type of 'Purchase' or 'Return' in the response field.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""B2"" }).project({ ""response.event"": 1 }); ","Select documents from the 'store_events' collection where the point of sale terminal is identified as 'B2', and include only the event information within the response field. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""B2"" }).project({ ""response.event"": 1 }); "," Retrieve entries from the 'store_events' collection that correspond to the point of sale terminal labeled 'B2', projecting solely the event details found in the response field."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 15, $lte: 60 } }); ","Select all entries from the 'store_events' collection where the dwell time of customers in the event's profile is between 15 and 60 minutes, inclusive. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 15, $lte: 60 } }); ", Retrieve documents from the 'store_events' collection that include customer profiles with a dwell time ranging from 15 to 60 minutes.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $size: 5 } }); ",Select all documents from the 'store_events' collection where the customer profile contains exactly five items in the basket. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $size: 5 } }); ", Retrieve entries from the 'store_events' collection that have a customer profile indicating a basket size of five items.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.distinct(""identifier.store_id""); ",Retrieve all unique store IDs from the 'store_events' collection. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.distinct(""identifier.store_id""); ", Find distinct store identifiers from the 'store_events' collection.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Select all documents from the 'store_events' collection where the 'identifier.store_id' and 'identifier.aisle_number' match specific values, and retrieve the corresponding 'response.event.type' and 'response.event.customer_profile' details. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Find records in the 'store_events' collection that filter for specific 'store_id' and 'aisle_number' in the 'identifier', extracting information about the 'response.event.type' and 'response.event.customer_profile'."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.find({ ""identifier.store_id"": ""Store001"" }); ",Fetch all records from the 'store_events' collection where the store identifier is 'Store001'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.find({ ""identifier.store_id"": ""Store001"" }); ", Retrieve documents from the 'store_events' collection that match the store ID 'Store001'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ",Fetch all entries from the 'store_events' collection where the aisle number is equal to 5. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ", Retrieve documents from the 'store_events' collection that have an aisle number of 5.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ","Select all documents from the 'store_events' collection where the event type recorded in the response is categorized as a ""Purchase."" "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); "," Retrieve entries from the 'store_events' collection that have an event type marked as ""Purchase"" within the response object."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ","Find all documents in the 'store_events' collection where the age group of customers in the event's customer profile is categorized as ""18-25"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); "," Retrieve records from the 'store_events' collection where the customer profile's age group is specified as ""18-25""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ",Fetch all entries from the 'store_events' collection where the dwell time recorded in the customer profile exceeds 30. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ", Retrieve documents from the 'store_events' collection that indicate a customer profile with a dwell time greater than 30.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""TerminalA"", ""response.event.type"": ""Return"" }); ",Select all documents from the 'store_events' collection where the point of sale terminal is labeled 'TerminalA' and the event type recorded in the response is identified as a 'Return'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""TerminalA"", ""response.event.type"": ""Return"" }); ", Retrieve entries from the 'store_events' collection that correspond to 'TerminalA' as the checkout station and specify the event type in the response as 'Return'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $exists: true, $not: { $size: 0 } } }); ",Find documents in the 'store_events' collection where the 'customer_profile' field exists and contains one or more elements in the 'response.event' object. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $exists: true, $not: { $size: 0 } } }); ", Retrieve all records from the 'store_events' collection that have a non-empty 'customer_profile' array within the 'response.event' structure.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": true }); ",Select all documents from the 'store_events' collection where the 'staff_interaction' field within the 'customer_profile' array in the 'response.event' object is true. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": true }); ", Retrieve records from the 'store_events' collection that have a true value for 'staff_interaction' in the 'customer_profile' array located within the 'event' object of the 'response'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store002"", ""response.event.type"": { $in: [""Purchase"", ""Browse""] } }); ",Retrieve all documents from the 'store_events' collection where the store identifier is 'Store002' and the event type is either 'Purchase' or 'Browse'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store002"", ""response.event.type"": { $in: [""Purchase"", ""Browse""] } }); ", Find entries in the 'store_events' collection for the store with ID 'Store002' that have event types including 'Purchase' and 'Browse'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store003"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }).limit(10); ","Retrieve up to ten documents from the 'store_events' collection where the store ID is 'Store003', and sort these results by customer dwell time in descending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store003"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }).limit(10); "," Select the top ten entries from the 'store_events' collection for the store identified as 'Store003', ordering them by the dwell time of customer profiles in a descending manner."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": { $ne: ""60+"" } }).count(); ","Count the number of documents in the 'store_events' collection where the 'age_group' in the 'customer_profile' of the 'event' response is not equal to ""60+"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": { $ne: ""60+"" } }).count(); "," Determine how many records exist in the 'store_events' collection that have a 'customer_profile' age group in the 'event' response that does not include ""60+""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $gt: 3 } }).project({ ""identifier.store_id"": 1, ""response.event.type"": 1 }); ","Select records from the 'store_events' collection where the aisle number is greater than 3, and include only the store ID and the type of event in the results. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $gt: 3 } }).project({ ""identifier.store_id"": 1, ""response.event.type"": 1 }); "," Retrieve documents from the 'store_events' collection that have an aisle number exceeding 3, projecting only the store identifier and the event type for each record."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true } }); ",Select all documents from the 'store_events' collection that contain customer profiles which include details about the items in their shopping baskets. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true } }); "," Retrieve records from the 'store_events' collection where the customer profiles have entries for basket items, indicating that such items exist."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store001"", ""response.event.type"": ""Purchase"" }).limit(5); ",Select the first five documents from the 'store_events' collection where the store identifier is 'Store001' and the event type in the response is classified as a 'Purchase'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store001"", ""response.event.type"": ""Purchase"" }).limit(5); ", Retrieve up to five entries from the 'store_events' collection with an identifier of 'Store001' for which the event type in the response corresponds to a 'Purchase'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { age_group: ""30-40"", staff_interaction: false } } }); ","Find all documents in the 'store_events' collection where the customer profile indicates an age group of ""30-40"" and specifies no staff interaction. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { age_group: ""30-40"", staff_interaction: false } } }); "," Retrieve entries from the 'store_events' collection that include customer profiles featuring an age range of ""30-40"" without any recorded interaction with staff."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""TerminalB"" }).sort({ ""response.event.type"": 1 }).limit(15); ","Find entries in the 'store_events' collection where the Point Of Sale terminal used is 'TerminalB', sort the results by the event type in ascending order, and limit the output to the first 15 records. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""TerminalB"" }).sort({ ""response.event.type"": 1 }).limit(15); "," Retrieve data from the 'store_events' collection for transactions recorded at 'TerminalB', ordered by the type of event in an ascending manner, and restrict the output to 15 documents."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 1, ""response.event.customer_profile.dwell_time"": { $lte: 15 } }); ",Fetch records from the 'store_events' collection where the aisle number is 1 and the dwell time of the customer profile is 15 minutes or less. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 1, ""response.event.customer_profile.dwell_time"": { $lte: 15 } }); "," Select documents from the 'store_events' collection that have an aisle_number of 1, ensuring that the customer profile's dwell_time does not exceed 15 minutes."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store004"", ""response.event.type"": { $exists: true } }).countDocuments(); ",Count the number of documents in the 'store_events' collection where the 'store_id' is 'Store004' and the 'event.type' field exists within the response. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""Store004"", ""response.event.type"": { $exists: true } }).countDocuments(); ", Determine the total number of records in the 'store_events' collection that have a 'store_id' of 'Store004' and contain an 'event.type' attribute in their response.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""50-60"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); ","Select all records from the 'store_events' collection where the customer's age group in the event profile is between 50 and 60 years old, and sort these results by the dwell time of the customer in descending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""50-60"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); "," Retrieve documents from the 'store_events' collection for customers whose age group falls within the range of 50 to 60 years, and arrange the output based on the duration of their dwell time, starting with the highest."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 2, ""response.event.customer_profile.staff_interaction"": true }).limit(3); ",Find up to three records from the 'store_events' collection where the aisle number is 2 and the customer profile indicates that there was staff interaction. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 2, ""response.event.customer_profile.staff_interaction"": true }).limit(3); ", Retrieve a maximum of three documents from the 'store_events' collection for which the aisle number equals 2 and the staff interaction is marked as true in the customer profile.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'store_events' collection, filtering for events that occurred in a specific store, aisle, and checkout terminal, while also including information related to customer profiles such as age group, basket items, dwell time, and staff interaction. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Select records from the 'store_events' collection that correspond to a given store, aisle number, and POS terminal, ensuring that customer profile details, including age group, items in baskets, duration of stay, and staff interactions, are included in the results."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Extract customer profiles from the 'store_events' collection by first unwinding the customer profile array, and then group the data by store ID while calculating the average dwell time for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); "," From the 'store_events' collection, deconstruct the customer profile entries by unwinding them, after which group the results by the store ID and compute the average dwell time of customers for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ",Select all documents from the 'store_events' collection where the aisle number is equal to 5. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ", Retrieve entries from the 'store_events' collection that have an aisle number of 5.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", purchaseCount: { $sum: 1 } } } ]); ","Select all records from the 'store_events' collection where the event type is classified as a 'Purchase', and then group the results by the store identifier, counting the total number of purchases per store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", purchaseCount: { $sum: 1 } } } ]); "," Gather documents from the 'store_events' collection that indicate a 'Purchase' event type, subsequently aggregating this data to determine the purchase frequency for each unique store ID."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the store events by the point of sale terminal from the 'store_events' collection, summing the total number of events for each terminal, and sort the results in descending order based on the total events. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the events from the 'store_events' collection by each point of sale terminal, calculating the total number of events per terminal and arranging the output with the highest totals first."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-24"" }).count(); ","Count the number of documents in the 'store_events' collection where the customer profile's age group is ""18-24"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-24"" }).count(); "," Determine how many records are present in the 'store_events' collection for customers within the ""18-24"" age group in their profiles."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } } ]); ","Retrieve documents from the 'store_events' collection where the event type is classified as a 'Return' and group the results by 'store_id', calculating the total number of return events for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } } ]); "," In the 'store_events' collection, find all entries where the event type is 'Return', and aggregate the data by 'store_id' to determine the total count of return transactions per store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); ","Group the events from the 'store_events' collection by the aisle number, calculating the total dwell time spent by customers in each aisle, and sort the results in descending order based on total dwell time. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); "," Aggregate the data in the 'store_events' collection to sum the dwell time of customers for each aisle number, and then order the aisles by their total dwell time in a descending manner."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", averageStaffInteraction: { $avg: ""$response.event.customer_profile.staff_interaction"" } } } ]); ","Select documents from the 'store_events' collection where the event type in the response is 'Browse', and project the store ID along with the average value of staff interaction from the customer profile. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", averageStaffInteraction: { $avg: ""$response.event.customer_profile.staff_interaction"" } } } ]); "," From the 'store_events' collection, filter for events categorized as 'Browse' and retrieve the store identifier alongside the computed average of staff interactions derived from the customer profiles."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true, $ne: [] } }); ",Select all documents from the 'store_events' collection where the 'basket_items' field within the 'customer_profile' of the 'event' response exists and is not an empty array. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true, $ne: [] } }); ", Retrieve entries from the 'store_events' collection that have a non-empty 'basket_items' field in the 'customer_profile' nested within the 'event' response object.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", age_group: ""$response.event.customer_profile.age_group"" }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Unwind the customer profile data from the 'store_events' collection, and group the results by store ID and age group, calculating the average dwell time for each age group. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", age_group: ""$response.event.customer_profile.age_group"" }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); "," Deconstruct the customer profiles in the 'store_events' collection, then aggregate the data to compute the average dwell time, categorizing the results by store ID and age group."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.aisle_number"": 3 } }, { $group: { _id: null, totalEvents: { $sum: 1 } } } ]); ","Select all records from the 'store_events' collection where the aisle number is equal to 3, and group the results to calculate the total number of events that match this criterion. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.aisle_number"": 3 } }, { $group: { _id: null, totalEvents: { $sum: 1 } } } ]); "," Aggregate data from the 'store_events' collection by filtering for aisle number 3, and compute the overall count of events that meet this condition."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $lookup: { from: ""store_events"", localField: ""identifier.store_id"", foreignField: ""identifier.store_id"", as: ""related_events"" } } ]); ","Select all records from the 'store_events' collection where the event type is classified as a ""Purchase,"" and also gather related events by looking up additional data from the same collection based on matching store identifiers. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $lookup: { from: ""store_events"", localField: ""identifier.store_id"", foreignField: ""identifier.store_id"", as: ""related_events"" } } ]); "," Retrieve documents from the 'store_events' collection that have an event type of ""Purchase,"" while also fetching associated events by performing a join within the same collection using the store_id field in the identifiers."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", maxDwellTime: { $max: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { maxDwellTime: -1 } } ]); ","Group the store event records in the 'store_events' collection by the store identifier, calculating the maximum dwell time from the customer profiles for each store, and then sort the results in descending order based on the maximum dwell time. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", maxDwellTime: { $max: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { maxDwellTime: -1 } } ]); "," Aggregate the documents in the 'store_events' collection by store ID, finding the highest dwell time recorded in each store's customer profile, and order the outcome from the largest to the smallest dwell time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }).limit(10); ","Find documents in the 'store_events' collection where the dwell time of customers is greater than 30 minutes, and limit the results to the first 10 entries. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }).limit(10); ", Retrieve up to 10 records from the 'store_events' collection where the customer profile indicates a dwell time exceeding 30 minutes.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalBasketItems: { $sum: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ",Unwind the customer profile data from the 'store_events' collection and group the results by each store ID to calculate the total number of basket items per store by summing up the sizes of the basket items for each customer profile. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalBasketItems: { $sum: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ", Extract individual customer profile entries from the 'store_events' collection and aggregate them by store ID to determine the total amount of basket items across all customers linked to each store.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"", ""response.event.type"": ""Browse"" }); ",Select all records from the 'store_events' collection where the 'store_id' is 'store123' and the event type is 'Browse'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"", ""response.event.type"": ""Browse"" }); ", Retrieve entries from the 'store_events' collection that have a 'store_id' of 'store123' and where the type of event recorded is 'Browse'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": ""35-44"" } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: ""$response.event.customer_profile.staff_interaction"" } } } ]); ","Select all documents from the 'store_events' collection where the customer profile's age group is between 35 and 44 years, and group the results by store ID while calculating the total staff interactions for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": ""35-44"" } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: ""$response.event.customer_profile.staff_interaction"" } } } ]); "," Filter the 'store_events' collection to retrieve records where the customer age group falls within 35 to 44 years, and aggregate the data by store ID, summing the staff interactions for each unique store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); ","Group the documents from the 'store_events' collection by the aisle number and calculate the total number of purchases by summing the instances where the event type is categorized as ""Purchase"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); "," Aggregate the documents in the 'store_events' collection by the aisle number, counting the total purchases by adding up the occurrences where the event is identified as a ""Purchase""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal1"", ""response.event.type"": ""Return"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); ","Find all entries in the 'store_events' collection where the point of sale terminal is 'terminal1' and the event recorded is a return, then sort these results by the dwell time of the customer profile in descending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal1"", ""response.event.type"": ""Return"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }); "," Retrieve documents from the 'store_events' collection that have a pos terminal identified as 'terminal1' and an event type classified as 'Return', ordering the results by customer profile dwell time in decreasing order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'store_events' collection that contain information about customer interactions, specifically focusing on their age groups, basket items, dwell times, and staff interactions. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Find records in the 'store_events' collection pertaining to events involving customers, emphasizing demographic details, items in their baskets, the duration of their visits, and any interactions with staff."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalPurchases: { $sum: 1 } } } ]); ","Select the total number of Purchase events grouped by store identifier from the 'store_events' collection, filtering to include only documents where the event type is Purchase. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalPurchases: { $sum: 1 } } } ]); "," Count the number of Purchase events for each store_id in the 'store_events' collection, ensuring that only entries marked as Purchase are considered in the aggregation."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Unwind the customer profiles from the 'store_events' collection, then group the results by age group while calculating the average dwell time for each group. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); "," Deconstruct the customer profile entries in the 'store_events' dataset, aggregating the data based on age groups and determining the average duration spent by customers in each group."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $gte: 1, $lte: 5 } }).sort({ ""response.event.type"": 1 }); ","Fetch all documents from the 'store_events' collection where the aisle number is between 1 and 5, inclusive, and sort the results by the type of event in ascending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $gte: 1, $lte: 5 } }).sort({ ""response.event.type"": 1 }); "," Select records from the 'store_events' collection that have aisle numbers ranging from 1 to 5, and arrange the output based on the event type in alphabetical order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); ","Aggregate data from the 'store_events' collection by matching records where the event type in the response is categorized as 'Return', then group these records by the store_id and calculate the total number of returns for each store, finally sorting the results in descending order based on the totalReturns. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); "," In the 'store_events' collection, filter the events for those marked as 'Return', group the outcomes by store_id while summing the total returns per store, and present the results sorted from highest to lowest total returns."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: 1 } } } ]); ","Retrieve documents from the 'store_events' collection where the customer profile indicates that there was staff interaction, and group the results by the store ID, calculating the total number of interactions for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: 1 } } } ]); "," Find records in the 'store_events' collection that show customer profiles with staff interaction, aggregating the data by store ID to determine the total interactions for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ",Select all records from the 'store_events' collection where the dwell time in the customer profile is greater than 30 minutes. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ", Retrieve documents from the 'store_events' collection that have a customer profile dwell time exceeding 30 minutes.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.basket_items"": { $gt: 1 } } }, { $group: { _id: ""$identifier.store_id"", uniqueCustomers: { $addToSet: ""$response.event.customer_profile.age_group"" } } } ]); ","Extract customer profiles from the 'store_events' collection where the number of items in the basket is greater than one, and then group these profiles by their respective store IDs, while collecting unique age groups for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.basket_items"": { $gt: 1 } } }, { $group: { _id: ""$identifier.store_id"", uniqueCustomers: { $addToSet: ""$response.event.customer_profile.age_group"" } } } ]); "," Retrieve records from the 'store_events' collection, unwinding customer profiles in each event, filtering for those with more than one basket item, and grouping the results by store ID to compile a set of unique age groups from the customers."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the events in the 'store_events' collection by the 'pos_terminal' identifier, calculating the total count of events for each terminal, and sort the results in descending order of event counts. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data from the 'store_events' collection to count the number of events per checkout station identified by 'pos_terminal', and arrange the output by the total event counts in a descending sequence."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: null, totalBrowses: { $sum: 1 } } } ]); ",Count the total number of events classified as 'Browse' from the 'store_events' collection by filtering for only those events and grouping the results without any specified identifier. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: null, totalBrowses: { $sum: 1 } } } ]); ", Calculate the sum of all browsing events in the 'store_events' collection by matching only events of the type 'Browse' and aggregating the total without grouping by any specific field.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", age_group: ""$response.event.customer_profile.age_group"" }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Unwind the customer profile entries from the 'store_events' collection, then group the data by store_id and age group while calculating the average dwell time for each group. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", age_group: ""$response.event.customer_profile.age_group"" }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); "," Deconstruct the customer profiles within the 'store_events' collection, aggregating the records based on store_id and age group to determine the average dwell time for customers in each category."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"" }).limit(10); ",Retrieve up to 10 documents from the 'store_events' collection where the store ID is 'store123'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"" }).limit(10); ", Select a maximum of 10 records from the 'store_events' collection that have the identifier 'store_id' set to 'store123'.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalEvents: { $sum: 1 } } }, { $match: { totalEvents: { $gte: 10 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the events in the 'store_events' collection by the aisle number, counting the total occurrences for each aisle, filtering to keep only those with ten or more total events, and sort the results in descending order based on the total count of events. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalEvents: { $sum: 1 } } }, { $match: { totalEvents: { $gte: 10 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate data from the 'store_events' collection by aisle number to calculate the total number of events, include only those aisles with at least ten events, and sort the final results in descending order by the total event count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": false } }, { $group: { _id: ""$identifier.store_id"", totalNoInteraction: { $sum: 1 } } } ]); ","Select all records from the 'store_events' collection where the customer profile indicates no staff interaction, and then group the results by store ID while calculating the total count of interactions without staff. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": false } }, { $group: { _id: ""$identifier.store_id"", totalNoInteraction: { $sum: 1 } } } ]); "," Retrieve data from the 'store_events' collection filtering for instances where the customer profile shows no interaction with staff, and aggregate the results by store ID to determine the total number of these no-interaction events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 3, ""response.event.type"": ""Purchase"" }); ",Find all records in the 'store_events' collection where the aisle number equals 3 and the event type recorded in the response is 'Purchase'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 3, ""response.event.type"": ""Purchase"" }); ", Retrieve entries from the 'store_events' collection for events that occurred in aisle number 3 and are categorized as 'Purchase' in the event response.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalCustomers: { $count: {} } } }, { $sort: { totalCustomers: 1 } } ]); ","Unwind the customer profiles from the 'response.event' field in the 'store_events' collection, then group the results by the store ID to count the total number of customers for each store, and finally sort the grouped results by the total number of customers in ascending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalCustomers: { $count: {} } } }, { $sort: { totalCustomers: 1 } } ]); "," Deconstruct the customer profiles in the 'response.event' from the 'store_events' collection, aggregate the total customers by store ID, and sort these totals in increasing order to organize the output by customer count for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": { $in: [""Purchase"", ""Return""] } } }, { $group: { _id: ""$identifier.pos_terminal"", eventCount: { $sum: 1 } } } ]); ","Select records from the 'store_events' collection where the event type in the response is either 'Purchase' or 'Return', and group the results by the pos_terminal identifier while counting the number of events for each terminal. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": { $in: [""Purchase"", ""Return""] } } }, { $group: { _id: ""$identifier.pos_terminal"", eventCount: { $sum: 1 } } } ]); "," Retrieve entries from the 'store_events' collection for which the event type in the response falls under 'Purchase' or 'Return', and aggregate these records by the pos_terminal field, calculating the total number of events associated with each terminal."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $lte: 5 } }).sort({ ""identifier.store_id"": 1 }); ","Fetch all records from the 'store_events' collection where the number of items in the customer’s shopping basket is five or fewer, and arrange the results by the store identifier in ascending order. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $lte: 5 } }).sort({ ""identifier.store_id"": 1 }); "," Retrieve entries from the 'store_events' collection that have five or fewer basket items in the customer profile, sorted by store ID in increasing order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'store_events' collection where there are customer interactions characterized by types of purchases, returns, or browsing, including details like age group, items purchased, duration of stay, and staff interactions. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Find records in the 'store_events' collection that capture customer events such as purchases, returns, or browsing activities, while detailing demographic information, basket contents, time spent in the store, and interactions with staff."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Unwind the customer profile in the 'store_events' collection and group the data by the age group of each customer, calculating the total dwell time for each age group. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } } ]); "," Expand the customer profiles from the 'store_events' collection and aggregate them by age group, summing the dwell time recorded for each respective age category."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"", ""response.event.type"": ""Purchase"" }); ",Select all records from the 'store_events' collection where the store identifier is '12345' and the event type recorded in the response is classified as a 'Purchase'. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""12345"", ""response.event.type"": ""Purchase"" }); ", Retrieve documents from the 'store_events' collection that correspond to the store with ID '12345' and where the event categorized in the response as 'Purchase' occurred.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { avgDwellTime: -1 } } ]); ","Select all records from the 'store_events' collection where the event type is 'Browse', group the results by the store_id of each event, and calculate the average dwell time from the customer profiles, sorting the results in descending order of average dwell time. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { avgDwellTime: -1 } } ]); "," Retrieve entries from the 'store_events' collection that have an event type classified as 'Browse', aggregate the data by store_id, compute the average dwell time of customers, and sort these aggregated records from highest to lowest average dwell time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.aisle_number"", totalReturns: { $sum: 1 } } } ]); ","Select all documents from the 'store_events' collection where the event type is classified as a ""Return,"" and group the results by aisle number, counting the total returns for each aisle. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.aisle_number"", totalReturns: { $sum: 1 } } } ]); "," From the 'store_events' collection, filter for entries where the event type is ""Return,"" then aggregate the outcomes by aisle number to calculate the total number of returns in each aisle."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: 1 }, purchaseCount: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } }, { $project: { ratio: { $divide: [""$purchaseCount"", ""$totalEvents""] } } } ]); ","Aggregate the documents in the 'store_events' collection by grouping them based on the 'store_id' field, calculating the total number of events and counting how many of those events are classified as purchases, then project the ratio of purchase events to total events. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: 1 }, purchaseCount: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } }, { $project: { ratio: { $divide: [""$purchaseCount"", ""$totalEvents""] } } } ]); "," Group the entries in the 'store_events' collection by 'store_id', summing up all events and determining the count of purchase events, followed by calculating the ratio of purchases to total events in the output."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": ""18-25"" } }, { $group: { _id: ""$identifier.store_id"", count: { $sum: 1 } } } ]); ",Obtain the count of store identifiers from the 'store_events' collection for records where the age group in the customer profile is between 18 and 25 years old. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": ""18-25"" } }, { $group: { _id: ""$identifier.store_id"", count: { $sum: 1 } } } ]); ", Count the number of unique store IDs in the 'store_events' collection for events that have customers aged 18 to 25 in their profile.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile.basket_items"" }, { $group: { _id: ""$response.event.customer_profile.basket_items"", totalCount: { $sum: 1 } } }, { $sort: { totalCount: -1 } }, { $limit: 10 } ]); ","Unwind the basket items from the customer profiles in the 'store_events' collection, grouping them by the items and counting the total occurrences for each, sorting the results in descending order of the total count, and limiting the output to the top 10 items. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile.basket_items"" }, { $group: { _id: ""$response.event.customer_profile.basket_items"", totalCount: { $sum: 1 } } }, { $sort: { totalCount: -1 } }, { $limit: 10 } ]); "," In the 'store_events' collection, break down the customer profiles to analyze the basket items, aggregate the counts of each unique item, order the results from highest to lowest total counts, and retrieve only the top 10 most frequent items."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""A1"" }).sort({ ""response.event.type"": 1 }); ","Fetch all entries from the 'store_events' collection where the point of sale terminal is set to ""A1"", and arrange the results in ascending order according to the event type within the response. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""A1"" }).sort({ ""response.event.type"": 1 }); "," Retrieve documents from the 'store_events' collection filtered by the pos_terminal being ""A1"", and sort the output based on the type of event in the response in a non-descending manner."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalAisles: { $addToSet: ""$identifier.aisle_number"" } } }, { $project: { aisleCount: { $size: ""$totalAisles"" } } } ]); ","Group the documents in the 'store_events' collection by the store_id field, and for each store, create a set of unique aisle_number values, then project the count of distinct aisles for each store. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalAisles: { $addToSet: ""$identifier.aisle_number"" } } }, { $project: { aisleCount: { $size: ""$totalAisles"" } } } ]); "," Aggregate data from the 'store_events' collection by grouping it according to the store_id, collecting unique aisle_number entries for each store, and then calculating the total number of unique aisles per store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $lookup: { from: ""customer_profiles"", localField: ""response.event.customer_profile.age_group"", foreignField: ""age_group"", as: ""customerDetails"" } }, { $unwind: ""$customerDetails"" }, { $group: { _id: ""$customerDetails.age_group"", totalPurchases: { $sum: 1 } } } ]); ","Select all entries from the 'store_events' collection where the event type in the response is classified as a ""Purchase,"" and join this data with the 'customer_profiles' collection based on matching age groups, then unwind the results to obtain individual customer details before grouping by age group and summing the total purchases. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $lookup: { from: ""customer_profiles"", localField: ""response.event.customer_profile.age_group"", foreignField: ""age_group"", as: ""customerDetails"" } }, { $unwind: ""$customerDetails"" }, { $group: { _id: ""$customerDetails.age_group"", totalPurchases: { $sum: 1 } } } ]); "," Retrieve documents from the 'store_events' collection that pertain to purchase events, linking these records to the 'customer_profiles' collection on the age group field, unwinding the joined data to generate individual details, and finally aggregating the results to count the total number of purchases per age group."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Gather all records from the 'store_events' collection where customer interactions with staff occurred, and calculate the average dwell time grouped by each store's unique identifier. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); "," Retrieve documents from the 'store_events' collection that indicate staff interactions by customers, and compute the average dwell time for each store identified by its store ID."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: { store: ""$identifier.store_id"", pos: ""$identifier.pos_terminal"" }, totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group all entries in the 'store_events' collection by the unique combination of store ID and POS terminal, counting the total number of events for each group, and then sort these groups in descending order based on the total event count. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: { store: ""$identifier.store_id"", pos: ""$identifier.pos_terminal"" }, totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data from the 'store_events' collection by creating groups based on store IDs and POS terminals, tallying the total events for each group, followed by sorting the results from highest to lowest total events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"", customerCount: { $size: ""$response.event.customer_profile"" } } } ]); ","Select all entries from the 'store_events' collection where the event type is 'Browse', and return the store ID, aisle number, and the count of customers in the customer profile array. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"", customerCount: { $size: ""$response.event.customer_profile"" } } } ]); "," Filter the 'store_events' collection to find records with an event type of 'Browse', while projecting the store ID, aisle number, and the total number of customers recorded in the customer profile."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: null, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ",Extract the average dwell time from the customer profiles in the 'store_events' collection by first breaking down the arrays within the 'response.event.customer_profile' field and then calculating the mean value of the 'dwell_time' property across all profiles. 
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: null, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ", Calculate the average duration of customer dwell time from the 'store_events' collection by unwinding the customer profile arrays in the 'response.event.customer_profile' field and aggregating the average of the 'dwell_time' attribute.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$response.event.type"", totalCount: { $sum: 1 } } }, { $match: { totalCount: { $gt: 100 } } } ]); ","Group the events in the 'store_events' collection by the type of event recorded in the response, counting the occurrences of each event type, and then filter to include only those event types that have a total count greater than 100. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$response.event.type"", totalCount: { $sum: 1 } } }, { $match: { totalCount: { $gt: 100 } } } ]); "," In the 'store_events' collection, aggregate the data by categorizing the event types from the responses and calculate the total number of events for each type, retaining only those categories where the total exceeds 100."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", eventType: ""$response.event.type"", itemsCount: { $size: ""$response.event.customer_profile.basket_items"" } } } ]); ","Project the store identifier, event type, and the count of items in the customer basket from the documents in the 'store_events' collection. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", eventType: ""$response.event.type"", itemsCount: { $size: ""$response.event.customer_profile.basket_items"" } } } ]); "," Select the store ID, the type of event, and the number of items in the basket from the 'store_events' collection documents."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" }, totalCount: { $sum: 1 } } }, { $project: { avgDwellTime: { $divide: [""$totalDwellTime"", ""$totalCount""] } } } ]); ","Group the documents from the 'store_events' collection by the aisle number, calculating the total dwell time by summing the dwell time from the customer profiles and counting the number of documents per aisle, then project the average dwell time by dividing the total dwell time by the total count. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" }, totalCount: { $sum: 1 } } }, { $project: { avgDwellTime: { $divide: [""$totalDwellTime"", ""$totalCount""] } } } ]); "," Aggregate the data in the 'store_events' collection by aisle number to compute the total customer dwell time and the total number of events, then derive the average dwell time by performing a division of the total dwell time by the total event count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": { $exists: true } } }, { $group: { _id: ""$identifier.store_id"", returns: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Return""] }, 1, 0] } } } } ]); ","Select all documents from the 'store_events' collection that include a customer profile with staff interaction, and group the results by store ID while calculating the total number of returns based on the condition that the event type is ""Return"". "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.staff_interaction"": { $exists: true } } }, { $group: { _id: ""$identifier.store_id"", returns: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Return""] }, 1, 0] } } } } ]); "," Retrieve data from the 'store_events' collection where customer profiles contain staff interaction, and aggregate the results by store ID to sum the returns, counting instances where the event type is classified as ""Return""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve all documents from the 'store_events' collection where the 'event.type' is specified, including the associated customer profiles with details on age group, basket items, dwell time, and staff interaction. "
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",," Extract all entries from the 'store_events' collection that contain the event type and the respective customer profiles, which feature information on age group, items in the basket, dwell time, and interactions with staff."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); ",Select all documents from the 'events' collection where the event severity in the response is classified as 'Critical'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); ", Retrieve entries from the 'events' collection that have a severity level of 'Critical' for the events recorded in the response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""cam123"" }); ",Retrieve all documents from the 'events' collection where the camera identifier is 'cam123'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""cam123"" }); ", Find records in the 'events' collection that are associated with the camera ID 'cam123'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"" }).limit(10); ",Retrieve up to ten documents from the 'events' collection where the event type in the response is categorized as a 'vehicle'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"" }).limit(10); ", Select a maximum of ten records from the 'events' collection that have their event type classified as 'vehicle' within the response field.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Male"" }); ",Select all documents from the 'events' collection where the attribute 'Gender' within the 'blobs' of the 'event' response is identified as 'Male'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Male"" }); ", Retrieve entries from the 'events' collection that have a 'blobs' attribute labeled as 'Gender' with a value of 'Male' in their event response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } }); ","Retrieve all event documents from the 'events' collection where the event's creation timestamp is between January 1, 2023, and December 31, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } }); ", Find all documents in the 'events' collection that have an event creation timestamp from the start of January 2023 to the end of December 2023.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""ABC123"" }); ","Find all documents in the 'events' collection where the label in the blobs of the event response is ""ABC123"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""ABC123"" }); "," Retrieve entries from the 'events' collection that have a blob label of ""ABC123"" within the event response field."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task456"", ""response.event.severity"": { $ne: ""Low"" } }); ",Select all documents from the 'events' collection where the 'task_id' under the 'identifier' is 'task456' and the 'severity' of the event within the 'response' is not classified as 'Low'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task456"", ""response.event.severity"": { $ne: ""Low"" } }); ", Retrieve entries from the 'events' collection that have a 'task_id' of 'task456' in the 'identifier' field and exclude those events that are marked with a 'Low' severity in the 'response'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.8 } }); ",Select all documents from the 'events' collection where the score of each blob in the response event is greater than 0.8. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.8 } }); ", Retrieve entries from the 'events' collection for which the score within the blobs of the event response exceeds 0.8.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }); ","Fetch all documents from the 'events' collection where the event type is classified as ""person"" and the age range within the blobs attributes is either ""20-30"" or ""30-40"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }); "," Retrieve entries from the 'events' collection that pertain to events of type ""person"" and where the associated blobs contain attributes indicating an age range of ""20-30"" or ""30-40""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group789"", ""response.event.label"": { $exists: true } }); ",Find all documents in the 'events' collection where the 'camgroup_id' in the identifier is 'group789' and the event label in the response exists. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group789"", ""response.event.label"": { $exists: true } }); ", Retrieve records from the 'events' collection that have a 'camgroup_id' of 'group789' and also contain an event label within the response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""Toyota"" }).sort({ ""response.event.c_timestamp"": -1 }); ","Find all documents in the 'events' collection where the attribute 'Make' of the blobs within the event response is 'Toyota', and sort these results by the event's creation timestamp in descending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""Toyota"" }).sort({ ""response.event.c_timestamp"": -1 }); "," Retrieve entries from the 'events' collection that include a blob attribute 'Make' equal to 'Toyota', ordered by the event's timestamp in the most recent first manner."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""cam001"", ""response.event.blobs.attribs.Color"": ""Red"" }).limit(5); ",Select up to five documents from the 'events' collection where the 'camera_id' is 'cam001' and the color attribute in the event blobs is specified as 'Red'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""cam001"", ""response.event.blobs.attribs.Color"": ""Red"" }).limit(5); ", Retrieve a maximum of five records from the 'events' collection that match the condition where the 'camera_id' equals 'cam001' and the 'Color' attribute within the blobs of the event response is 'Red'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": { $in: [""Medium"", ""High""] } }); ",Retrieve all documents from the 'events' collection where the severity of the blobs under the event response is either Medium or High. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": { $in: [""Medium"", ""High""] } }); ", Find entries in the 'events' collection that have a blob severity categorized as Medium or High within the response event field.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs"": { $elemMatch: { label: ""XYZ456"", score: { $gt: 0.9 } } } }); ","Locate all documents in the 'events' collection where the response contains an event blob with the label ""XYZ456"" and a score greater than 0.9. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs"": { $elemMatch: { label: ""XYZ456"", score: { $gt: 0.9 } } } }); "," Search the 'events' collection for records that include an event blob with the label ""XYZ456"" and a score exceeding 0.9."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Upper Clothing"": { $ne: ""None"" } }); ","Find all documents in the 'events' collection where the event type is classified as ""person"" and the upper clothing attribute of the event blobs is not marked as ""None"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Upper Clothing"": { $ne: ""None"" } }); "," Retrieve entries from the 'events' collection that pertain to individuals, ensuring that the upper clothing attribute in the associated blobs is specified and does not equal ""None""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task123"", ""response.event.blobs.attribs.Type"": ""Hatchback"" }); ","Fetch all documents from the 'events' collection where the task identifier is 'task123', and the event type in the response's blobs is categorized as 'Hatchback'. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task123"", ""response.event.blobs.attribs.Type"": ""Hatchback"" }); ", Retrieve entries from the 'events' collection that specifically have a task ID of 'task123' and contain blobs in their response event attributes labeled as 'Hatchback'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs"": { $size: 3 } }); ",Retrieve all documents from the 'events' collection where the 'blobs' array within the 'response.event' field contains exactly three elements. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs"": { $size: 3 } }); ", Find entries in the 'events' collection that have precisely three items in the 'blobs' array located in the 'response.event' field.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-06-01"") } }); ","Fetch all records from the 'events' collection where the event timestamp is on or after June 1, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-06-01"") } }); "," Retrieve entries from the 'events' collection that have an event creation timestamp equal to or greater than June 1, 2023."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.label"": ""truck"" }).sort({ ""response.event.c_timestamp"": 1 }); ","Find all records in the 'events' collection where the attribute label in the blobs of the event's response is 'truck', and arrange the results in ascending order by the event's timestamp. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.label"": ""truck"" }).sort({ ""response.event.c_timestamp"": 1 }); ", Retrieve documents from the 'events' collection that have a blobs attribute label labeled as 'truck' and sort these entries by the event timestamp in chronological order.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group456"", ""response.event.severity"": { $eq: ""Critical"" }, ""response.event.blobs.score"": { $gt: 0.75 } }); ","Fetch all documents from the 'events' collection where the 'camgroup_id' is 'group456', the event severity is 'Critical', and the score of the blobs is greater than 0.75. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group456"", ""response.event.severity"": { $eq: ""Critical"" }, ""response.event.blobs.score"": { $gt: 0.75 } }); "," Retrieve records from the 'events' collection that match the 'camgroup_id' of 'group456', have a 'Critical' severity for the event, and exhibit a blobs score exceeding 0.75."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve all documents from the 'events' collection where the 'identifier.camgroup_id' is equal to a specified group ID, the 'identifier.task_id' matches a certain task ID, and the 'response.event.type' is equal to 'person'. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",," Find entries in the 'events' collection that have an 'identifier.camgroup_id' corresponding to a given group, an 'identifier.task_id' that aligns with a specific task ID, and where the 'response.event.type' is classified as 'person'."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""identifier.camgroup_id"": { $exists: true } }); ",Retrieve all documents from the 'events' collection where the 'identifier.camgroup_id' field exists. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""identifier.camgroup_id"": { $exists: true } }); ", Find entries in the 'events' collection that have the 'identifier.camgroup_id' property present.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": ""Critical"" }); ",Select all documents from the 'events' collection where the severity level of the event in the response is classified as Critical. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": ""Critical"" }); ", Retrieve entries from the 'events' collection that have a severity status of Critical within the event responses.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera_123"" }); ","Find all event documents in the 'events' collection that have the 'camera_id' field equal to ""camera_123"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera_123"" }); "," Retrieve all records from the 'events' collection where the value of the 'camera_id' within the identifier is ""camera_123""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.label"": { $exists: true } }); ","Select all documents from the 'events' collection where the event type is labeled as ""person"" and the blobs array contains a label field that exists. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.label"": { $exists: true } }); "," Retrieve entries from the 'events' collection that have an event type of ""person"" and ensure that the blobs within those events include a label attribute."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); ","Retrieve all records from the 'events' collection where the 'c_timestamp' field within the 'response.event' object is on or after January 1, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); "," Find all documents in the 'events' collection that have a 'c_timestamp' in the 'response.event' object equal to or greater than January 1, 2023."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": { $in: [""Low"", ""Medium""] } }).limit(10); ",Retrieve a maximum of 10 documents from the 'events' collection where the severity of the event in the response is either 'Low' or 'Medium'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": { $in: [""Low"", ""Medium""] } }).limit(10); ", Find up to 10 entries in the 'events' collection that have an event severity of 'Low' or 'Medium' within their response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ",Find all documents in the 'events' collection where the gender attribute in the blobs array within the event response is 'Female'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ", Retrieve entries from the 'events' collection that have a gender attribute of 'Female' in the blobs section of the event response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""30-40"" }); ","Fetch all records from the 'events' collection where the age attribute within the blobs of the event response is classified as ""30-40."" "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""30-40"" }); "," Retrieve documents from the 'events' collection that have an age range of ""30-40"" specified in the attributes of the blobs associated with the event's response."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task_456"", ""response.event.type"": ""vehicle"" }).sort({ ""response.event.c_timestamp"": -1 }); ","Select all documents from the 'events' collection where the task ID is 'task_456' and the event type is classified as 'vehicle', sorting the results by the event's timestamp in descending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task_456"", ""response.event.type"": ""vehicle"" }).sort({ ""response.event.c_timestamp"": -1 }); "," Retrieve entries from the 'events' collection that correspond to task ID 'task_456' and have an event type of 'vehicle', arranging the output by the event timestamp in reverse chronological order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.9 } }); ",Select all documents from the 'events' collection where the score of each blob in the event's response is greater than or equal to 0.9. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.9 } }); ", Retrieve records from the 'events' collection where the score within the blobs of the event response is at least 0.9.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.subclass"": ""sedan"" }); ",Retrieve all documents from the 'events' collection where the subclass of the blobs in the event response is 'sedan'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.subclass"": ""sedan"" }); ", Find records in the 'events' collection that contain blobs with a subclass value of 'sedan' within their event response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""toyota"", ""response.event.severity"": ""Medium"" }); ",Select documents from the 'events' collection where the 'Make' attribute in the 'response.event.blobs.attribs' is 'toyota' and the 'severity' of the event is classified as 'Medium'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""toyota"", ""response.event.severity"": ""Medium"" }); ", Retrieve records in the 'events' collection that have a 'Make' of 'toyota' in the 'response.event.blobs.attribs' and a 'severity' level of 'Medium' in the event details.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }); ","Fetch all documents from the 'events' collection where the label of the event in the response is equal to ""ABC123"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }); "," Retrieve entries from the 'events' collection that contain a response event with the label ""ABC123""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group_1"", ""response.event.c_timestamp"": { $lt: new Date(""2023-03-01T00:00:00Z"") } }); ","Fetch all entries from the 'events' collection where the 'camgroup_id' is 'group_1', and the 'c_timestamp' of the event is before March 1, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group_1"", ""response.event.c_timestamp"": { $lt: new Date(""2023-03-01T00:00:00Z"") } }); "," Retrieve documents from the 'events' collection for events associated with 'camgroup_id' set to 'group_1', ensuring that the event's 'c_timestamp' occurs prior to March 1, 2023."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""red"", ""response.event.type"": ""vehicle"" }).sort({ ""response.event.c_timestamp"": 1 }); ","Retrieve all documents from the 'events' collection where the event type is 'vehicle' and the color attribute of the blobs is 'red', and sort the results by the event creation timestamp in ascending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""red"", ""response.event.type"": ""vehicle"" }).sort({ ""response.event.c_timestamp"": 1 }); "," Find entries in the 'events' collection that have a 'vehicle' event type and where the color specified in the blobs' attributes is 'red', sorting the output by the timestamp of the event from earliest to latest."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""XYZ456"", ""identifier.camera_id"": ""camera_789"" }); ",Find all documents in the 'events' collection where the 'blobs.label' field in the 'response.event' object is 'XYZ456' and the 'camera_id' field in the 'identifier' object is 'camera_789'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""XYZ456"", ""identifier.camera_id"": ""camera_789"" }); ", Retrieve entries from the 'events' collection that have a 'blobs.label' of 'XYZ456' in the 'response.event' section and where the 'camera_id' under 'identifier' is 'camera_789'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-02-01T00:00:00Z""), $lt: new Date(""2023-03-01T00:00:00Z"") } }); ","Retrieve all documents from the 'events' collection where the event timestamp is greater than or equal to February 1, 2023, and less than March 1, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-02-01T00:00:00Z""), $lt: new Date(""2023-03-01T00:00:00Z"") } }); "," Find entries in the 'events' collection that have an event timestamp occurring on or after February 1, 2023, but before March 1, 2023."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task_123"", ""response.event.severity"": ""Critical"" }).limit(5); ",Find the first five event documents from the 'events' collection where the task ID is 'task_123' and the event severity is 'Critical'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task_123"", ""response.event.severity"": ""Critical"" }).limit(5); ", Retrieve up to five records from the 'events' collection that have a task identifier of 'task_123' and an event severity classified as 'Critical'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""Hatchback"" }); ","Select all documents from the 'events' collection where the type of the blob's attributes in the response event is specified as ""Hatchback"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""Hatchback"" }); "," Retrieve entries from the 'events' collection that have attributes of the blob's type classified as ""Hatchback"" within the event responses."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Gender"": ""Male"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(3); ","Retrieve the top three most recent event records from the 'events' collection where the event type is 'person' and the gender attribute of the blobs is 'Male', sorted by the event timestamp in descending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.attribs.Gender"": ""Male"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(3); "," Select the latest three documents from the 'events' collection that describe events of type 'person', filtering for male individuals among the blobs' attributes, and arrange the results by the event's timestamp in reverse chronological order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Fetch all documents from the 'events' collection where the 'severity' of the event is classified as 'Critical', and include only the attributes related to the event type for instances involving vehicles. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",," Retrieve records from the 'events' collection that have a 'Critical' event severity, selectively returning data about the event type for vehicle-related occurrences."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); ","Retrieve all documents from the 'events' collection where the severity of the event in the response is classified as ""Critical."" "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); "," Find entries in the 'events' collection that have a severity level marked as ""Critical"" within the event response details."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": { $exists: true } }); ",Retrieve all documents from the 'events' collection that have an existing 'camgroup_id' field in their identifier. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": { $exists: true } }); ", Find all entries in the 'events' collection where the 'identifier' contains a 'camgroup_id' that is present.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.label"": { $exists: true } }); ",Select all documents from the 'events' collection where the event type in the response is classified as 'person' and the blobs associated with the event must contain a label. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.blobs.label"": { $exists: true } }); "," Retrieve entries from the 'events' collection that indicate the type of event as 'person' in the response, ensuring that the blobs associated with these events have an existing label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.countDocuments({ ""response.event.severity"": ""Low"" }); ",Count the number of documents in the 'events' collection where the severity of the event in the response is classified as 'Low'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.countDocuments({ ""response.event.severity"": ""Low"" }); ", Determine how many entries exist in the 'events' collection that have an event severity marked as 'Low' within the response field.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera_123"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(10); ","Select the latest ten event documents from the 'events' collection where the camera identifier is 'camera_123', and arrange the results in descending order based on the event's timestamp. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera_123"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(10); "," Retrieve up to ten events from the 'events' collection that are associated with 'camera_123', sorting these entries by the event creation timestamp in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", count: { $sum: 1 } } } ]); ","Select all documents from the 'events' collection where the event type is classified as 'vehicle', and group the results by the event label while counting the number of occurrences for each label. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", count: { $sum: 1 } } } ]); "," Retrieve records from the 'events' collection that have an event type of 'vehicle', and aggregate the data by labeling each event while calculating the total count for each unique label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.task_id"": ""task_1"" } }, { $project: { ""response.event.c_timestamp"": 1, ""response.event.severity"": 1 } } ]); ","Select documents from the 'events' collection where the task identifier is 'task_1', and retrieve only the event's timestamp and severity details from the response. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.task_id"": ""task_1"" } }, { $project: { ""response.event.c_timestamp"": 1, ""response.event.severity"": 1 } } ]); "," Query the 'events' collection for entries with a task ID of 'task_1', projecting the capture timestamp and severity attributes from the event response."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }).count(); ",Count the number of documents in the 'events' collection where the gender attribute in the blobs array of the response event is specified as 'Female'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }).count(); ", Determine the total number of records in the 'events' collection that have a gender attribute set to 'Female' within the blobs of the event response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""camgroup_1"" } }, { $sort: { ""response.event.c_timestamp"": 1 } } ]); ","Select all documents from the 'events' collection where the 'camgroup_id' in the 'identifier' field is 'camgroup_1', and sort the results by the 'c_timestamp' field within the 'response.event' in ascending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""camgroup_1"" } }, { $sort: { ""response.event.c_timestamp"": 1 } } ]); "," Retrieve entries from the 'events' collection that have a 'camgroup_id' of 'camgroup_1' in the 'identifier' field, and arrange these entries by the 'c_timestamp' in the 'response.event' field in increasing order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } } ]); ","Extract the labels of all blobs from the events in the 'events' collection, calculating the average score for each label by unwinding the blobs array and grouping the results accordingly. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } } ]); ", Retrieve the unique labels of blobs from the 'events' collection while averaging their scores by first unwinding the blobs and then grouping the data by each label.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": { $ne: ""Low"" } }).sort({ ""response.event.severity"": 1 }).limit(5); ","Select the first five documents from the 'events' collection where the severity in the blobs of the response event is not classified as ""Low,"" and sort the results by the severity of the response event in ascending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": { $ne: ""Low"" } }).sort({ ""response.event.severity"": 1 }).limit(5); "," Retrieve up to five entries from the 'events' collection that exclude any entries with a ""Low"" severity in the event blobs and arrange the output based on the response event severity in increasing order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$response.event.severity"", total: { $sum: 1 } } } ]); ","Select all event documents from the 'events' collection where the type of event in the response is identified as 'person', and group these results by the severity level of the events, counting the total occurrences for each severity. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$response.event.severity"", total: { $sum: 1 } } } ]); "," Retrieve records from the 'events' collection that have a response type categorized as 'person', aggregating the data by event severity to determine the total number of events for each severity classification."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": { $in: [""match_1"", ""match_2""] } }); ",Retrieve all documents from the 'events' collection where the 'match_id' field within the 'blobs' array of the 'response.event' object matches either 'match_1' or 'match_2'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": { $in: [""match_1"", ""match_2""] } }); ", Find entries in the 'events' collection that have 'match_id' values of 'match_1' or 'match_2' in the 'blobs' array located in the 'response.event' object.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the events in the 'events' collection by the 'camera_id' field from the identifier, calculating the total number of events for each camera, and then sort these camera groups by the total number of events in descending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data from the 'events' collection to count all events associated with each unique 'camera_id' in the identifier, and order the results starting with the camera that has the highest event count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""20-30"" }).limit(3); ",Select up to three documents from the 'events' collection where the age attribute in the blobs of the event response is categorized as '20-30'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""20-30"" }).limit(3); ", Retrieve a maximum of three entries from the 'events' collection that include an age range of '20-30' in the attributes of the event response's blobs.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""camgroup_2"" } }, { $project: { label: ""$response.event.label"", timestamp: ""$response.event.c_timestamp"" } } ]); ","Select the events from the 'events' collection where the 'camgroup_id' in the identifier is equal to 'camgroup_2', and return the event label along with the event timestamp. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""camgroup_2"" } }, { $project: { label: ""$response.event.label"", timestamp: ""$response.event.c_timestamp"" } } ]); "," Retrieve documents from the 'events' collection filtering for those with a 'camgroup_id' of 'camgroup_2', projecting only the label and timestamp of the event."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.findOne({ ""response.event.type"": ""vehicle"", ""response.event.severity"": ""Medium"" }); ",Retrieve a single document from the 'events' collection where the event type is categorized as 'vehicle' and the event severity is classified as 'Medium'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.findOne({ ""response.event.type"": ""vehicle"", ""response.event.severity"": ""Medium"" }); ", Find one record in the 'events' collection that has an event type marked as 'vehicle' and a severity level indicated as 'Medium'.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.75 } } }, { $group: { _id: ""$response.event.blobs.label"", count: { $sum: 1 } } } ]); ","Unwind the 'blobs' array within the 'event' field of the 'response' object in the 'events' collection, filtering for those blobs where the score is 0.75 or greater, then group the results by the label of each blob while counting the occurrences of each label. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.75 } } }, { $group: { _id: ""$response.event.blobs.label"", count: { $sum: 1 } } } ]); "," Process the 'events' collection by expanding the 'blobs' array found in the 'response.event' section, selecting only those blobs that have a score of at least 0.75, and subsequently aggregate the results to determine the count of each unique blob label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camera_id"": ""camera_456"" } }, { $group: { _id: null, totalSeverity: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } } ]); ","Select all documents from the 'events' collection where the camera identifier is 'camera_456', and then group the results to calculate the total count of events with a severity level classified as 'Critical'. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camera_id"": ""camera_456"" } }, { $group: { _id: null, totalSeverity: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } } ]); "," From the 'events' collection, filter for entries that have the camera ID set to 'camera_456' and aggregate the data to sum up the number of instances of events labeled as 'Critical' in terms of severity."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve all documents from the 'events' collection where the 'identifier.camgroup_id' field matches a specified group ID and the 'response.event.type' is either 'person' or 'vehicle', including all relevant details from the event responses. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",," Find entries in the 'events' collection that correspond to a certain 'camgroup_id' and have an 'event.type' classified as 'person' or 'vehicle', while retrieving comprehensive information associated with each event response."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.type"": ""person"" }); ",Fetch all records from the 'events' collection where the event type specified in the response is categorized as 'person'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.type"": ""person"" }); ", Retrieve documents from the 'events' collection that have an event type of 'person' within the response data.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.c_timestamp"": -1 }); ",Retrieve all documents from the 'events' collection where the event severity is classified as Critical and sort the results by the event's timestamp in descending order. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.c_timestamp"": -1 }); "," Find events in the 'events' collection that have a severity level of Critical, ordering these events by their occurrence timestamp from most recent to oldest."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""group1"" } }, { $group: { _id: ""$identifier.task_id"", count: { $sum: 1 } } } ]); ","Select all event documents from the 'events' collection where the 'camgroup_id' in the identifier is 'group1', and group the results by the 'task_id', counting the total number of events for each task. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""group1"" } }, { $group: { _id: ""$identifier.task_id"", count: { $sum: 1 } } } ]); "," From the 'events' collection, filter for documents where the identifier's 'camgroup_id' equals 'group1', then aggregate to count the occurrences of each unique 'task_id'."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", avgScore: { $avg: { $avg: ""$response.event.blobs.score"" } } } } ]); ","Select all documents from the 'events' collection where the event type is identified as ""vehicle"", and group these results by the event label, calculating the average of the average scores from the blobs within each event. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", avgScore: { $avg: { $avg: ""$response.event.blobs.score"" } } } } ]); "," From the 'events' collection, retrieve entries categorized under the event type ""vehicle"", and aggregate the data by the event label to compute the mean score from the scores associated with the blobs in those events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"", ""response.event.type"": ""person"" }); ",Select all documents from the 'events' collection where the event type is 'person' and the gender attribute of the blobs is 'Female'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"", ""response.event.type"": ""person"" }); ", Retrieve records from the 'events' collection that correspond to entities classified as 'person' and have a gender attribute of 'Female' within their blobs.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Color"": ""Red"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", totalCount: { $sum: 1 } } } ]); ","Unwind the blobs array within the event response from the 'events' collection, filter for those blobs where the color attribute is 'Red', and then group the results by the make attribute, calculating the total count for each make. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Color"": ""Red"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", totalCount: { $sum: 1 } } } ]); "," Expand the blobs field in the event responses from the 'events' collection, apply a filter to include only those blobs with a color attribute of 'Red', and group the resulting data by the make attribute while summing the count of occurrences for each make."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": { $exists: true } }); ",Select all documents from the 'events' collection where the 'camera_id' field within the 'identifier' object exists. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": { $exists: true } }); ", Retrieve entries from the 'events' collection that contain a 'camera_id' field in the 'identifier' structure.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: ISODate(""2023-01-01""), $lt: ISODate(""2023-12-31"") } }); ","Find all documents in the 'events' collection where the event timestamp is on or after January 1, 2023, and before December 31, 2023. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: ISODate(""2023-01-01""), $lt: ISODate(""2023-12-31"") } }); "," Retrieve entries from the 'events' collection that have an event creation timestamp ranging from January 1, 2023, to just before December 31, 2023."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", criticalEvents: { $sum: { $cond: [ { $eq: [""$response.event.severity"", ""Critical""] }, 1, 0 ] } } } }, { $sort: { criticalEvents: -1 } } ]); ","Group the events from the 'events' collection by the 'camgroup_id' field in the identifier and calculate the total number of critical events by summing instances where the event severity is classified as 'Critical', then sort the results in descending order based on the count of critical events. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", criticalEvents: { $sum: { $cond: [ { $eq: [""$response.event.severity"", ""Critical""] }, 1, 0 ] } } } }, { $sort: { criticalEvents: -1 } } ]); "," Aggregate the data from the 'events' collection by 'camgroup_id', counting the occurrences of events marked as 'Critical' in severity, and order the grouped results from highest to lowest count of critical events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", totalVehicles: { $sum: 1 }, avgScore: { $avg: ""$response.event.blobs.score"" } } } ]); ","Select all documents from the 'events' collection where the event type is classified as a 'vehicle', then unwind the blobs array within the event response to prepare for aggregation, and finally group the results by the label of each blob to calculate the total number of vehicles and the average score of their confidence. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", totalVehicles: { $sum: 1 }, avgScore: { $avg: ""$response.event.blobs.score"" } } } ]); "," From the 'events' collection, retrieve entries pertaining to events of type 'vehicle', unwind the blobs associated with these events, and aggregate the data by categorizing the blobs based on their labels to determine the total count of vehicles and compute the average confidence score for each label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ $or: [{ ""response.event.type"": ""person"" }, { ""response.event.type"": ""vehicle"" }] }); ",Retrieve all documents from the 'events' collection where the event type in the response is either 'person' or 'vehicle'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ $or: [{ ""response.event.type"": ""person"" }, { ""response.event.type"": ""vehicle"" }] }); ", Find event records in the 'events' collection that are categorized as either 'person' events or 'vehicle' events based on the type specified in the response.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.task_id"": ""task1"" } }, { $project: { _id: 0, ""camera"": ""$identifier.camera_id"", ""severity"": ""$response.event.severity"" } } ]); ","Select records from the 'events' collection where the task identifier is 'task1', and project the camera ID and event severity without including the document ID in the output. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.task_id"": ""task1"" } }, { $project: { _id: 0, ""camera"": ""$identifier.camera_id"", ""severity"": ""$response.event.severity"" } } ]); "," Retrieve entries in the 'events' collection that match the task ID 'task1', and display the associated camera ID along with the event severity while excluding the internal document ID from the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $regex: /^AB/ } }); ",Find all documents from the 'events' collection where the label of the blobs within the event response matches any string that starts with 'AB' using a regular expression. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $regex: /^AB/ } }); "," Retrieve entries from the 'events' collection where the blobs in the event's response have a label that begins with 'AB', applying a regex filter to achieve this selection."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$response.event.severity"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the events in the 'events' collection by the severity of each event, counting the total number of events for each severity level, and then sort the results in descending order by the total event counts. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$response.event.severity"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); "," Aggregate the data from the 'events' collection by categorizing them based on the severity of the events, summing up the total occurrences for each severity type, and finally ordering the output with the highest totals first."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $project: { label: ""$response.event.label"", c_timestamp: ""$response.event.c_timestamp"" } }, { $sort: { c_timestamp: 1 } } ]); ","Select all documents from the 'events' collection where the event type is 'person', projecting only the event label and timestamp, and sort the results by the timestamp in ascending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $project: { label: ""$response.event.label"", c_timestamp: ""$response.event.c_timestamp"" } }, { $sort: { c_timestamp: 1 } } ]); "," Retrieve entries from the 'events' collection that have an event type of 'person', including just the labels and timestamps of these events, and arrange the output based on the timestamps from the earliest to the latest."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""30-40"", ""40-50""] } }); ","Select all documents from the 'events' collection where the age range in the 'attribs' field of the 'blobs' array under the 'response.event' object includes either ""30-40"" or ""40-50"". "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""30-40"", ""40-50""] } }); "," Retrieve entries from the 'events' collection that have blobs in the response.event field with attribs indicating the age categories ""30-40"" and ""40-50""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Type"": ""SUV"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", count: { $sum: 1 } } } ]); ","Filter the documents in the 'events' collection to include only those where the event type is 'vehicle', then unwind the blobs within the event responses, and further narrow down to those blobs that have an attribute type of 'SUV'. Finally, group the results based on the 'Make' attribute of the blobs and count the occurrences for each make. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Type"": ""SUV"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", count: { $sum: 1 } } } ]); "," Select records from the 'events' collection where the type of event is classified as 'vehicle', unwind the associated blobs in the event's response, filter for blobs having an 'SUV' type, and group the output by the 'Make' attribute of each blob while counting how many times each make appears."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"", ""response.event.severity"": ""Medium"" }); ",Select all documents from the 'events' collection where the 'camgroup_id' in the identifier is 'group2' and the event severity in the response is classified as 'Medium'. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"", ""response.event.severity"": ""Medium"" }); ", Retrieve entries from the 'events' collection with an identifier camgroup_id of 'group2' and an event severity marked as 'Medium' in the response section.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""group1"" } }, { $lookup: { from: ""events"", localField: ""identifier.task_id"", foreignField: ""identifier.task_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $project: { _id: 0, ""currentEvent"": ""$response.event.type"", ""relatedEvent"": ""$related_events.response.event.type"" } } ]); ","Retrieve events from the 'events' collection where the group identifier is 'group1', and for each event, join with related events having the same task identifier, then return the types of both the current and related events without including the document IDs. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""identifier.camgroup_id"": ""group1"" } }, { $lookup: { from: ""events"", localField: ""identifier.task_id"", foreignField: ""identifier.task_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $project: { _id: 0, ""currentEvent"": ""$response.event.type"", ""relatedEvent"": ""$related_events.response.event.type"" } } ]); "," Find event records in the 'events' collection that belong to 'group1', and for each of these events, perform a lookup for related events sharing the same task identifier, ultimately projecting only the types of the current and related events while omitting their IDs."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,Retrieve all documents from the 'events' collection where the 'severity' of the event is 'Critical' and include only those events related to the camera with 'camera_id' equal to 123. 
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",, Find all entries in the 'events' collection that have a 'Critical' severity level and are associated with the camera identified by 'camera_id' 123.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); ","Select all events from the 'events' collection where the severity of the event is categorized as 'Critical', and group these results by the camera_id, counting the number of events for each camera. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); "," Query the 'events' collection for records with an event severity classified as 'Critical', then aggregate the results according to camera_id, tallying the total number of such events for each camera."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""label"": ""$response.event.label"", ""severity"": ""$response.event.severity"", ""type"": ""$response.event.type"" } }, { $match: { severity: ""Medium"" } } ]); ","Select the event label, severity, and type from the 'events' collection, ensuring that only those entries with a severity level of 'Medium' are included in the results. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""label"": ""$response.event.label"", ""severity"": ""$response.event.severity"", ""type"": ""$response.event.type"" } }, { $match: { severity: ""Medium"" } } ]); "," Retrieve the labels, severities, and types of events from the 'events' collection, filtering the results to show only events that have a medium severity rating."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", highestSeverity: { $max: ""$response.event.severity"" } } }, { $sort: { highestSeverity: -1 } } ]); ","Group the events in the 'events' collection by the 'camgroup_id' from the 'identifier' field and determine the highest severity level from the 'response.event.severity' field for each group, then sort these groups by the highest severity in descending order. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", highestSeverity: { $max: ""$response.event.severity"" } } }, { $sort: { highestSeverity: -1 } } ]); "," Aggregate the data in the 'events' collection by grouping the entries based on the 'camgroup_id' in the 'identifier' field, calculating the maximum severity from 'response.event.severity' for each group, and order the results from the highest to the lowest severity."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $match: { avgScore: { $gt: 0.75 } } } ]); ","Unwind the 'blobs' array from the 'response.event' field of the 'events' collection, then group the documents by the 'label' of each blob while calculating the average 'score' for those labels, and finally filter the groups to include only those with an average score greater than 0.75. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $match: { avgScore: { $gt: 0.75 } } } ]); "," Expand the 'blobs' array in the 'response.event' section of the 'events' collection, aggregate the results by the 'label' of each blob, computing the average 'score' for these labels, and restrict the output to those average scores that exceed 0.75."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $lookup: { from: ""other_collection"", localField: ""identifier.task_id"", foreignField: ""related_task_id"", as: ""related_tasks"" } }, { $project: { ""identifier"": 1, ""response"": 1, ""related_tasks"": 1 } } ]); ","Select all documents from the 'events' collection where the event type is classified as 'person', and perform a join with the 'other_collection' to fetch related tasks using the task_id from 'events' and related_task_id from 'other_collection', while including the identifier, response, and related tasks in the output. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $lookup: { from: ""other_collection"", localField: ""identifier.task_id"", foreignField: ""related_task_id"", as: ""related_tasks"" } }, { $project: { ""identifier"": 1, ""response"": 1, ""related_tasks"": 1 } } ]); "," Find events labeled as 'person' in the 'events' collection and join this data with 'other_collection' to obtain pertinent tasks based on matching task IDs, ensuring the results include the identifier, response information, and related task details."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Gender"": ""Female"" } }, { $group: { _id: ""$response.event.blobs.attribs.Age"", count: { $sum: 1 } } } ]); ","Unwind the 'blobs' array from the 'response.event' field in the 'events' collection, filter the documents to include only those where the 'attribs.Gender' is 'Female', and group the results by the 'attribs.Age', counting the occurrences for each age group. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Gender"": ""Female"" } }, { $group: { _id: ""$response.event.blobs.attribs.Age"", count: { $sum: 1 } } } ]); "," Deconstruct the 'blobs' array found within the 'response.event' of the 'events' collection, select only those entries where 'attribs.Gender' equals 'Female', and aggregate the data by counting how many instances exist for each distinct 'attribs.Age'."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: null, totalEvents: { $sum: 1 } } } ]); ","Select all event documents from the 'events' collection where the event's creation timestamp falls between January 1, 2023, and December 31, 2023, and aggregate the results to count the total number of events. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: null, totalEvents: { $sum: 1 } } } ]); "," From the 'events' collection, retrieve documents corresponding to events that occurred from the start of 2023 through the end of 2023, and group them to calculate the overall count of these events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $sort: { ""response.event.c_timestamp"": -1 } }, { $group: { _id: ""$identifier.camera_id"", latestEvent: { $first: ""$$ROOT"" } } } ]); ","Sort the events in the 'events' collection by the event creation timestamp in descending order and group them by the camera ID, keeping only the most recent event for each camera. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $sort: { ""response.event.c_timestamp"": -1 } }, { $group: { _id: ""$identifier.camera_id"", latestEvent: { $first: ""$$ROOT"" } } } ]); ", Organize the records in the 'events' collection by the timestamp of the event from the response in descending order and aggregate the data to obtain the latest event for each distinct camera ID.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", blobCount: { $sum: 1 }, avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $sort: { blobCount: -1 } } ]); ","Unwind each blob within the 'response.event.blobs' array from the 'events' collection, group them by their labeled values, and calculate the total count of blobs and the average score for each label, followed by sorting the results in descending order based on the blob count. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", blobCount: { $sum: 1 }, avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $sort: { blobCount: -1 } } ]); "," Flatten the 'response.event.blobs' array from the 'events' collection, aggregate the blobs by their labels to determine the total number of occurrences and the average score associated with each label, and then arrange the output in descending order of blob count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""date"": { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.c_timestamp"" } }, ""type"": ""$response.event.type"" } }, { $group: { _id: ""$date"", eventCount: { $sum: 1 } } } ]); ","Select the date and event type from the 'events' collection, formatting the timestamp of each event, and then group the results by date to count the number of events for each day. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""date"": { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.c_timestamp"" } }, ""type"": ""$response.event.type"" } }, { $group: { _id: ""$date"", eventCount: { $sum: 1 } } } ]); "," Retrieve the event type along with the formatted date from the 'events' collection, aggregating the results to tally the total number of events occurring on each specific date."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", eventTypes: { $addToSet: ""$response.event.type"" } } }, { $match: { ""eventTypes"": ""vehicle"" } } ]); ","Group the events from the 'events' collection by their associated camgroup_id, creating a list of unique event types, and then filter these groups to retain only those that include the event type 'vehicle'. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: ""$identifier.camgroup_id"", eventTypes: { $addToSet: ""$response.event.type"" } } }, { $match: { ""eventTypes"": ""vehicle"" } } ]); "," Aggregate the information in the 'events' collection by camgroup_id, collecting all distinct event types, and subsequently match to identify only those groups where 'vehicle' is one of the event types present."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: { camera: ""$identifier.camera_id"", severity: ""$response.event.blobs.severity"" }, count: { $sum: 1 } } } ]); ","Unwind the 'blobs' array within the 'event' object of the 'response' field in the 'events' collection, then group the results by the 'camera_id' from the 'identifier' and the 'severity' level of each blob, counting the number of occurrences for each unique combination. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: { camera: ""$identifier.camera_id"", severity: ""$response.event.blobs.severity"" }, count: { $sum: 1 } } } ]); "," Flatten the 'blobs' array found in the 'event' object under 'response' from the 'events' collection, subsequently aggregating the data by 'camera_id' from 'identifier' and the severity associated with each blob, tallying the total for each distinct pair."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $lookup: { from: ""users"", localField: ""response.event.blobs.match_id"", foreignField: ""user_id"", as: ""matched_users"" } }, { $unwind: ""$matched_users"" }, { $group: { _id: ""$matched_users.username"", totalBlobs: { $sum: 1 } } } ]); ","Join the 'events' collection with the 'users' collection using the 'match_id' field from the 'response.event.blobs' array in the 'events' collection and the 'user_id' from the 'users' collection, then unwind the results to separate the matched users, and finally group the data by the username of the matched users while calculating the total number of blobs for each user. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $lookup: { from: ""users"", localField: ""response.event.blobs.match_id"", foreignField: ""user_id"", as: ""matched_users"" } }, { $unwind: ""$matched_users"" }, { $group: { _id: ""$matched_users.username"", totalBlobs: { $sum: 1 } } } ]); "," Aggregate data from the 'events' collection by performing a join with the 'users' collection based on the match_id in the 'response.event.blobs' of the 'events' and the user_id in the 'users', unwind the joined user information, and group the results by username to count the total blobs associated with each user."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", numVehicles: { $sum: 1 } } }, { $sort: { numVehicles: -1 } } ]); ","Select all documents from the 'events' collection where the event type is classified as 'vehicle', then group the results by the vehicle's make and count the number of vehicles for each make, sorting the output in descending order of the vehicle count. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", numVehicles: { $sum: 1 } } }, { $sort: { numVehicles: -1 } } ]); "," Fetch data from the 'events' collection that pertains to 'vehicle' type events, then aggregate this data by the make of the vehicles and tally the total number of vehicles for each make, arranging the list with the highest count first."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""cameraId"": ""$identifier.camera_id"", ""severity"": ""$response.event.severity"" } }, { $group: { _id: ""$cameraId"", severities: { $addToSet: ""$severity"" } } } ]); ","Project the 'camera_id' from the 'identifier' field and the 'severity' from the 'response.event' field for each document in the 'events' collection, then group the results by 'camera_id' to create a set of unique severities associated with each camera. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""cameraId"": ""$identifier.camera_id"", ""severity"": ""$response.event.severity"" } }, { $group: { _id: ""$cameraId"", severities: { $addToSet: ""$severity"" } } } ]); "," From the 'events' collection, extract the 'camera_id' included in the 'identifier' and the associated 'severity' from the 'response.event', subsequently grouping these results by 'camera_id' to compile a collection of distinct severities for every camera."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gt: ISODate(""2023-06-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.task_id"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); ","Select events from the 'events' collection where the event timestamp, 'c_timestamp', is greater than June 1, 2023, then group the results by the 'task_id' field and count the number of events for each task, finally sorting the output in descending order of event counts. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gt: ISODate(""2023-06-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.task_id"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); "," Retrieve documents from the 'events' collection that have an event timestamp, 'c_timestamp', later than June 1, 2023, aggregate the data by 'task_id' to tally the number of events per task, and sort the results by the total event count in decreasing order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""label"": ""$response.event.label"", ""camgroup"": ""$identifier.camgroup_id"" } }, { $group: { _id: ""$camgroup"", labels: { $addToSet: ""$label"" } } } ]); ","Project the 'label' field from the 'response.event' of each document and the 'camgroup_id' from the 'identifier' in the 'events' collection, then group the results by 'camgroup_id' while aggregating unique labels into an array. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $project: { ""label"": ""$response.event.label"", ""camgroup"": ""$identifier.camgroup_id"" } }, { $group: { _id: ""$camgroup"", labels: { $addToSet: ""$label"" } } } ]); "," Select the 'label' from the 'response.event' within documents in the 'events' collection and the 'camgroup_id' from the 'identifier', afterwards grouping by 'camgroup_id' to compile a set of distinct labels."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Color"", totalScore: { $sum: ""$response.event.blobs.score"" } } } ]); ","Unwind the 'blobs' array within the 'event' objects of the 'response' field in the 'events' collection, then group the resulting documents by the 'Color' attribute found in 'attribs' of each blob, calculating the total score by summing the scores of the corresponding blobs. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Color"", totalScore: { $sum: ""$response.event.blobs.score"" } } } ]); "," Deconstruct the 'blobs' array nested in the 'event' section of the 'response' field from the 'events' collection and group the data by the 'Color' attribute in 'attribs', aggregating the scores of those blobs to produce a total score for each color."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve all documents from the 'events' collection where the 'identifier' contains a specific 'camgroup_id', 'task_id', and 'camera_id', and select the relevant 'response' details for each event. "
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",," Find entries within the 'events' collection filtering by the specified 'camgroup_id', 'task_id', and 'camera_id', and include the associated 'response' information for those events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ",Retrieve all documents from the 'transit_events' collection where the event status in the response is classified as 'OnTime'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ", Find records in the 'transit_events' collection that indicate the event status in the response is 'OnTime'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""A1"" }); ",Retrieve all documents from the 'transit_events' collection where the route identifier is 'A1'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""A1"" }); ", Find records in the 'transit_events' collection that have a route_id of 'A1' in the identifier field.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"" }); ",Retrieve all documents from the 'transit_events' collection where the event type in the response is classified as 'ArrivalDeparture'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"" }); ", Find entries in the 'transit_events' collection that have an event type of 'ArrivalDeparture' within their response data.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 15.00 } }); ",Find all documents in the 'transit_events' collection where the fare amount for any passengers is greater than 15.00. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 15.00 } }); ", Retrieve entries from the 'transit_events' collection that have passenger fare amounts exceeding 15.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); ","Fetch all documents from the 'transit_events' collection where the next stop listed in the event's location is ""Central Station"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); "," Retrieve entries from the 'transit_events' collection that have ""Central Station"" specified as the next stop in the location details of the event."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: ""^[A-Z]{3}[0-9]{6}$"" } }); ",Find all documents in the 'transit_events' collection where the ticket identifier for passengers matches a pattern of three uppercase letters followed by six digits. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: ""^[A-Z]{3}[0-9]{6}$"" } }); ", Retrieve entries from the 'transit_events' collection that contain passenger ticket IDs conforming to a format consisting of three capital letters succeeded by six numerical characters.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V12345"", ""response.event.status"": ""Delayed"" }); ",Find all documents in the 'transit_events' collection where the vehicle ID is 'V12345' and the event status is 'Delayed'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V12345"", ""response.event.status"": ""Delayed"" }); "," Retrieve records from the 'transit_events' collection for the specific vehicle identified as 'V12345', filtering for events that have a status of 'Delayed'."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers boarding_time"": { $lte: new Date(""2023-10-01T14:00:00Z"") } }); ","Find all documents in the 'transit_events' collection where the boarding time of passengers is on or before October 1, 2023, at 14:00 UTC. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers boarding_time"": { $lte: new Date(""2023-10-01T14:00:00Z"") } }); "," Retrieve entries from the 'transit_events' collection for which the boarding time recorded for any passengers is less than or equal to 2 PM UTC on October 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }); ","Select all records from the 'transit_events' collection where the destination stop of any passenger in the event response is specified as ""Downtown."" "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }); "," Retrieve entries from the 'transit_events' collection that include an event response with at least one passenger whose destination stop is labeled ""Downtown."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $ne: [] } }); ",Select all documents from the 'transit_events' collection where the 'response.event.location.coordinates' field exists and is not an empty array. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $ne: [] } }); ", Retrieve records in the 'transit_events' collection that contain a non-empty 'coordinates' field within the 'response.event.location' property.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""A1"", ""B2"", ""C3""] } }); ","Select all documents from the 'transit_events' collection where the 'route_id' within the 'identifier' object matches any of the following values: ""A1"", ""B2"", or ""C3"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""A1"", ""B2"", ""C3""] } }); "," Retrieve records from the 'transit_events' collection that have an 'identifier.route_id' field equal to either ""A1"", ""B2"", or ""C3""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ",Select all documents from the 'transit_events' collection where there are no passengers recorded in the event response. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ", Fetch documents from the 'transit_events' collection that indicate the event has an empty list of passengers in the response.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.status"": ""Cancelled"" }); ",Select documents from the 'transit_events' collection where the event type is 'Incident' and the status of the event is 'Cancelled'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.status"": ""Cancelled"" }); ", Retrieve records from the 'transit_events' collection that have an event classified as 'Incident' and indicate that the event has been 'Cancelled'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date() } }); ",Select all documents from the 'transit_events' collection where the estimated arrival time in the event's location is after the current date and time. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date() } }); ", Retrieve records from the 'transit_events' collection that have an estimated arrival in the event location occurring later than the present moment.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": { $exists: true } }); ",Retrieve all documents from the 'transit_events' collection where the 'vehicle_id' under the 'identifier' field is present. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": { $exists: true } }); ", Find entries in the 'transit_events' collection that include a defined 'vehicle_id' in the 'identifier' section.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 5.00 } }); ",Select all records from the 'transit_events' collection where the fare amount for passengers is less than $5.00. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 5.00 } }); ", Retrieve documents from the 'transit_events' collection where the fare paid by passengers is under $5.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"" }).sort({ ""response.event.location.estimated_arrival"": 1 }).limit(5); ","Retrieve the first five documents from the 'transit_events' collection where the event status in the response is marked as 'Delayed', sorted by the estimated arrival time of the location in ascending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"" }).sort({ ""response.event.location.estimated_arrival"": 1 }).limit(5); "," Select up to five entries from the 'transit_events' collection with an event status of 'Delayed', arranging the results in order of increasing estimated arrival time from the location details."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find().sort({ ""response.event.passengers.length"": -1 }).limit(10); ","Retrieve all documents from the 'transit_events' collection, sort them by the number of passengers in the event response in descending order, and limit the results to the top ten records. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find().sort({ ""response.event.passengers.length"": -1 }).limit(10); "," Find records in the 'transit_events' collection and arrange them by the length of the passengers array within the event response in decreasing order, returning only the first ten entries."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-09-30T00:00:00Z"") } }); ","Retrieve all documents from the 'transit_events' collection where the boarding time of passengers is on or after September 30, 2023. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-09-30T00:00:00Z"") } }); "," Find transit event records in the 'transit_events' collection that have passenger boarding times equal to or greater than September 30, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Uptown"", ""response.event.status"": { $ne: ""Cancelled"" } }); ",Select all records from the 'transit_events' collection where the next stop is 'Uptown' and the event status is not 'Cancelled'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Uptown"", ""response.event.status"": { $ne: ""Cancelled"" } }); ", Retrieve all entries in the 'transit_events' collection that have 'Uptown' as the next stop while excluding any entries where the event status is 'Cancelled'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'transit_events' collection where the event status is either 'OnTime', 'Delayed', or 'Cancelled', and include details about the passengers such as their ticket IDs, boarding times, destination stops, and fare amounts. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find records in the 'transit_events' collection corresponding to events with statuses of 'OnTime', 'Delayed', or 'Cancelled', while also retrieving information about the passengers including ticket IDs, boarding times, destination stops, and fare amounts."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ",Retrieve all documents from the 'transit_events' collection where the event status in the response field is 'OnTime'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ", Find entries in the 'transit_events' collection that have an 'OnTime' status recorded in the event response.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""B123"" }); ",Fetch all entries from the 'transit_events' collection where the route identifier is specified as 'B123'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""B123"" }); ", Retrieve documents in the 'transit_events' collection that have a route ID matching 'B123'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"", ""response.event.status"": ""Delayed"" }); ",Fetch all entries from the 'transit_events' collection where the event type is labeled as 'ArrivalDeparture' and the status of the event shows as 'Delayed'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"", ""response.event.status"": ""Delayed"" }); ", Retrieve records from the 'transit_events' collection that have an event type categorized under 'ArrivalDeparture' with a status marked as 'Delayed'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 10.00 } }); ",Find all documents in the 'transit_events' collection where the fare amount for passengers is less than 10.00. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 10.00 } }); ", Retrieve entries from the 'transit_events' collection that have passenger fare amounts below 10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V456"", ""response.event.status"": ""Cancelled"" }); ",Fetch all records from the 'transit_events' collection where the 'vehicle_id' is 'V456' and the event status is 'Cancelled'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V456"", ""response.event.status"": ""Cancelled"" }); ", Retrieve entries from the 'transit_events' collection that have a 'vehicle_id' of 'V456' and indicate the event status as 'Cancelled'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: ""^[A-Z]{3}.*"" } }); ",Retrieve all documents from the 'transit_events' collection where the 'ticket_id' field of the passengers in the event response matches the regular expression pattern of three uppercase letters followed by any characters. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: ""^[A-Z]{3}.*"" } }); ", Find transit event records in the 'transit_events' collection that have a 'ticket_id' for passengers which consists of three capital letters followed by any number of subsequent characters.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); ","Fetch all records from the 'transit_events' collection where the next stop listed in the event's location is ""Central Station."" "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); "," Retrieve entries in the 'transit_events' collection that specify ""Central Station"" as the next stop within the location details of the event."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.passengers"": { $exists: true, $not: { $size: 0 } } }); ","Select all documents from the 'transit_events' collection where the event type is categorized as 'Incident' and where there are passengers listed in the event data, ensuring that the passengers array is not empty. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.passengers"": { $exists: true, $not: { $size: 0 } } }); ", Retrieve records from the 'transit_events' collection that feature an event of type 'Incident' and include instances where the passengers array exists and contains at least one entry.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true } }); ",Select all records from the 'transit_events' collection where the location coordinates for the event are present. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true } }); ", Retrieve entries from the 'transit_events' collection that have defined coordinates in the event's location data.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }); ",Retrieve all documents from the 'transit_events' collection where the destination stop listed in the passengers' event data is 'Downtown'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }); ", Find entries in the 'transit_events' collection that have 'Downtown' as the destination stop for passengers within the event information.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date(""2023-10-01T00:00:00Z"") } }); ","Fetch all entries from the 'transit_events' collection where the estimated arrival time in the event's location is on or after October 1, 2023. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date(""2023-10-01T00:00:00Z"") } }); "," Select records from the 'transit_events' collection that have an estimated arrival date for the event's location that is greater than or equal to October 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lt: new Date(""2023-10-01T12:00:00Z"") } }); ","Fetch all documents from the 'transit_events' collection where the boarding time of passengers in the response event is prior to October 1, 2023, at noon UTC. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lt: new Date(""2023-10-01T12:00:00Z"") } }); "," Retrieve records from the 'transit_events' collection that show passenger boarding times in the response event occurring before 12:00 PM UTC on October 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $lt: new Date(""2023-10-01T12:00:00Z"") }, ""response.event.status"": ""Delayed"" }); ","Retrieve all documents from the 'transit_events' collection where the 'estimated_arrival' in the 'response.event.location' is before October 1, 2023, at 12:00 PM UTC, and the 'status' in the 'response.event' is marked as 'Delayed'. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $lt: new Date(""2023-10-01T12:00:00Z"") }, ""response.event.status"": ""Delayed"" }); "," Find records in the 'transit_events' collection for which the 'estimated_arrival' time in the 'response.event.location' is earlier than noon on October 1, 2023, UTC, and where the 'status' within 'response.event' indicates a 'Delayed' event."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""T789"", ""response.event.passengers.fare_amount"": { $gte: 5.00, $lte: 15.00 } }); ","Retrieve all documents from the 'transit_events' collection where the route identifier is 'T789' and the fare amount for passengers falls between $5.00 and $15.00, inclusive. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""T789"", ""response.event.passengers.fare_amount"": { $gte: 5.00, $lte: 15.00 } }); "," Find entries in the 'transit_events' collection for the route designated as 'T789', where the fare amount for passengers is greater than or equal to $5.00 and less than or equal to $15.00."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.vehicle_id"": ""V456"" }, { ""response.event.passengers"": 1, ""response.event.status"": 1 }); ","Fetch one document from the 'transit_events' collection where the 'vehicle_id' is 'V456', and retrieve only the 'passengers' information and the 'status' of the 'event' from the response. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.vehicle_id"": ""V456"" }, { ""response.event.passengers"": 1, ""response.event.status"": 1 }); ", Retrieve a single record from the 'transit_events' collection that matches the 'vehicle_id' of 'V456' and select only the details of 'passengers' along with the 'status' field of the 'event' within the response.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-10-01T05:00:00Z""), $lt: new Date(""2023-10-01T09:00:00Z"") } }); ","Fetch all documents from the 'transit_events' collection that have passenger boarding times occurring between 5:00 AM and 9:00 AM on October 1, 2023. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-10-01T05:00:00Z""), $lt: new Date(""2023-10-01T09:00:00Z"") } }); "," Retrieve transit event records where the boarding time of passengers falls within the time range from 5 AM to 9 AM on October 1, 2023, from the 'transit_events' collection."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": { $in: [""OnTime"", ""Delayed""] } }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Fetch all records from the 'transit_events' collection where the event status is either 'OnTime' or 'Delayed', and sort the resultant entries by the estimated arrival time in ascending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": { $in: [""OnTime"", ""Delayed""] } }).sort({ ""response.event.location.estimated_arrival"": 1 }); "," Retrieve documents from the 'transit_events' collection that have an event status of 'OnTime' or 'Delayed', and arrange these records by the estimated arrival time, with the earliest arrivals listed first."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 2 } }); ",Find documents in the 'transit_events' collection where the event contains exactly two passengers listed in the response field. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 2 } }); ", Retrieve entries from the 'transit_events' collection that have a response indicating that there are precisely two passengers present in the event details.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Maintenance"", ""response.event.passengers"": { $exists: false } }); ",Select all records from the 'transit_events' collection where the event type is 'Maintenance' and there are no passengers associated with the event. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Maintenance"", ""response.event.passengers"": { $exists: false } }); ", Retrieve documents from the 'transit_events' collection that indicate a 'Maintenance' type event while ensuring that the event does not have any passengers listed.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": { $regex: ""Station"" } }); ","Retrieve all documents from the 'transit_events' collection where the next stop indicated in the event's location includes the term ""Station"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": { $regex: ""Station"" } }); "," Find transit event records in the 'transit_events' collection that have a next stop in the event's location matching the pattern ""Station""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all entries from the 'transit_events' collection where the event status is either 'OnTime', 'Delayed', or 'Cancelled', and each entry must contain details regarding the vehicle's route and identification. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve all records from the 'transit_events' collection that feature events with a status of 'OnTime', 'Delayed', or 'Cancelled', ensuring that the data includes filtering by route and vehicle identifiers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ",Find all documents in the 'transit_events' collection where the status of the event in the response is 'Delayed'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ", Retrieve entries from the 'transit_events' collection that have an event status of 'Delayed' within the response field.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""R123"" }); ","Fetch all documents from the 'transit_events' collection where the route identifier is set to ""R123"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""R123"" }); "," Retrieve entries from the 'transit_events' collection that have a route_id value of ""R123""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.passengers"": { $exists: true, $ne: [] } }); ","Fetch all documents from the 'transit_events' collection where the event type is categorized as 'Incident' and there are passengers recorded, ensuring that this passenger array is not empty. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.passengers"": { $exists: true, $ne: [] } }); ", Retrieve entries from the 'transit_events' collection that pertain to incidents and include instances where the passengers field exists and contains one or more records.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 2.50 } }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Retrieve all documents from the 'transit_events' collection where the fare amount of passengers is greater than or equal to $2.50, and sort the results by the estimated arrival time in ascending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 2.50 } }).sort({ ""response.event.location.estimated_arrival"": 1 }); "," Find entries in the 'transit_events' collection that have passenger fare amounts of at least $2.50, ordered by their estimated arrival times from earliest to latest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: ""$identifier.route_id"", totalOnTime: { $sum: 1 } } }]); ","Select all records from the 'transit_events' collection where the event status is 'OnTime', and aggregate the results by counting the occurrences of each unique route_id, labeling this count as totalOnTime. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: ""$identifier.route_id"", totalOnTime: { $sum: 1 } } }]); "," Retrieve documents from the 'transit_events' collection that have an 'OnTime' event status, grouping the data by route_id and calculating the total number of on-time events for each route, referred to as totalOnTime."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }]); ","Aggregate the transit events by unwinding the passenger data within the events, and then group the results by the destination stop of each passenger, calculating the total fare amount collected for each unique destination stop. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }]); "," Unwind the list of passengers from the event responses in the transit events collection, and group them by their destination stops to sum up the total fare amount for each distinct stop location."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $group: { _id: ""$identifier.vehicle_id"", avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $match: { avgFare: { $gt: 3 } } }]); ","Calculate the average fare amount for passengers grouped by each vehicle from the 'transit_events' collection, and return only those groups where the average fare is greater than 3. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $group: { _id: ""$identifier.vehicle_id"", avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $match: { avgFare: { $gt: 3 } } }]); "," Group the data in the 'transit_events' collection by vehicle ID, computing the average fare of passengers, and filter for groups where the average fare exceeds 3."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).project({ ""identifier.vehicle_id"": 1, ""response.event.location.coordinates"": 1 }); ",Retrieve the vehicle IDs and the coordinates of the location from the 'transit_events' collection where the next stop is 'Main St'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).project({ ""identifier.vehicle_id"": 1, ""response.event.location.coordinates"": 1 }); ", Find documents in the 'transit_events' collection that have a next stop of 'Main St' and return the vehicle IDs along with the location coordinates.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01"") } }).sort({ ""response.event.passengers.boarding_time"": -1 }); ","Select all documents from the 'transit_events' collection where the boarding time of passengers is on or after January 1, 2023, and arrange the results in descending order based on the boarding time. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01"") } }).sort({ ""response.event.passengers.boarding_time"": -1 }); "," Retrieve entries from the 'transit_events' collection that have passenger boarding times equal to or greater than January 1, 2023, and sort these entries by boarding time in descending order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""identifier.route_id"": ""R456"" } }, { $sort: { ""response.event.location.estimated_arrival"": 1 } }, { $limit: 5 }]); ","Fetch the first five records from the 'transit_events' collection where the route identifier is 'R456', and order the results by the estimated arrival time of the event's location in ascending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""identifier.route_id"": ""R456"" } }, { $sort: { ""response.event.location.estimated_arrival"": 1 } }, { $limit: 5 }]); "," Retrieve a maximum of five documents from the 'transit_events' collection that have the route ID of 'R456', sorted by the estimated arrival times of the events' locations in increasing order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } }]); ","Unwind the passenger information from the 'transit_events' collection, then group the records by 'ticket_id' while calculating the total fare amount for each ticket, and finally sort the results in descending order based on the total fare. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } }]); "," From the 'transit_events' collection, separate each passenger record, aggregate the total fare by 'ticket_id', and order the outcome by total fare in a descending manner."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } }]); ","Select all transit event records from the 'transit_events' collection where the event type is categorized as 'ArrivalDeparture', then group the results by the route ID and count the total number of events for each route, and finally sort the grouped data in descending order based on the event count. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } }]); "," Retrieve entries from the 'transit_events' collection where the event type is 'ArrivalDeparture', group these entries by route ID to calculate the total number of occurrences for each route, and sort the groups by total occurrences in descending order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $geoWithin: { $box: [[-75.0, 40.0], [-74.0, 41.0]] } } }); ","Retrieve all documents from the 'transit_events' collection where the coordinates of the event's location fall within the rectangular geographic area defined by the southwest corner at longitude -75.0 and latitude 40.0, and the northeast corner at longitude -74.0 and latitude 41.0. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $geoWithin: { $box: [[-75.0, 40.0], [-74.0, 41.0]] } } }); "," Find records in the 'transit_events' collection that have event location coordinates located within a rectangular box specified by the corners at longitude -75.0 and latitude 40.0, and longitude -74.0 and latitude 41.0."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalTrips: { $sum: 1 } } }, { $match: { totalTrips: { $gt: 1 } } }]); ","Unwind the passenger records from the events in the 'transit_events' collection, group them by the 'ticket_id' of each passenger to calculate the total number of trips per ticket, and filter the results to retain only those tickets with more than one trip. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalTrips: { $sum: 1 } } }, { $match: { totalTrips: { $gt: 1 } } }]); "," Deconstruct the passenger array within the events in the 'transit_events' collection, aggregate the data by each passenger's 'ticket_id' to count the total trips for each ticket, and only include those tickets that have a trip count greater than one."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""identifier.route_id"": ""R789"" } }, { $project: { vehicle_id: ""$identifier.vehicle_id"", fare_amounts: ""$response.event.passengers.fare_amount"" } }]); ","Fetch documents from the 'transit_events' collection where the route identifier is 'R789', and project both the vehicle ID and the fare amounts of passengers from the event responses. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""identifier.route_id"": ""R789"" } }, { $project: { vehicle_id: ""$identifier.vehicle_id"", fare_amounts: ""$response.event.passengers.fare_amount"" } }]); "," Select records from the 'transit_events' collection that match the route ID 'R789', including only the vehicle identification and the fare amounts for passengers associated with those events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $group: { _id: ""$response.event.status"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Group the data from the 'transit_events' collection by the status of the events in the 'response.event' field, tallying the total occurrences of each status, and then sort these groups in descending order based on the count of occurrences. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $group: { _id: ""$response.event.status"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); "," Aggregate records from the 'transit_events' collection by categorizing them according to the status found in the 'response.event' field, counting how many times each status appears, and then order the results with the highest counts appearing first."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }).count(); ","Count the number of transit event documents in the 'transit_events' collection where the destination stop for passengers is set to ""Downtown."" "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Downtown"" }).count(); "," Determine the total number of entries in the 'transit_events' collection that have ""Downtown"" listed as the destination stop for passengers within their event responses."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $project: { route_id: ""$identifier.route_id"", status: ""$response.event.status"" } }, { $match: { status: ""Cancelled"" } }]); ","Select the 'route_id' from the 'identifier' field and the 'status' from the 'response.event' field in the 'transit_events' collection, only including those records where the event status is 'Cancelled'. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $project: { route_id: ""$identifier.route_id"", status: ""$response.event.status"" } }, { $match: { status: ""Cancelled"" } }]); "," From the 'transit_events' collection, project the 'route_id' associated with 'identifier' and the event 'status' from 'response.event', filtering to show only the entries with a status of 'Cancelled'."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: null, totalMaintenanceEvents: { $sum: 1 } } }]); ",Count the total number of maintenance events from the 'transit_events' collection where the event type is classified as Maintenance. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([{ $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: null, totalMaintenanceEvents: { $sum: 1 } } }]); ", Aggregate and tally the number of events categorized as Maintenance in the 'transit_events' collection by filtering for event types that match Maintenance.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Query the 'transit_events' collection to retrieve all records where the event status is either 'Delayed' or 'Cancelled', while also including the type of event and the number of passengers associated with each event. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Extract information from the 'transit_events' collection for events that have a status of 'Delayed' or 'Cancelled', ensuring to capture both the event type and the passenger count for every entry."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ",Find all entries in the 'transit_events' collection where the event status in the response is marked as 'Delayed'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ", Retrieve documents from the 'transit_events' collection that have a response event status indicating a 'Delayed' condition.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""RT123"" }); ","Find all records in the 'transit_events' collection where the route_id in the identifier is equal to ""RT123"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""RT123"" }); "," Retrieve documents from the 'transit_events' collection that have a route_id of ""RT123"" specified in the identifier field."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalDelayed: { $sum: { $cond: [{ $eq: [""$response.event.status"", ""Delayed""] }, 1, 0] } } } } ]); ","Select transit event records from the 'transit_events' collection where the event type is 'ArrivalDeparture', and group these records by route ID while calculating the total number of events that are categorized as 'Delayed'. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalDelayed: { $sum: { $cond: [{ $eq: [""$response.event.status"", ""Delayed""] }, 1, 0] } } } } ]); "," From the 'transit_events' collection, retrieve entries where the event type equals 'ArrivalDeparture' and aggregate the results by route ID to compute the total count of delayed events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 10.00 } }); ",Find all records in the 'transit_events' collection where the fare amount of passengers is greater than 10.00. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 10.00 } }); ", Retrieve documents from the 'transit_events' collection that have passenger fare amounts exceeding 10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $sort: { ""response.event.location.estimated_arrival"": 1 } } ]); ","Select all records from the 'transit_events' collection where the status of the event is 'OnTime', and sort these results by the estimated arrival time of the event's location in ascending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $sort: { ""response.event.location.estimated_arrival"": 1 } } ]); "," Retrieve entries from the 'transit_events' collection that have an event status of 'OnTime', and order the findings by the estimated arrival time at the event's location, arranged in increasing order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", avgFare: { $avg: ""$response.event.passengers.fare_amount"" } } } ]); ","Unwind the passenger details from the events in the 'transit_events' collection, grouping the results by each passenger's destination stop, while calculating the average fare amount for passengers heading to those stops. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", avgFare: { $avg: ""$response.event.passengers.fare_amount"" } } } ]); "," Break down the passenger information from the 'transit_events' collection's event responses, aggregating data by destination stop and determining the average fare charged to passengers traveling to those locations."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main Street"" }); ",Find all documents in the 'transit_events' collection where the next stop recorded in the event's location is 'Main Street'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main Street"" }); ", Retrieve entries from the 'transit_events' collection that specify 'Main Street' as the next stop in the event location details.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""identifier.vehicle_id"": ""V456"" } }, { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); ","Select all records from the 'transit_events' collection where the vehicle identifier is 'V456', and group the results by the event status in the response, counting the number of occurrences for each status type. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""identifier.vehicle_id"": ""V456"" } }, { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); "," Gather all documents from the 'transit_events' collection that have a vehicle ID of 'V456', and summarize the data by categorizing it according to the event status in the response while tallying the total for each status."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $sort: { ""response.event.location.estimated_arrival"": -1 } }, { $limit: 5 } ]); ","Select the top five documents from the 'transit_events' collection where the event type is 'Incident', and sort these documents by the estimated arrival time in descending order. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $sort: { ""response.event.location.estimated_arrival"": -1 } }, { $limit: 5 } ]); "," Retrieve five recent entries from the 'transit_events' collection that have an event categorized as 'Incident', arranged in order of their estimated arrival time from latest to earliest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Extract the ticket IDs from the 'transit_events' collection, calculating the total fare for each ticket where the boarding time falls between January 1, 2023, and December 31, 2023, by first unwinding the passengers' data contained within the event responses. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); "," Gather the total fare sum for each unique ticket ID in the 'transit_events' collection, filtering for passengers whose boarding time is during the year 2023 by unwinding the passenger events in the documents."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", count: { $sum: 1 }, avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } } ]); ","Group all records from the 'transit_events' collection by the 'route_id', counting the total number of entries for each route and calculating the average fare amount for passengers. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", count: { $sum: 1 }, avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } } ]); "," Aggregate data from the 'transit_events' collection to categorize the events by 'route_id', summarizing the total count of events for each route and determining the average fare charged to passengers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lte: new Date() } }).sort({ ""response.event.passengers.boarding_time"": -1 }).limit(10); ","Select the ten most recent transit event records from the 'transit_events' collection where the boarding time of passengers is less than or equal to the current date and time, sorting the results in descending order based on the boarding time. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lte: new Date() } }).sort({ ""response.event.passengers.boarding_time"": -1 }).limit(10); "," Retrieve up to ten transit event documents from the 'transit_events' collection where passenger boarding times are on or before the present moment, ordering the output by boarding time in reverse chronological order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""Cancelled"" } }, { $group: { _id: ""$identifier.route_id"", cancelledEvents: { $sum: 1 } } }, { $sort: { cancelledEvents: -1 } } ]); ","Select all documents from the 'transit_events' collection where the event status is 'Cancelled', group the results by the route_id while counting the number of cancelled events for each route, and sort the grouped results in descending order based on the count of cancelled events. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""Cancelled"" } }, { $group: { _id: ""$identifier.route_id"", cancelledEvents: { $sum: 1 } } }, { $sort: { cancelledEvents: -1 } } ]); "," From the 'transit_events' collection, retrieve records where the event is marked as 'Cancelled', aggregate the data by route_id to calculate the total number of cancelled events per route, and order these aggregated results from highest to lowest based on the cancelled event count."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""RT123"", ""response.event.status"": ""OnTime"" }); ",Retrieve a single document from the 'transit_events' collection where the route identifier is 'RT123' and the event status is 'OnTime'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""RT123"", ""response.event.status"": ""OnTime"" }); ", Find one entry in the 'transit_events' collection that matches the route ID 'RT123' and has an event status of 'OnTime'.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", fare_count: { $size: ""$response.event.passengers"" } } }, { $sort: { fare_count: -1 } } ]); ","Project the route ID and the count of passengers from the 'transit_events' collection, sorting the results in descending order by the number of passengers associated with each fare. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", fare_count: { $size: ""$response.event.passengers"" } } }, { $sort: { fare_count: -1 } } ]); "," From the 'transit_events' collection, retrieve the route identifier alongside the total number of passengers for each event, ordering the output by the passenger count in decreasing order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.type"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); ","Group the events from the 'transit_events' collection by their type in the response, counting the total number of occurrences for each event type, and sort the results in descending order based on the count of events. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.type"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); "," Aggregate the data from the 'transit_events' collection by categorizing the events according to their type found in the response, summing up the event counts, and order the output by event count from highest to lowest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"", ""response.event.status"": ""Delayed"" } }, { $group: { _id: ""$identifier.route_id"", delayedCount: { $sum: 1 } } } ]); ","Select the count of delayed maintenance events from the 'transit_events' collection, grouping the results by the bus or train route identifier, while filtering for events where the type is 'Maintenance' and the status is 'Delayed'. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"", ""response.event.status"": ""Delayed"" } }, { $group: { _id: ""$identifier.route_id"", delayedCount: { $sum: 1 } } } ]); "," Count the number of maintenance incidents marked as delayed within the 'transit_events' collection, aggregating the data by route identifier while only including events classified as 'Maintenance' and having a status of 'Delayed'."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, boardingTimes: { $push: ""$response.event.passengers.boarding_time"" } } } ]); ","Unwind the passenger details from each event in the 'transit_events' collection and group the results by ticket ID, calculating the total fare amount and collecting all boarding times associated with each ticket. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, boardingTimes: { $push: ""$response.event.passengers.boarding_time"" } } } ]); "," For each passenger in the events documented in the 'transit_events' collection, deconstruct the passenger information and group it by ticket ID to compute the cumulative fare total while also aggregating the boarding times linked to each ticket."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.coordinates"": { $exists: true } } }, { $group: { _id: ""$identifier.route_id"", locations: { $push: ""$response.event.location.coordinates"" } } } ]); ","Select all documents from the 'transit_events' collection where the coordinates field of the event location exists, and group the results by the 'route_id', collecting all location coordinates into an array. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.coordinates"": { $exists: true } } }, { $group: { _id: ""$identifier.route_id"", locations: { $push: ""$response.event.location.coordinates"" } } } ]); "," Filter the 'transit_events' collection to include only those entries that have location coordinates available, and then organize the results by 'route_id', aggregating the corresponding coordinates into a list."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'transit_events' collection that include the status, type, and estimated arrival time of events for specific bus or train routes or vehicles, along with details about passenger tickets and boarding times. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find entries in the 'transit_events' collection where the event's status and type are reported, along with estimated arrival times for designated vehicle or route identifiers, and include information on passenger boarding times and ticket identifiers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Unwind the passenger details from the 'transit_events' collection, then group the records by the ticket ID of each passenger and calculate the total fare amount for each ticket. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); "," Extract passenger fare information from the 'transit_events' collection by flattening the passenger array, grouping the resulting data by each unique ticket ID, and summing the fare amounts associated with those tickets."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""R123"" }); ","Fetch all documents from the 'transit_events' collection where the route_id in the identifier is equal to ""R123"". "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""R123"" }); "," Retrieve entries from the 'transit_events' collection that have a route_id of ""R123"" specified in the identifier field."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""Delayed"" } }, { $group: { _id: ""$identifier.route_id"", countDelayed: { $sum: 1 } } } ]); ","Select all transit event documents from the 'transit_events' collection where the event status is recorded as 'Delayed', and group the results by the route_id to count the number of delayed events for each route. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""Delayed"" } }, { $group: { _id: ""$identifier.route_id"", countDelayed: { $sum: 1 } } } ]); "," From the 'transit_events' collection, filter for entries with an event status of 'Delayed', and aggregate the data by route_id to determine the total count of delayed events associated with each specific route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-06-01"") } }); ","Select all documents from the 'transit_events' collection where the boarding time of passengers falls between January 1, 2023, and June 1, 2023, inclusive of the starting date but exclusive of the ending date. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-06-01"") } }); "," Retrieve entries in the 'transit_events' collection that have passenger boarding times from on or after January 1, 2023, up to, but not including, June 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.vehicle_id"", avgFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } } ]); ","Select documents from the 'transit_events' collection where the event type is categorized as 'ArrivalDeparture', and group the results by vehicle ID while calculating the average fare amount of all passengers associated with each vehicle. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.vehicle_id"", avgFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } } ]); "," From the 'transit_events' collection, filter entries to include only those with an event type of 'ArrivalDeparture', then aggregate the data by vehicle ID and compute the average fare paid by passengers for each vehicle."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $gt: 50 } } }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalPassengers: { $sum: 1 } } } ]); ","Unwind the passenger data from the 'transit_events' collection, then filter for passengers whose fare amount exceeds 50, and finally group the results by the destination stop while counting the total number of passengers for each stop. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $gt: 50 } } }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalPassengers: { $sum: 1 } } } ]); "," Flatten the passengers from the 'transit_events' collection, applying a condition to select only those passengers with a fare amount greater than 50, and aggregate the data by destination stop, summing the total passengers for each destination."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $lookup: { from: ""transit_events"", localField: ""identifier.route_id"", foreignField: ""identifier.route_id"", as: ""route_info"" } }, { $project: { route_id: ""$identifier.route_id"", ""route_info"": 1 } } ]); ","Select all documents from the 'transit_events' collection where the event status is 'OnTime', and join this data with route information by matching the route_id field from the event identifier. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $lookup: { from: ""transit_events"", localField: ""identifier.route_id"", foreignField: ""identifier.route_id"", as: ""route_info"" } }, { $project: { route_id: ""$identifier.route_id"", ""route_info"": 1 } } ]); "," Retrieve records from the 'transit_events' collection that have an 'OnTime' event status, and combine them with corresponding route details by linking the route_id from the identifier of each event."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.type"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Group the transit events by the type of event indicated in the 'response.event.type' field, counting the total occurrences of each type, and then sort the grouped results in descending order based on the count. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.type"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); "," Aggregate the data from the transit events collection by categorizing them according to the event type found in 'response.event.type', summing the number of events for each type, and then ordering these results from highest to lowest count."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.fare_amount"": { $gte: 20 } } }, { $lookup: { from: ""transit_events"", localField: ""identifier.vehicle_id"", foreignField: ""identifier.vehicle_id"", as: ""vehicle_info"" } }, { $project: { vehicle_id: ""$identifier.vehicle_id"", total_fare: ""$response.event.passengers.fare_amount"", vehicle_info: 1 } } ]); ","Select documents from the 'transit_events' collection where the fare amount of passengers is greater than or equal to 20, and join this information with the same collection using the vehicle_id field to obtain additional vehicle details, while projecting the vehicle_id, total fare, and vehicle information. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.fare_amount"": { $gte: 20 } } }, { $lookup: { from: ""transit_events"", localField: ""identifier.vehicle_id"", foreignField: ""identifier.vehicle_id"", as: ""vehicle_info"" } }, { $project: { vehicle_id: ""$identifier.vehicle_id"", total_fare: ""$response.event.passengers.fare_amount"", vehicle_info: 1 } } ]); "," Filter for entries in the 'transit_events' collection where passenger fare amounts are at least 20, and perform a lookup within the same collection based on vehicle_id to gather related vehicle information, returning the vehicle_id, the total fare of the passengers, and the gathered vehicle details."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } }, totalEvents: { $sum: 1 } } } ]); ","Group the transit events in the 'transit_events' collection by the bus or train route identifier, calculating the average fare of passengers and the total number of events for each route. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } }, totalEvents: { $sum: 1 } } } ]); "," Aggregate the data from the 'transit_events' collection by route_id, determining the average fare derived from the sum of passenger fare amounts and counting the total events associated with each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": { $exists: true } }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Fetch all documents from the 'transit_events' collection where the 'next_stop' field in the 'response.event.location' object exists, and arrange the results in ascending order based on the 'estimated_arrival' field in the same object. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": { $exists: true } }).sort({ ""response.event.location.estimated_arrival"": 1 }); "," Retrieve entries from the 'transit_events' collection that contain a 'next_stop' in the 'response.event.location' section, sorting these records by the 'estimated_arrival' time in increasing order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } }, { $limit: 10 } ]); ","Unwind the array of passengers from the 'transit_events' collection, grouping the results by each passenger's ticket ID to calculate the total fare collected, sorting the results in descending order of total fare, and limiting the output to the top ten entries. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } }, { $limit: 10 } ]); "," From the 'transit_events' collection, flatten the passenger data, group by ticket ID to sum up the fare amounts, order the aggregated results from highest to lowest fare, and display only the first ten records."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Cancelled"", ""identifier.route_id"": { $in: [""R001"", ""R002""] } }); ",Select all documents from the 'transit_events' collection where the event status is 'Cancelled' and the route_id is either 'R001' or 'R002'. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Cancelled"", ""identifier.route_id"": { $in: [""R001"", ""R002""] } }); "," Retrieve entries in the 'transit_events' collection with a 'Cancelled' event status, specifically for route_ids 'R001' or 'R002'."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", fare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $group: { _id: ""$route_id"", totalFare: { $sum: ""$fare"" } } } ]); ","Project the route IDs from the 'transit_events' collection and calculate the total fare by summing the fare amounts of all passengers for each route, then group the results by route ID to obtain the overall fare total per route. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", fare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $group: { _id: ""$route_id"", totalFare: { $sum: ""$fare"" } } } ]); "," From the 'transit_events' collection, extract the route ID information and compute the total fare by aggregating the fare amounts of passengers, subsequently grouping the data by route ID to determine the complete fare for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, passengerCount: { $sum: 1 } } } ]); ","Unwind the 'passengers' array from the 'transit_events' collection to calculate the total fare collected and the number of passengers for each unique destination stop, grouping the results by the destination stop. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, passengerCount: { $sum: 1 } } } ]); "," Flatten the array of 'passengers' within the 'transit_events' collection and aggregate the data to determine the total fare and passenger count for every distinct destination stop, organizing the outputs according to the destination stop."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.route_id"", totalBoarded: { $sum: 1 }, averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } } ]); ","Select records from the 'transit_events' collection where the boarding time of passengers in the events occurred on or after January 1, 2023, and before December 31, 2023, and then group the results by the route ID, calculating the total number of boarded passengers and the average fare amount collected. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.route_id"", totalBoarded: { $sum: 1 }, averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } } ]); "," Query the 'transit_events' collection for events that had passengers boarding between January 1, 2023, and December 31, 2023, aggregating the results by route ID to determine the total passengers boarded and the average fare paid."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $elemMatch: { $gt: 0 } } }); ",Select all documents from the 'transit_events' collection where the coordinates in the event's location contain at least one value greater than zero. 
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $elemMatch: { $gt: 0 } } }); ", Retrieve entries from the 'transit_events' collection that have location coordinates within the event data that include any coordinate value exceeding zero.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.destination_stop"": { $exists: true } } }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } } ]); ","Select all records from the 'transit_events' collection where the passengers' destination stop is present, then group the results by each unique destination stop while summing the total fare for each group, and finally sort these groups in descending order based on the total fare. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.destination_stop"": { $exists: true } } }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } }, { $sort: { totalFare: -1 } } ]); "," Query the 'transit_events' collection to find documents with passengers that have a specified destination stop, aggregating the data by destination stop to calculate the total fare for each, and sort the aggregated results from highest to lowest total fare."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'transit_events' collection that contain the identifier for a specific route_id and vehicle_id, and include details about the event status, type, passengers, location coordinates, next stop, and estimated arrival time. "
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find records in the 'transit_events' collection for a particular route and vehicle, displaying the event's status, type, passenger details, location coordinates, next stop, and the estimated time of arrival."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.employee_records.find({}); ,Retrieve all documents from the 'employee_records' collection without any filters or conditions applied. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.employee_records.find({}); ," Select every record available in the 'employee_records' collection, ensuring that no restrictions or criteria are enforced on the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.first_name': 'John' }); ",Find all documents in the 'employee_records' collection where the first name under personal information is 'John'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.first_name': 'John' }); ", Retrieve entries from the 'employee_records' collection that have 'John' as the first name in the personal_info field.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.salary': { $gt: 60000 } }); ","Select all records from the 'employee_records' collection where the salary listed in the employment details exceeds 60,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.salary': { $gt: 60000 } }); "," Retrieve employee documents from the 'employee_records' collection that have a salary greater than 60,000 in their employment details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance.rating': 5 }); ",Select all documents from the 'employee_records' collection where the rating in the performance reviews is equal to 5. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance.rating': 5 }); ", Find employee records within the 'employee_records' collection that have a performance rating of 5 in their evaluations.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'identifier.employee_id': 'EMP123456' }); ",Fetch the details of the employee from the 'employee_records' collection where the employee identifier matches 'EMP123456'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'identifier.employee_id': 'EMP123456' }); ", Retrieve the information for the employee in the 'employee_records' collection whose employee ID is 'EMP123456'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'benefits.health_insurance': true }); ",Select all documents from the 'employee_records' collection where employees have health insurance benefits set to true. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'benefits.health_insurance': true }); ", Retrieve employees from the 'employee_records' collection that have their health insurance benefit indicated as true.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'skills': { $in: ['Java', 'Python'] } }); ",Select all documents from the 'employee_records' collection where the 'skills' field includes either 'Java' or 'Python'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'skills': { $in: ['Java', 'Python'] } }); ", Retrieve entries from the 'employee_records' collection for employees who possess either 'Java' or 'Python' in their list of skills.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.hire_date': { $lt: new Date('2020-01-01') } }); ","Select all documents from the 'employee_records' collection where the hire date in the employment details is earlier than January 1, 2020. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.hire_date': { $lt: new Date('2020-01-01') } }); "," Retrieve employee records from the 'employee_records' collection for individuals whose employment details indicate a hire date before January 1, 2020."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects.project_name': 'Project Alpha' }); ",Obtain all documents from the 'employee_records' collection where the project name is 'Project Alpha'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects.project_name': 'Project Alpha' }); ", Retrieve records from the 'employee_records' collection that contain a project identified as 'Project Alpha'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.last_name': 'Doe' }).sort({ 'employment_details.salary': -1 }); ","Find all records from the 'employee_records' collection for employees with the last name 'Doe', sorted by their salary in descending order. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.last_name': 'Doe' }).sort({ 'employment_details.salary': -1 }); "," Retrieve all documents within the 'employee_records' collection where the last name is 'Doe', and arrange the results in order of decreasing salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance.rating': { $gte: 3 } }).limit(10); ",Fetch the first 10 records from the 'employee_records' collection where the performance rating is 3 or higher. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance.rating': { $gte: 3 } }).limit(10); ", Select up to 10 employee entries from the 'employee_records' collection that have a performance rating of at least 3.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'benefits.vacation_days': { $gte: 15 } }); ",Select all records from the 'employee_records' collection where the number of vacation days is 15 or more. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'benefits.vacation_days': { $gte: 15 } }); ", Retrieve employee documents in the 'employee_records' collection that have at least 15 vacation days available.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'identifier.department_id': 'DP123' }); ",Select all records from the 'employee_records' collection where the department identifier is 'DP123'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'identifier.department_id': 'DP123' }); ", Retrieve entries from the 'employee_records' collection that have a department ID of 'DP123'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects.start_date': { $gte: new Date('2021-01-01') } }); ","Select all employee records from the 'employee_records' collection where the starting date of their projects is on or after January 1, 2021. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects.start_date': { $gte: new Date('2021-01-01') } }); "," Retrieve documents from the 'employee_records' collection for employees whose project start dates are equal to or later than January 1, 2021."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.job_title': 'Software Engineer', 'employment_details.salary': { $lt: 80000 } }); ","Find all employee records in the 'employee_records' collection where the job title is 'Software Engineer' and the salary is less than $80,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.job_title': 'Software Engineer', 'employment_details.salary': { $lt: 80000 } }); "," Retrieve records from the 'employee_records' collection for employees who hold the position of 'Software Engineer' and have a salary that is below $80,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.email': { $regex: /gmail\.com$/ } }); ",Select all documents from the 'employee_records' collection where the email address in the personal information field ends with 'gmail.com'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'personal_info.email': { $regex: /gmail\.com$/ } }); ", Retrieve entries from the 'employee_records' collection for employees whose personal email addresses conclude with 'gmail.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance': { $elemMatch: { rating: 4 } } }); ",Fetch all documents from the 'employee_records' collection where at least one performance review has a rating of 4. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'performance': { $elemMatch: { rating: 4 } } }); ", Retrieve entries from the 'employee_records' collection that contain a performance review with a rating of 4 or higher.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'skills': { $size: 3 } }); ",Retrieve all employee records from the 'employee_records' collection where the number of skills listed for each employee equals three. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'skills': { $size: 3 } }); ", Find documents in the 'employee_records' collection that have exactly three skills associated with each employee.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.manager_id': { $exists: true } }); ",Retrieve all documents from the 'employee_records' collection where there is a field indicating the manager's ID in the employment details. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'employment_details.manager_id': { $exists: true } }); ", Find all records in the 'employee_records' collection that contain an existing manager ID within the employment details section.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects': { $elemMatch: { role: 'Lead', end_date: { $exists: false } } } }); ",Retrieve all employee records from the 'employee_records' collection where there is at least one project in which the employee has the role of 'Lead' and the project does not have an end date specified. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ 'projects': { $elemMatch: { role: 'Lead', end_date: { $exists: false } } } }); ", Find records of employees in the 'employee_records' collection who have taken on the role of 'Lead' in any project that currently lacks an end date.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all employee records from the 'employee_records' collection where the 'hire_date' is after January 1, 2020, and include only the 'employee_id', 'first_name', and 'last_name' fields in the output. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find all entries in the 'employee_records' collection for employees hired after January 1, 2020, selecting only the 'employee_id', 'first_name', and 'last_name' attributes for each record."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.employee_records.find({}); ,Retrieve all documents from the 'employee_records' collection without applying any filters or restrictions. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.employee_records.find({}); ," Access the complete set of records from the 'employee_records' collection, showing every document available."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); ","Retrieve all documents from the 'employee_records' collection where the salary in the employment details is greater than 60,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); "," Find records in the 'employee_records' collection for employees whose employment salary exceeds 60,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Smith"" }); ",Retrieve all records from the 'employee_records' collection where the last name in personal information is 'Smith'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Smith"" }); ", Find all documents in the 'employee_records' collection that contain 'Smith' as the last name within the personal_info field.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": 5 }); ",Retrieve all documents from the 'employee_records' collection where the rating in the performance reviews is 5. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": 5 }); ", Find employee records in the 'employee_records' collection that have received a performance rating of 5 in their evaluations.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""D001"" }); ",Retrieve all documents from the 'employee_records' collection where the department identifier is 'D001'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""D001"" }); ", Find records in the 'employee_records' collection that have a department ID of 'D001'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ",Retrieve all entries from the 'employee_records' collection where the health insurance benefit is enabled. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ", Find documents in the 'employee_records' collection that have health insurance enabled as a benefit.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""JavaScript"" }); ",Find all documents in the 'employee_records' collection where the 'skills' field includes 'JavaScript'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""JavaScript"" }); ", Retrieve records from the 'employee_records' collection that have 'JavaScript' listed as one of the skills.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { ""rating"": 4 } } }); ",Retrieve all documents from the 'employee_records' collection where there is at least one performance review with a rating of 4. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { ""rating"": 4 } } }); ", Find entries in the 'employee_records' collection that contain a performance evaluation with a rating of 4 or higher.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $lte: new Date(""2020-01-01"") } }); ","Find all documents within the 'employee_records' collection where the hire date in the employment details is on or before January 1, 2020. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $lte: new Date(""2020-01-01"") } }); "," Retrieve entries from the 'employee_records' collection for employees whose employment details indicate a hire date that is earlier than or equal to January 1, 2020."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ",Retrieve all documents from the 'employee_records' collection where the project name is 'Project Alpha'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ", Find entries in the 'employee_records' collection for which the project name matches 'Project Alpha'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gte: 15 } }); ",Select all entries from the 'employee_records' collection where the number of vacation days listed in the benefits section is greater than or equal to 15. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gte: 15 } }); ", Retrieve records from the 'employee_records' collection for employees who have at least 15 vacation days as specified in their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"", ""employment_details.salary"": { $lt: 80000 } }); ","Select all records from the 'employee_records' collection where the job title in the employment details is 'Software Engineer' and the salary is less than 80,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"", ""employment_details.salary"": { $lt: 80000 } }); "," Find entries in the 'employee_records' collection for individuals holding the position of 'Software Engineer' with a salary that is below 80,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": /^A/, ""personal_info.last_name"": /^B/ }); ",Fetch all documents from the 'employee_records' collection where the first name begins with the letter 'A' and the last name starts with the letter 'B'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": /^A/, ""personal_info.last_name"": /^B/ }); ", Retrieve employee records from the 'employee_records' collection for individuals whose first names start with 'A' and last names begin with 'B'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ $or: [{ ""skills"": ""Python"" }, { ""skills"": ""Java"" }] }); ",Retrieve all documents from the 'employee_records' collection where the skills field includes either 'Python' or 'Java'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ $or: [{ ""skills"": ""Python"" }, { ""skills"": ""Java"" }] }); ", Find employee records in the 'employee_records' collection for individuals who possess either 'Python' or 'Java' as skills.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ $and: [{ ""employment_details.salary"": { $gt: 50000 } }, { ""employment_details.manager_id"": { $exists: true } }] }); ","Select all documents from the 'employee_records' collection where the salary in the employment details exceeds 50,000 and there is an existing manager identifier. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ $and: [{ ""employment_details.salary"": { $gt: 50000 } }, { ""employment_details.manager_id"": { $exists: true } }] }); "," Find employee records in the 'employee_records' collection for which the salary in the employment details is greater than 50,000 and a manager ID is present."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $regex: ""^EMP123"" } }); ",Fetch all documents from the 'employee_records' collection where the 'employee_id' starts with the prefix 'EMP123' using a regular expression filter. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $regex: ""^EMP123"" } }); ", Retrieve employee records from the 'employee_records' collection that have an 'employee_id' field matching the pattern beginning with 'EMP123' through the use of a regex search.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.0.rating"": 3 }); ",Select all records from the 'employee_records' collection where the rating of the first performance review is equal to 3. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.0.rating"": 3 }); ", Retrieve documents from the 'employee_records' collection that have a performance review rating of 3 for the most recent evaluation.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2023-01-01"") } }); ","Fetch all documents from the 'employee_records' collection where the 'start_date' of any project is on or after January 1, 2023. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2023-01-01"") } }); "," Retrieve entries from the 'employee_records' collection that have projects starting on or after the date of January 1, 2023."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ",Retrieve the documents from the 'employee_records' collection where the email address in the personal information ends with '@example.com'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ", Find all entries in the 'employee_records' collection that have an email in the personal_info field concluding with '@example.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2019-01-01"") }, ""employment_details.salary"": { $lt: 70000 }}); ","Select records from the 'employee_records' collection where the hire date is after January 1, 2019, and the salary is below 70,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2019-01-01"") }, ""employment_details.salary"": { $lt: 70000 }}); "," Retrieve entries from the 'employee_records' collection for employees hired after January 1, 2019, who earn less than 70,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all employee records from the 'employee_records' collection where the department_id is equal to 'HR', including the first name, last name, and job title of each employee. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Select employee details from the 'employee_records' collection for all entries where the department_id matches 'HR', projecting the employees' first names, last names, and job titles."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); ","Select all documents from the 'employee_records' collection where the salary in the employment details exceeds 60,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); "," Retrieve entries from the 'employee_records' collection that have an employment salary greater than 60,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ",Retrieve all documents in the 'employee_records' collection where the first name in the personal information is 'John'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ", Find records from the 'employee_records' collection for employees whose first name is 'John' in the personal_info section.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""DPT001"" }).sort({ ""employment_details.hire_date"": -1 }); ","Select all employee records from the 'employee_records' collection where the department identifier is 'DPT001', and sort the results by the hire date in descending order. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""DPT001"" }).sort({ ""employment_details.hire_date"": -1 }); "," Retrieve records from the 'employee_records' collection for employees belonging to the department with ID 'DPT001', arranging the entries by the date of hire from most recent to oldest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ",Select all employee records from the 'employee_records' collection where the performance rating is greater than or equal to 4. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ", Retrieve entries from the 'employee_records' collection for employees who have received a performance rating of 4 or higher.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", avgSalary: { $avg: ""$employment_details.salary"" } } }, { $match: { avgSalary: { $gt: 70000 } } } ]); ","Group the employee records by job title in the 'employee_records' collection and calculate the average salary for each title, then only include groups where the average salary exceeds 70,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", avgSalary: { $avg: ""$employment_details.salary"" } } }, { $match: { avgSalary: { $gt: 70000 } } } ]); "," Aggregate data from the 'employee_records' collection by job title, determining the average salary for those titles, and filter the results to show only those with an average salary greater than 70,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ",Select all records from the 'employee_records' collection where the project name associated with any of the employee's projects is 'Project Alpha'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ", Retrieve entries from the 'employee_records' collection that contain a project titled 'Project Alpha' within their projects list.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.health_insurance"": true } }, { $group: { _id: null, totalEmployees: { $sum: 1 } } } ]); ",Count the total number of employees in the 'employee_records' collection who have health insurance benefits by filtering for those with the 'benefits.health_insurance' field set to true and grouping the results. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.health_insurance"": true } }, { $group: { _id: null, totalEmployees: { $sum: 1 } } } ]); "," Aggregate the data from the 'employee_records' collection to determine the total count of employees who are provided with health insurance, applying a filter for 'benefits.health_insurance' being true and summing the instances together."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""Python"", ""MongoDB""] } }).sort({ ""personal_info.last_name"": 1 }); ","Retrieve all documents in the 'employee_records' collection that include either 'Python' or 'MongoDB' in the 'skills' field, and sort the results alphabetically by the 'last_name' field in the 'personal_info' object. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""Python"", ""MongoDB""] } }).sort({ ""personal_info.last_name"": 1 }); "," Find employee records from the 'employee_records' collection where the 'skills' array contains 'Python' or 'MongoDB', and order these records by the 'last_name' field found in the 'personal_info' section in ascending order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); ","Unwind the performance records of employees in the 'employee_records' collection, group the data by the unique employee identifier, and calculate the average performance rating for each employee, only including those with an average rating of 4 or higher. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); "," Expand the performance data for each employee in the 'employee_records' collection, aggregate the results by employee ID to compute the average performance rating, and filter the results to show only those employees whose average rating is at least 4."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000001"" }); ",Find all employee records in the 'employee_records' collection where the manager's identifier in the employment details is 'EMP000001'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000001"" }); ", Retrieve entries from the 'employee_records' collection for employees whose manager ID is 'EMP000001' as specified in the employment details.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 50000 } } }, { $sort: { ""personal_info.last_name"": 1 } }, { $limit: 5 } ]); ","Select the first five employee records from the 'employee_records' collection where the salary in the employment details is greater than or equal to 50,000, and sort the results by the last name in ascending order. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 50000 } } }, { $sort: { ""personal_info.last_name"": 1 } }, { $limit: 5 } ]); "," Retrieve a maximum of five employees from the 'employee_records' collection whose employment details indicate a salary of at least 50,000, ordering the entries by last name in ascending sequence."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalSalary: { $sum: ""$employment_details.salary"" } } }, { $sort: { totalSalary: -1 } } ]); ","Group the employee records by department identifier from the 'employee_records' collection and calculate the total salary for each department, then sort these results in descending order of total salary. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalSalary: { $sum: ""$employment_details.salary"" } } }, { $sort: { totalSalary: -1 } } ]); "," Aggregate the data from the 'employee_records' collection by department_id, summing the salaries from employment details and ordering the results by total salary in a descending manner."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2022-01-01"") } }); ","Retrieve all documents from the 'employee_records' collection where the start date of any project is on or after January 1, 2022. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2022-01-01"") } }); "," Find entries in the 'employee_records' collection that have a project with a start date equal to or later than January 1, 2022."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gt: 10 } } }, { $project: { employee_id: ""$identifier.employee_id"", first_name: ""$personal_info.first_name"" } } ]); ","Select employee records from the 'employee_records' collection where the number of vacation days exceeds 10, and retrieve the employee ID alongside the first name of each individual. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gt: 10 } } }, { $project: { employee_id: ""$identifier.employee_id"", first_name: ""$personal_info.first_name"" } } ]); "," Gather information from the 'employee_records' collection for employees with more than 10 vacation days, displaying their unique employee identifier and first name."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ",Find all documents in the 'employee_records' collection where the email address in the personal information ends with '@example.com'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ", Retrieve employee records from the 'employee_records' collection for those whose personal_info.email field concludes with the domain '@example.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.role"": ""Lead"" } }, { $group: { _id: ""$projects.project_name"", totalEmployees: { $sum: 1 } } } ]); ","Unwind the projects within the employee records collection, filter for those projects where the role is designated as ""Lead,"" and then group the results by project name, counting the total number of employees assigned to each project. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.role"": ""Lead"" } }, { $group: { _id: ""$projects.project_name"", totalEmployees: { $sum: 1 } } } ]); "," In the employee records collection, deconstruct the projects array and find entries where the role is ""Lead,"" followed by aggregating the data to tally the total number of employees for each unique project name."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ",Select all documents from the 'employee_records' collection that have at least one performance review with a rating of 5. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ", Find records in the 'employee_records' collection where there exists a performance evaluation that scores a perfect 5 in the rating.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", avgHireDate: { $avg: { $toLong: ""$employment_details.hire_date"" } } } }, { $project: { department: ""$_id"", avgHireDate: { $toDate: ""$avgHireDate"" } } } ]); ","Group the employee records by their department identifier in the 'employee_records' collection, calculating the average hire date for each department, and project the department identifier along with the average hire date converted back to a date format. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", avgHireDate: { $avg: { $toLong: ""$employment_details.hire_date"" } } } }, { $project: { department: ""$_id"", avgHireDate: { $toDate: ""$avgHireDate"" } } } ]); "," Aggregate the employee data in the 'employee_records' collection by department ID, determining the average of hire dates per department, and present the department ID along with the average hire date as a date type."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $lt: new Date(""2020-01-01"") } }); ","Select all entries from the 'employee_records' collection where the hire date in the employment details is before January 1, 2020. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $lt: new Date(""2020-01-01"") } }); "," Retrieve documents from the 'employee_records' collection for employees whose employment details indicate a hire date earlier than January 1, 2020."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 3 } } }, { $project: { employee_id: ""$identifier.employee_id"", ratings: ""$performance.rating"" } } ]); ","Select documents from the 'employee_records' collection where the performance rating is greater than or equal to 3, and return the employee ID along with their performance ratings. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 3 } } }, { $project: { employee_id: ""$identifier.employee_id"", ratings: ""$performance.rating"" } } ]); "," Retrieve employee records from the 'employee_records' collection that have a performance rating of at least 3, projecting each employee's identifier and their corresponding ratings in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'employee_records' collection where the 'date_of_birth' is earlier than January 1, 1990, and include the 'first_name', 'last_name', and 'email' fields in the results. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find employees in the 'employee_records' collection born before January 1, 1990, and return their 'first_name', 'last_name', and 'email' information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gte: 70000 } }); ","Select all entries from the 'employee_records' collection where the salary in the employment details is greater than or equal to $70,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gte: 70000 } }); "," Retrieve documents from the 'employee_records' collection for employees whose employment details indicate a salary of at least $70,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ",Retrieve all documents from the 'employee_records' collection where the first name in the personal information is 'John'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ", Find all entries in the 'employee_records' collection that have 'John' as the first name within the personal information field.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }).sort({ ""employment_details.hire_date"": -1 }); ","Select all employee records from the 'employee_records' collection where the health insurance benefit is enabled, and sort these records by the hire date in descending order. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }).sort({ ""employment_details.hire_date"": -1 }); "," Retrieve records of employees from the 'employee_records' collection who have health insurance coverage, arranged in order from the most recently hired to the earliest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 4 } } }, { $group: { _id: ""$identifier.department_id"", averageSalary: { $avg: ""$employment_details.salary"" } } } ]); ","Select employee records from the 'employee_records' collection where the performance rating is 4 or higher, and group the results by department ID to calculate the average salary for each department. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 4 } } }, { $group: { _id: ""$identifier.department_id"", averageSalary: { $avg: ""$employment_details.salary"" } } } ]); "," From the 'employee_records' collection, retrieve documents of employees with a performance rating of at least 4, and aggregate these to find the average salary, grouped by the department ID."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": 5 } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_details"" } } ]); ","Retrieve employee records from the 'employee_records' collection where the performance rating is 5, and join these records with the manager's information by matching the manager_id from the employment details with the employee_id in the same collection. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": 5 } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_details"" } } ]); "," Find all records in the 'employee_records' collection where employees have received a performance rating of 5, while also obtaining details about their managers by linking the manager_id in the employment section to the employee_id in the collection."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_name"", totalEmployees: { $sum: 1 } } } ]); ",Extract the project names from the 'employee_records' collection and calculate the total number of employees associated with each project by breaking down the project data and grouping the results accordingly. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_name"", totalEmployees: { $sum: 1 } } } ]); ", Gather the names of all projects within the 'employee_records' collection and determine how many employees are linked to each project by unwinding the project array and aggregating the counts per project.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""JavaScript"", ""MongoDB""] } }).limit(10); ","Find up to 10 employee records from the 'employee_records' collection where the skills array contains either ""JavaScript"" or ""MongoDB."" "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""JavaScript"", ""MongoDB""] } }).limit(10); "," Retrieve a maximum of 10 documents from the 'employee_records' collection that have ""JavaScript"" or ""MongoDB"" listed in their skills."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.job_title"": ""Software Engineer"" } }, { $sort: { ""employment_details.salary"": 1 } } ]); ","Select documents from the 'employee_records' collection where the job title in the employment details is 'Software Engineer', and arrange the results in ascending order based on the salary field. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.job_title"": ""Software Engineer"" } }, { $sort: { ""employment_details.salary"": 1 } } ]); "," Find all records in the 'employee_records' collection for individuals whose job title is 'Software Engineer', and sort these records by salary in ascending order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalVacationDays: { $sum: ""$benefits.vacation_days"" } } }, { $sort: { totalVacationDays: -1 } } ]); ","Group the employee records by the department identifier and calculate the total number of vacation days for each department, then sort the results in descending order based on total vacation days. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalVacationDays: { $sum: ""$benefits.vacation_days"" } } }, { $sort: { totalVacationDays: -1 } } ]); "," Aggregate the employee_records by department_id, summing the vacation days in the benefits field, and order the departments from highest to lowest total vacation days."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: { $gt: 3 }, comments: { $regex: ""excellent"" } } } }); ","Select documents from the 'employee_records' collection that contain performance reviews where the rating is greater than 3 and the comments include the word ""excellent."" "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: { $gt: 3 }, comments: { $regex: ""excellent"" } } } }); "," Retrieve entries from the 'employee_records' collection where there are performance records with a rating exceeding 3 and comments that match the pattern ""excellent."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $lt: new Date(""2020-01-01"") } } }, { $project: { firstName: ""$personal_info.first_name"", lastName: ""$personal_info.last_name"", yearsAtCompany: { $subtract: [new Date(), ""$employment_details.hire_date""] } } } ]); ","Select all employee records from the 'employee_records' collection where the hire date is before January 1, 2020, and project the first and last names along with the number of years they have been at the company, calculated by subtracting the hire date from the current date. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $lt: new Date(""2020-01-01"") } } }, { $project: { firstName: ""$personal_info.first_name"", lastName: ""$personal_info.last_name"", yearsAtCompany: { $subtract: [new Date(), ""$employment_details.hire_date""] } } } ]); "," Retrieve documents from the 'employee_records' collection for employees hired prior to January 1, 2020, and output their first and last names along with their tenure at the company, determined by the difference between the current date and their hire date."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { department_id: ""$identifier.department_id"", salary: ""$employment_details.salary"" } }, { $group: { _id: ""$department_id"", maxSalary: { $max: ""$salary"" } } } ]); ","Project the department_id and salary from the 'employee_records' collection, then group the results by department_id, calculating the maximum salary for each department. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { department_id: ""$identifier.department_id"", salary: ""$employment_details.salary"" } }, { $group: { _id: ""$department_id"", maxSalary: { $max: ""$salary"" } } } ]); "," From the 'employee_records' collection, select the department_id and salary, followed by grouping the entries according to department_id to determine the highest salary in each department."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $regex: ""^EMP[0-9]{6}$"" } }).count(); ",Count the number of documents in the 'employee_records' collection where the employee identifier matches the regular expression for the format '^EMP[0-9]{6}$'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $regex: ""^EMP[0-9]{6}$"" } }).count(); ", Determine how many records exist in the 'employee_records' collection that have an employee_id conforming to the pattern '^EMP[0-9]{6}$'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $size: 5 } } }, { $project: { employeeId: ""$identifier.employee_id"", firstName: ""$personal_info.first_name"" } } ]); ","Select documents from the 'employee_records' collection where the number of skills listed is exactly five, and project the employee ID and first name fields for those records. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $size: 5 } } }, { $project: { employeeId: ""$identifier.employee_id"", firstName: ""$personal_info.first_name"" } } ]); ", Retrieve entries from the 'employee_records' collection that contain five skills and return only the employee_id and first_name attributes from those documents.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: { employeeId: ""$identifier.employee_id"", reviewDate: ""$performance.review_date"" }, averageRating: { $avg: ""$performance.rating"" } } } ]); ","Extract performance reviews from the 'employee_records' collection, breaking down each review into individual records and grouping them by employee ID and review date while calculating the average rating for each review date. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: { employeeId: ""$identifier.employee_id"", reviewDate: ""$performance.review_date"" }, averageRating: { $avg: ""$performance.rating"" } } } ]); "," Gather performance evaluation data from the 'employee_records' collection, unrolling the performance records to treat each entry separately, and then aggregating the data based on employee IDs and review dates to compute the average rating for each date."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": { $ne: null } }); ",Select all documents from the 'employee_records' collection where the manager_id in the employment details is not null. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": { $ne: null } }); ", Fetch documents from the 'employee_records' collection that have a non-null value for the manager_id field within the employment_details section.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { "" employment_details.salary"": { $gt: 50000 } } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""managerInfo"" } } ]); ","Select all employee records from the 'employee_records' collection where the salary in employment details exceeds 50,000, and join with the same collection to fetch manager information by linking the manager_id from employment details with the employee_id in the identifier. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { "" employment_details.salary"": { $gt: 50000 } } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""managerInfo"" } } ]); "," Find employee documents in the 'employee_records' collection that have an employment salary greater than 50,000, and retrieve additional details about their managers by joining on the manager_id and employee_id fields within the same collection."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $gte: new Date(""1980-01-01"") } }).sort({ ""personal_info.date_of_birth"": 1 }); ","Find all employee records from the 'employee_records' collection where the date of birth is on or after January 1, 1980, and sort the results in ascending order by the date of birth. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $gte: new Date(""1980-01-01"") } }).sort({ ""personal_info.date_of_birth"": 1 }); "," Retrieve employee documents from the 'employee_records' collection that have a date of birth from January 1, 1980, onwards, and arrange the output by date of birth in ascending order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Select all documents from the 'employee_records' collection where the 'hire_date' is after January 1, 2020, and include the 'first_name', 'last_name', and 'job_title' fields in the output. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Retrieve employees from the 'employee_records' collection who were hired after January 1, 2020, and display their 'first_name', 'last_name', and 'job_title' attributes."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", averageRating: { $avg: ""$performance.rating"" } } }, { $match: { averageRating: { $gte: 4 } } } ]); ","Calculate the average performance rating for each employee from the 'employee_records' collection by unwinding the performance records, grouping the results by the employee ID, and filtering to include only those employees with an average rating of 4 or higher. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", averageRating: { $avg: ""$performance.rating"" } } }, { $match: { averageRating: { $gte: 4 } } } ]); "," Retrieve the average rating of performance reviews for each employee in the 'employee_records' collection, ensuring to unwind the performance data, group the results by employee ID, and select only those employees whose average rating meets or exceeds 4."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", totalEmployees: { $sum: 1 }, averageSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","Group employee records by job title in the 'employee_records' collection, calculating the total number of employees and the average salary for each job title, and then sort the results in descending order based on the average salary. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", totalEmployees: { $sum: 1 }, averageSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { averageSalary: -1 } } ]); "," In the 'employee_records' collection, aggregate data by job title to determine both the total headcount and the average salary associated with each position, subsequently arranging the output from highest to lowest average salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ","Select the first name and last name of employees from the 'employee_records' collection whose date of birth is before January 1, 1980. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); "," Retrieve the first and last names of individuals in the 'employee_records' collection where their date of birth occurs earlier than January 1, 1980."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.manager_id"": { $exists: true } } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } }, { $project: { employee_id: ""$identifier.employee_id"", manager_name: { $arrayElemAt: [""$manager_info.personal_info.first_name"", 0] } } } ]); ","Retrieve employee records from the 'employee_records' collection where the manager ID exists in the employment details, and join with the same collection to get the first name of the manager corresponding to each employee's manager ID. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.manager_id"": { $exists: true } } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } }, { $project: { employee_id: ""$identifier.employee_id"", manager_name: { $arrayElemAt: [""$manager_info.personal_info.first_name"", 0] } } } ]); ", Find records in the 'employee_records' collection for employees that have a manager ID specified in their employment details and include the manager's first name by looking up the manager's information from the same collection.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", hire_year: { $year: ""$employment_details.hire_date"" }, salary: ""$employment_details.salary"" } }, { $match: { hire_year: { $gte: 2015 }, salary: { $gt: 50000 } } } ]); ","Project the employee ID, hire year, and salary from the 'employee_records' collection, filtering to include only those employees hired in 2015 or later with a salary exceeding 50,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", hire_year: { $year: ""$employment_details.hire_date"" }, salary: ""$employment_details.salary"" } }, { $match: { hire_year: { $gte: 2015 }, salary: { $gt: 50000 } } } ]); "," Select the employee ID, the year of hire, and the salary from the 'employee_records' collection, ensuring the results consist of employees hired from 2015 onward who earn more than 50,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_id"", project_count: { $sum: 1 }, involved_employees: { $addToSet: ""$identifier.employee_id"" } } } ]); ","Unwind the 'projects' array in the 'employee_records' collection, and then group the results by 'project_id' to count the number of occurrences and aggregate the unique 'employee_id's involved in each project. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_id"", project_count: { $sum: 1 }, involved_employees: { $addToSet: ""$identifier.employee_id"" } } } ]); "," Disaggregate the 'projects' array within the 'employee_records' collection, subsequently grouping the entries by 'project_id' to calculate the total count of projects and compile a list of distinct 'employee_id's for each project."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gt: 15 } }).sort({ ""personal_info.last_name"": 1 }); ","Retrieve all documents from the 'employee_records' collection where the number of vacation days in the benefits field is greater than 15, and sort the results by the last name in the personal_info section in ascending order. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gt: 15 } }).sort({ ""personal_info.last_name"": 1 }); "," Find employee records in the 'employee_records' collection that have more than 15 vacation days within their benefits, and arrange the results in alphabetical order by last name from the personal_info."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $in: [""Java"", ""MongoDB""] } } }, { $group: { _id: ""$employment_details.job_title"", employee_count: { $sum: 1 } } } ]); ","Select employee job titles from the 'employee_records' collection, filtering for those who possess either 'Java' or 'MongoDB' skills, and group the results to count the number of employees in each job title. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $in: [""Java"", ""MongoDB""] } } }, { $group: { _id: ""$employment_details.job_title"", employee_count: { $sum: 1 } } } ]); "," From the 'employee_records' collection, retrieve job titles of employees who have 'Java' or 'MongoDB' listed among their skills, then aggregate the data to determine how many employees hold each specific job title."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""managers"" } }, { $unwind: ""$managers"" }, { $group: { _id: ""$managers.personal_info.last_name"", total_salary: { $sum: ""$employment_details.salary"" }, employees: { $push: ""$identifier.employee_id"" } } } ]); ","Join the 'employee_records' collection with itself to find managers by matching the 'employment_details.manager_id' field to the 'identifier.employee_id' field, and then unwind the resulting array. Group the documents by the last names of the managers, summing the salaries of all employees under each manager and collecting the employee IDs into an array. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""managers"" } }, { $unwind: ""$managers"" }, { $group: { _id: ""$managers.personal_info.last_name"", total_salary: { $sum: ""$employment_details.salary"" }, employees: { $push: ""$identifier.employee_id"" } } } ]); "," Perform an aggregation on the 'employee_records' collection where you look up managers by correlating 'employment_details.manager_id' with 'identifier.employee_id', then unwind the managers and group the data by the managers' last names while calculating the total salary for their employees and aggregating the employee IDs in a list."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", highest_rating: { $max: ""$performance.rating"" }, latest_review: { $max: ""$performance.review_date"" } } }, { $match: { highest_rating: { $gte: 5 } } } ]); ","Unwind the performance reviews from the 'employee_records' collection, group the results by the employee identifier, and calculate the highest rating and the latest review date for each employee, filtering the groups to include only those with a highest rating of five or more. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", highest_rating: { $max: ""$performance.rating"" }, latest_review: { $max: ""$performance.review_date"" } } }, { $match: { highest_rating: { $gte: 5 } } } ]); "," Extract individual performance ratings from the 'employee_records' collection, aggregate the data to find the maximum rating and most recent review date for each employee, and restrict the results to those employees who have achieved a top rating of at least five."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", total_salary: { $sum: ""$employment_details.salary"" } } }, { $sort: { total_salary: -1 } } ]); ","Aggregate the employees' records from the 'employee_records' collection by grouping the total salaries for each department, identified by the department ID, and sort the results in descending order of total salary. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", total_salary: { $sum: ""$employment_details.salary"" } } }, { $sort: { total_salary: -1 } } ]); "," Summarize the salary data from the 'employee_records' collection by grouping it based on department ID and calculating the total salary for each department, then order these totals from highest to lowest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gt: 70000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""employment_details.salary"": 1 } } ]); ","Select employee records from the 'employee_records' collection where the salary in the employment details is greater than 70,000, and return the first name, last name, and salary of each employee. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gt: 70000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""employment_details.salary"": 1 } } ]); "," Retrieve records from the 'employee_records' collection for employees whose employment details indicate a salary exceeding 70,000, including only their first name, last name, and salary in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager"" } }, { $unwind: ""$manager"" }, { $project: { employee_id: ""$identifier.employee_id"", manager_first_name: ""$manager.personal_info.first_name"", salary: ""$employment_details.salary"" } } ]); ","Join the 'employee_records' collection with itself to correlate the manager's details by matching the manager_id in the employment details with the employee_id of the identifiers, and project the employee_id, the first name of the manager, and the salary of the employee. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager"" } }, { $unwind: ""$manager"" }, { $project: { employee_id: ""$identifier.employee_id"", manager_first_name: ""$manager.personal_info.first_name"", salary: ""$employment_details.salary"" } } ]); "," From the 'employee_records' collection, match records to obtain manager information based on the employment_details manager_id field aligning with the employee_id in a self-lookup, while selecting the employee_id, manager's first name, and the employee's salary in the output."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.role"", employee_count: { $sum: 1 } } }, { $sort: { employee_count: -1 } } ]); ","Unwind the projects array from the employee_records collection, then group the data by the role associated with each project to count the number of employees for each role, and finally sort the results in descending order based on the employee count. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.role"", employee_count: { $sum: 1 } } }, { $sort: { employee_count: -1 } } ]); "," Flatten the projects array within the employee_records collection, aggregate the data by each project's role to calculate the total number of employees in each role, and sort the aggregated results by employee count in descending order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", years_at_company: { $subtract: [ { $year: new Date() }, { $year: ""$employment_details.hire_date"" } ] } } }, { $match: { years_at_company: { $gt: 5 } } } ]); ","Select the employee IDs from the 'employee_records' collection and calculate the number of years each employee has been with the company by subtracting the hire year from the current year, only including those who have been employed for more than five years. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", years_at_company: { $subtract: [ { $year: new Date() }, { $year: ""$employment_details.hire_date"" } ] } } }, { $match: { years_at_company: { $gt: 5 } } } ]); "," From the 'employee_records' collection, retrieve the employee identifier and determine how many years each employee has spent at the organization by taking the current year and subtracting the year of their hiring, filtering to show only those with over five years of service."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ",Retrieve all documents from the 'employee_records' collection where the email address in the personal information ends with '@example.com'. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ", Find employee records in the 'employee_records' collection that have an email address in the personal info field which concludes with '@example.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: null, max_salary: { $max: ""$employment_details.salary"" }, min_salary: { $min: ""$employment_details.salary"" } } } ]); ",Calculate the maximum and minimum salaries from the 'employee_records' collection by grouping all records together without any specific filtering conditions. 
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: null, max_salary: { $max: ""$employment_details.salary"" }, min_salary: { $min: ""$employment_details.salary"" } } } ]); "," Determine the highest and lowest salary values within the 'employee_records' collection, aggregating all entries without applying any filters or group criteria."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $facet: { high_salary: [{ $match: { ""employment_details.salary"": { $gt: 100000 } } }], low_salary: [{ $match: { ""employment_details.salary"": { $lt: 40000 } } }] } } ]); ","Aggregate data from the 'employee_records' collection to create two separate lists: one for employees with salaries greater than 100,000, and another for those with salaries less than 40,000. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $facet: { high_salary: [{ $match: { ""employment_details.salary"": { $gt: 100000 } } }], low_salary: [{ $match: { ""employment_details.salary"": { $lt: 40000 } } }] } } ]); "," From the 'employee_records' collection, perform an aggregation that produces two distinct categories: a group of employees earning above 100,000 and another group earning below 40,000 in salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'employee_records' collection where the 'salary' field is greater than 50000 and the 'hire_date' is before January 1, 2020. "
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Select records from the 'employee_records' collection for employees whose salaries exceed 50000 and who were hired prior to January 1, 2020."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({}); ,Retrieve all documents from the 'management_team' collection. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({}); , Find every record in the 'management_team' collection.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.first_name"": ""John"" }); ",Retrieve all documents from the 'management_team' collection where the first name in personal information is 'John'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.first_name"": ""John"" }); ", Find entries in the 'management_team' collection for individuals whose first name is listed as 'John' in their personal information.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.last_name"": ""Doe"" }); ",Find all documents in the 'management_team' collection where the last name in the personal information is 'Doe'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.last_name"": ""Doe"" }); ", Retrieve entries from the 'management_team' collection that have 'Doe' as the last name in the personal_info field.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": 3 }); ",Find all records in the 'management_team' collection for those whose position level is 3. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": 3 }); ", Retrieve documents from the 'management_team' collection where the level of the position details is equal to 3.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 75000 } }); ","Select all documents from the 'management_team' collection where the base salary in the compensation field is greater than 75,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 75000 } }); "," Retrieve entries from the 'management_team' collection that have a base salary exceeding 75,000 within their compensation details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lte: 5 } }); ",Select all entries from the 'management_team' collection where the number of direct reports in the team size is less than or equal to 5. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lte: 5 } }); ", Identify records in the 'management_team' collection for managers who oversee 5 or fewer direct reports in their team.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $gte: 100000 } }); ","Select all documents from the 'management_team' collection where the annual budget responsibility is greater than or equal to 100,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $gte: 100000 } }); "," Retrieve all entries from the 'management_team' collection that have an annual budget of at least 100,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022 }); ",Fetch all entries from the 'management_team' collection where the year for the performance metrics is 2022. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022 }); ", Retrieve all documents in the 'management_team' collection that have performance metrics recorded for the year 2022.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ",Find all documents in the 'management_team' collection where the name of the certification is 'PMP'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ", Retrieve entries from the 'management_team' collection that include any certifications with the name 'PMP'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 75 } }); ",Find all documents in the 'management_team' collection where the success rate of strategic initiatives is greater than or equal to 75. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 75 } }); ", Retrieve entries from the 'management_team' collection that have a strategic initiative success rate of at least 75.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $lt: 50 } }); ",Retrieve all records from the 'management_team' collection where the KPI achievement in the performance metrics is less than 50. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $lt: 50 } }); ", Find entries in the 'management_team' collection where the KPI achievement value in the performance metrics is below 50.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.title"": ""Director"" }).sort({ ""compensation.base_salary"": -1 }); ","Find all entries in the 'management_team' collection where the job title within the position details is 'Director', and arrange the results in descending order based on the base salary in the compensation details. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.title"": ""Director"" }).sort({ ""compensation.base_salary"": -1 }); "," Retrieve documents from the 'management_team' collection that have the title 'Director' under position details, sorted by base salary in descending order from the compensation field."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $lt: new Date() } }); ",Find all documents in the 'management_team' collection where the 'expiry_date' of certifications is earlier than the current date. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $lt: new Date() } }); ", Retrieve records from the 'management_team' collection that have certifications with an 'expiry_date' that is before today.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ",Retrieve all documents from the 'management_team' collection where the email address in the personal_info field ends with '@example.com'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ", Find entries in the 'management_team' collection that have an email in the personal_info section that concludes with '@example.com'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $gte: 10 } }).limit(5); ",Select the first five documents from the 'management_team' collection where the total number of team members is greater than or equal to 10. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $gte: 10 } }).limit(5); ", Retrieve up to five records from the 'management_team' collection that have a total of 10 or more team members.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $lt: 20000 } }); ","Find all entries in the 'management_team' collection where the expenditure for the first quarter is less than 20,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $lt: 20000 } }); "," Retrieve documents from the 'management_team' collection that show a Q1 spending amount below 20,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gte: 5 } }); ",Retrieve all documents from the 'management_team' collection where the number of projects completed in the performance metrics is five or more. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gte: 5 } }); ", Find records in the 'management_team' collection that show a completion of at least five projects in the performance metrics.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ","Retrieve all documents from the 'management_team' collection where the 'reports_to' field in 'position_details' is equal to ""MGR00001"". "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); "," Find records in the 'management_team' collection for which the value of 'reports_to' under 'position_details' matches ""MGR00001""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.start_date"": { $gt: new Date(""2022-01-01"") } }); ","Retrieve all documents from the 'management_team' collection where the start date of the strategic initiatives is after January 1, 2022. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.start_date"": { $gt: new Date(""2022-01-01"") } }); "," Find entries in the 'management_team' collection that have strategic initiatives starting later than January 1st, 2022."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.date_acquired"": { $gt: new Date(""2020-01-01"") } }); ","Fetch all documents from the 'management_team' collection where the 'date_acquired' field in the 'certifications' array is greater than January 1, 2020. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.date_acquired"": { $gt: new Date(""2020-01-01"") } }); "," Retrieve entries from the 'management_team' collection that have a 'date_acquired' for any certification after January 1, 2020."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all entries from the 'management_team' collection that include the manager's personal information, position details, and compensation, specifically focusing on those managers who have a team size of at least 5 direct reports and a budget responsibility greater than 100,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find records in the 'management_team' collection that contain details about the managers, such as their personal information, job title, compensation, and ensure the results are filtered to show only those managers overseeing a team of 5 or more direct reports and managing a budget exceeding 100,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({ 'personal_info.first_name': 'John' }); ,Retrieve all documents from the 'management_team' collection where the first name in the personal information is 'John'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({ 'personal_info.first_name': 'John' }); , Find entries in the 'management_team' collection that have 'John' as the first name in the personal_info field.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.title': 'Senior Manager' }); ",Select all documents from the 'management_team' collection where the title in the position details is 'Senior Manager'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.title': 'Senior Manager' }); ", Retrieve entries from the 'management_team' collection that have 'Senior Manager' as the title in their position details.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'compensation.base_salary': { $gt: 75000 } }); ","Retrieve all documents from the 'management_team' collection where the base salary in the compensation field exceeds 75,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'compensation.base_salary': { $gt: 75000 } }); "," Find entries in the 'management_team' collection that have a base salary greater than 75,000 in the compensation section."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'performance_metrics.year': 2022 }); ",Retrieve all documents from the 'management_team' collection where the performance metrics indicate a year of 2022. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'performance_metrics.year': 2022 }); ", Find entries in the 'management_team' collection that have performance metrics for the year 2022.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.direct_reports': { $gte: 5 } }); ",Select all documents from the 'management_team' collection where the number of direct reports within the team size is five or more. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.direct_reports': { $gte: 5 } }); ", Retrieve entries in the 'management_team' collection with a team size that includes at least five direct reports.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'certifications.name': 'PMP' }); ",Find all documents in the 'management_team' collection where the name of the certification is 'PMP'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'certifications.name': 'PMP' }); ", Retrieve entries from the 'management_team' collection that include a certification named 'PMP'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'budget_responsibility.annual_budget': { $lt: 150000 } }); ","Retrieve all documents from the 'management_team' collection where the annual budget under the 'budget_responsibility' field is less than 150,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'budget_responsibility.annual_budget': { $lt: 150000 } }); "," Find records in the 'management_team' collection that have an annual budget within the 'budget_responsibility' category that is below 150,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'strategic_initiatives.success_rate': { $gt: 80 } }); ",Fetch all records from the 'management_team' collection where the success rate of strategic initiatives exceeds 80. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'strategic_initiatives.success_rate': { $gt: 80 } }); ", Retrieve entries from the 'management_team' collection that have a success rate greater than 80 for their strategic initiatives.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'personal_info.email': /@example\.com$/ }); ",Select all documents from the 'management_team' collection where the email address in the personal information ends with '@example.com'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'personal_info.email': /@example\.com$/ }); ", Retrieve records from the 'management_team' collection for individuals whose personal email addresses conclude with '@example.com'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'performance_metrics.team_satisfaction_score': { $eq: 5 } }); ",Fetch all records from the 'management_team' collection where the team satisfaction score in the performance metrics equals 5. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'performance_metrics.team_satisfaction_score': { $eq: 5 } }); ", Select documents from the 'management_team' collection where the value of the team satisfaction score within performance metrics is equal to 5.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'identifier.manager_id': 'MGR12345' }); ",Fetch all documents from the 'management_team' collection for the manager with the unique identifier 'MGR12345'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'identifier.manager_id': 'MGR12345' }); ", Retrieve records from the 'management_team' collection where the manager's ID is 'MGR12345'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.level': { $in: [3, 4] } }); ",Find all documents in the 'management_team' collection where the level of the position in the position details is either 3 or 4. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.level': { $in: [3, 4] } }); ", Retrieve entries from the 'management_team' collection that have a position level of 3 or 4 within the position details.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'personal_info.date_of_birth': { $lt: new Date('1990-01-01') } }); ","Find all documents in the 'management_team' collection where the 'date_of_birth' in 'personal_info' is earlier than January 1, 1990. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'personal_info.date_of_birth': { $lt: new Date('1990-01-01') } }); "," Retrieve entries from the 'management_team' collection for individuals whose 'personal_info.date_of_birth' is before January 1, 1990."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.total_team_members': { $gt: 20 } }); ",Fetch documents from the 'management_team' collection where the total number of team members exceeds 20. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.total_team_members': { $gt: 20 } }); ", Select entries in the 'management_team' collection for which the total team size is greater than 20 members.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.direct_reports': { $gt: 0 }, 'compensation.bonus_percentage': { $gt: 10 } }); ",Select all entries from the 'management_team' collection where the number of direct reports is greater than zero and the bonus percentage for compensation exceeds 10. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'team_size.direct_reports': { $gt: 0 }, 'compensation.bonus_percentage': { $gt: 10 } }); ", Retrieve documents from the 'management_team' collection that have more than zero direct reports and a compensation bonus percentage that is greater than 10.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'budget_responsibility.q1_spend': { $gt: 50000 } }); ","Select all documents from the 'management_team' collection where the spending for the first quarter of the year exceeds 50,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'budget_responsibility.q1_spend': { $gt: 50000 } }); "," Retrieve records from the 'management_team' collection that have a first quarter spending greater than 50,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'certifications.expiry_date': { $gte: new Date() } }); ",Retrieve all documents from the 'management_team' collection where the expiry date of certifications is on or after the current date. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'certifications.expiry_date': { $gte: new Date() } }); ", Find entries in the 'management_team' collection for which the expiration dates of certifications are greater than or equal to today.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'strategic_initiatives.start_date': { $gte: new Date('2023-01-01') } }); ","Retrieve all records from the 'management_team' collection where the start date of any strategic initiative is on or after January 1, 2023. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'strategic_initiatives.start_date': { $gte: new Date('2023-01-01') } }); "," Find entries in the 'management_team' collection that have strategic initiatives starting from January 1, 2023, or later."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'compensation.stock_options': { $gt: 1000 } }); ","Select all documents from the 'management_team' collection where the number of stock options in the compensation field exceeds 1,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'compensation.stock_options': { $gt: 1000 } }); "," Retrieve entries from the 'management_team' collection that have more than 1,000 stock options listed under the compensation section."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.reports_to': 'MGR54321' }); ",Fetch all records from the 'management_team' collection where the 'reports_to' field in the 'position_details' object is equal to 'MGR54321'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ 'position_details.reports_to': 'MGR54321' }); ", Retrieve entries from the 'management_team' collection for which the 'position_details' section specifies that the individual reports to the manager with the identifier 'MGR54321'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'management_team' collection where the 'level' field is greater than or equal to 3, selecting only the 'identifier' and 'personal_info' fields. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find entries in the 'management_team' collection with a 'level' of at least 3, projecting the 'identifier' and 'personal_info' fields from each document."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ",Retrieve all documents from the 'management_team' collection where the first name in the personal information is 'John'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ", Find records in the 'management_team' collection that have 'John' listed as the first name within the personal_info field.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ",Retrieve all documents from the 'management_team' collection where the level in the position details is greater than or equal to 3. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ", Find records in the 'management_team' collection that have a position level of 3 or higher.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ",Fetch all documents from the 'management_team' collection where the number of direct reports in the team size is fewer than five. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ", Select entries from the 'management_team' collection that have less than five direct reports within the team size attribute.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 70000 } }); ","Retrieve all documents from the 'management_team' collection where the base salary in the compensation details exceeds 70,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 70000 } }); "," Find employee records in the 'management_team' collection for which the base salary in the compensation section is greater than 70,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.year"": 2022 } }, { $group: { _id: ""$identifier.manager_id"", avgKPI: { $avg: { $arrayElemAt: [""$performance_metrics.kpi_achievement"", 0] } } } } ]); ","Select documents from the 'management_team' collection where the performance metrics indicate a year of 2022, and group the results by the manager identifier, calculating the average KPI achievement from the first element of the performance metrics array. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.year"": 2022 } }, { $group: { _id: ""$identifier.manager_id"", avgKPI: { $avg: { $arrayElemAt: [""$performance_metrics.kpi_achievement"", 0] } } } } ]); "," From the 'management_team' collection, find entries where the year in the performance metrics is 2022, and group by the manager's identifier to compute the average KPI achievement based on the initial value from the performance metrics array."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", totalEmployees: { $sum: 1 } } }, { $sort: { totalEmployees: -1 } } ]); ","Group the employee records in the 'management_team' collection by their job title and count the total number of employees for each title, then sort the results in descending order based on the employee count. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", totalEmployees: { $sum: 1 } } }, { $sort: { totalEmployees: -1 } } ]); "," Aggregate the data from the 'management_team' collection to tally the number of employees grouped by their position titles, and present the grouped results ordered from highest to lowest total employee count."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gte: 100000 } } }, { $project: { manager: ""$personal_info.first_name"", budget: ""$budget_responsibility.annual_budget"" } } ]); ","Select records from the 'management_team' collection where the annual budget is greater than or equal to 100,000, and project the manager's first name along with the annual budget amount. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gte: 100000 } } }, { $project: { manager: ""$personal_info.first_name"", budget: ""$budget_responsibility.annual_budget"" } } ]); "," Retrieve entries from the 'management_team' collection that have an annual budget of at least 100,000, displaying the first name of the manager and the corresponding annual budget in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$strategic_initiatives.initiative_id"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); ","Extract the initiative IDs and total allocated budgets from the 'management_team' collection for those strategic initiatives that have a success rate of 75% or higher, combining multiple initiatives into one set for each unique ID. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$strategic_initiatives.initiative_id"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); "," Gather the total budgets and corresponding initiative IDs from the 'management_team' collection where strategic initiatives achieve at least a 75% success rate, grouping the results by each initiative's ID."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $match: { ""certifications.expiry_date"": { $gt: new Date() } } }, { $group: { _id: ""$certifications.name"", count: { $sum: 1 } } } ]); ","Aggregate the certifications from the 'management_team' collection by unwinding the certifications array, filtering for those certifications that have an expiry date greater than the current date, and then grouping the results by the name of the certifications while counting the number of occurrences for each. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $match: { ""certifications.expiry_date"": { $gt: new Date() } } }, { $group: { _id: ""$certifications.name"", count: { $sum: 1 } } } ]); "," In the 'management_team' collection, extract the certifications by flattening the certifications array, only including those with an expiry date that is in the future, and then group the data according to the certification names along with a count of how many times each appears."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ",Find all records in the 'management_team' collection where the reports_to field in the position_details indicates a manager with the ID 'MGR00001'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ", Retrieve entries from the 'management_team' collection that show managers whose position_details report to the manager identified by 'MGR00001'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.year"": { $eq: 2023 } } }, { $project: { name: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, kpi: { $arrayElemAt: [""$performance_metrics.kpi_achievement"", 0] } } } ]); ","Select all documents from the 'management_team' collection where the year in the performance metrics is 2023, and project the name as a concatenation of the first and last name, along with the KPI achievement from the first position in the performance metrics array. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.year"": { $eq: 2023 } } }, { $project: { name: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, kpi: { $arrayElemAt: [""$performance_metrics.kpi_achievement"", 0] } } } ]); "," Retrieve entries from the 'management_team' collection for which the performance metrics indicate the year 2023, and output the full name by combining the first and last names, as well as the KPI achievement corresponding to the first element in the performance metrics array."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $gte: 10 } }).sort({ ""compensation.base_salary"": -1 }); ","Fetch all documents from the 'management_team' collection where the total number of team members is at least 10, and arrange the results by the base salary in descending order. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $gte: 10 } }).sort({ ""compensation.base_salary"": -1 }); "," Select records from the 'management_team' collection for which the total count of team members meets or exceeds 10, and sort these records by base salary from highest to lowest."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.level"", avgSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { avgSalary: -1 } } ]); ","Group the documents in the 'management_team' collection by the level of the position details, calculating the average base salary for each level, and sort the results in descending order based on the average salary. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.level"", avgSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { avgSalary: -1 } } ]); "," Aggregate the data from the 'management_team' collection by position level, determining the average compensation base salary for each level, and order the output from highest to lowest average salary."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", totalBudget: { $sum: ""$budget_responsibility.annual_budget"" } } } ]); ","Group the documents in the 'management_team' collection by the division code, calculating the total annual budget for each division based on the annual budget specified in the budget responsibility field. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", totalBudget: { $sum: ""$budget_responsibility.annual_budget"" } } } ]); "," Aggregate data from the 'management_team' collection to sum the annual budgets within each division, using the division code as the grouping criterion."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { manager: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, totalSpend: { $add: [""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend""] } } } ]); ",Select the first name and last name concatenated as a single field labeled as 'manager' along with the total of spending across all four quarters from the 'budget_responsibility' in the 'management_team' collection. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { manager: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, totalSpend: { $add: [""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend""] } } } ]); "," Retrieve the combined full name of each manager, using their first and last names, along with the total expenditures calculated from the quarterly spending data found in the 'budget_responsibility' field of the 'management_team' collection."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ",Obtain all records from the 'management_team' collection where the certification name is 'PMP'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ", Fetch entries from the 'management_team' collection that include certifications with the name 'PMP'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all records from the 'management_team' collection for managers whose 'manager_id' begins with 'MGR' followed by five digits, along with their personal information, position details, compensation data, performance metrics, team size, budget responsibility, certifications, and strategic initiatives. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find all documents in the 'management_team' collection where the 'manager_id' matches the pattern 'MGR' followed by five numeric characters, and return their personal details, position information, compensation, performance metrics, team composition, budget responsibilities, certifications, and strategic initiatives."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ",Retrieve all documents from the 'management_team' collection where the first name in the personal information section is 'John'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ", Find records in the 'management_team' collection that have 'John' listed as the first name in the personal info field.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ",Retrieve all documents from the 'management_team' collection where the level of the position details is greater than or equal to 3. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ", Find records in the 'management_team' collection that have a position level of at least 3.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.base_salary"": { $gt: 80000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""compensation.base_salary"": 1 } } ]); ","Select the first name, last name, and base salary from the documents in the 'management_team' collection where the base salary is greater than 80,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.base_salary"": { $gt: 80000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""compensation.base_salary"": 1 } } ]); "," From the 'management_team' collection, retrieve the first name, last name, and base salary of individuals who have a base salary exceeding 80,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022 }); ",Select all documents from the 'management_team' collection where the 'performance_metrics' array contains entries for the year 2022. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022 }); ", Retrieve the records in the 'management_team' collection that have performance metrics recorded for the year 2022.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", averageSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","Group the documents from the 'management_team' collection by the job title in the 'position_details' field, calculating the average base salary for each title, and then sort the results in descending order of average salary. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", averageSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { averageSalary: -1 } } ]); "," Aggregate the data in the 'management_team' collection by the titles found in 'position_details', determining the average base salary for each title and ordering the output by average salary from highest to lowest."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": { $regex: /PMP/i } }); ","Retrieve all documents from the 'management_team' collection where the name of the certification includes the substring 'PMP', regardless of case sensitivity. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": { $regex: /PMP/i } }); ", Find records in the 'management_team' collection that contain a certification with a name matching 'PMP' in a case-insensitive manner.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $lt: 5 } }); ",Retrieve all documents from the 'management_team' collection where the total number of team members is fewer than 5. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $lt: 5 } }); ", Find entries in the 'management_team' collection that have a total team size of less than 5 members.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$strategic_initiatives.name"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); ","Extract the names of strategic initiatives from the 'management_team' collection where the success rate is 75% or higher, and calculate the total budget allocated for each initiative. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$strategic_initiatives.name"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); "," Retrieve all strategic initiative names from the 'management_team' collection with a success rate of at least 75%, while summing the allocated budget for each initiative."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $exists: true } }); ",Retrieve all documents from the 'management_team' collection that have a defined annual budget in the 'budget_responsibility' field. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $exists: true } }); ", Find records in the 'management_team' collection where the annual budget exists within the budget responsibility details.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.bonus_percentage"": { $gte: 10 } } }, { $group: { _id: ""$position_details.level"", totalCount: { $sum: 1 } } } ]); ","Select the documents from the 'management_team' collection where the bonus percentage in the compensation information is 10% or higher, and group the results by the level of the position, counting the total number of documents in each level. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.bonus_percentage"": { $gte: 10 } } }, { $group: { _id: ""$position_details.level"", totalCount: { $sum: 1 } } } ]); "," Retrieve records from the 'management_team' database where the bonus percentage listed in compensation is at least 10%, and aggregate these records by the level specified in position details, calculating the total count for each level."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.direct_reports"": { $gt: 10 } } }, { $sort: { ""personal_info.last_name"": 1 } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""team_size.direct_reports"": 1 } } ]); ","Select all entries from the 'management_team' collection where the number of direct reports is greater than 10, sort the results by the last name of the individuals in ascending order, and display their first name, last name, and the count of direct reports. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.direct_reports"": { $gt: 10 } } }, { $sort: { ""personal_info.last_name"": 1 } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""team_size.direct_reports"": 1 } } ]); "," Retrieve documents from the 'management_team' collection for managers with more than 10 direct reports, arrange the output alphabetically by last name, and include the first name, last name, and number of direct reports in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", totalManagers: { $sum: 1 } } } ]); ","Group the documents in the 'management_team' collection by the division code found in the identifier, and calculate the total number of managers for each division. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", totalManagers: { $sum: 1 } } } ]); "," Aggregate records from the 'management_team' collection based on the division code in the identifier, summing up the total count of managers associated with each division."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $gt: 90 } }); ",Find all documents in the 'management_team' collection where the key performance indicator achievement in the performance metrics is greater than 90. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $gt: 90 } }); ", Retrieve entries from the 'management_team' collection that have a KPI achievement score exceeding 90 in their performance metrics.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$personal_info.last_name"", averageSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } }, { $match: { averageSatisfaction: { $gt: 4 } } } ]); ","Unwind the performance metrics from the 'management_team' collection, group the results by the last name of each individual, and calculate the average team satisfaction score for each group, then filter to return only those with an average satisfaction score greater than 4. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$personal_info.last_name"", averageSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } }, { $match: { averageSatisfaction: { $gt: 4 } } } ]); "," Deconstruct the performance metrics in the 'management_team' collection, aggregating the data by last names and computing the average satisfaction score for each name, including only those where the average score exceeds 4."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ","Find all documents in the 'management_team' collection where the reports_to field in the position_details object is equal to ""MGR00001"". "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); "," Retrieve records from the 'management_team' collection for which the manager referenced in the position_details.reports_to property is ""MGR00001""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.q1_spend"": { $gte: 50000 } } }, { $project: { ""personal_info.email"": 1, ""budget_responsibility.q1_spend"": 1 } } ]); ","Select the documents from the 'management_team' collection where the spending for the first quarter is greater than or equal to 50,000, and retrieve the email addresses along with the first quarter spending amounts. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.q1_spend"": { $gte: 50000 } } }, { $project: { ""personal_info.email"": 1, ""budget_responsibility.q1_spend"": 1 } } ]); "," Find records in the 'management_team' collection that have a first quarter expenditure of at least 50,000 and project the associated email addresses alongside the spending details for that quarter."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""strategic_initiatives.start_date"": { $lte: new Date(""2023-01-01"") } } }, { $project: { ""strategic_initiatives.name"": 1, ""strategic_initiatives.success_rate"": 1 } } ]); ","Select the names and success rates of strategic initiatives from the 'management_team' collection where the start date of the initiatives is on or before January 1, 2023. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""strategic_initiatives.start_date"": { $lte: new Date(""2023-01-01"") } } }, { $project: { ""strategic_initiatives.name"": 1, ""strategic_initiatives.success_rate"": 1 } } ]); "," Retrieve strategic initiative names along with their success rates from the 'management_team' collection, filtering for initiatives that began on or before the date of January 1, 2023."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $lt: new Date() } }); ",Select all documents from the 'management_team' collection where the expiration date of any associated certification is earlier than today's date. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $lt: new Date() } }); ", Retrieve records from the 'management_team' collection in which the expiry date for certifications is before the current date.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'management_team' collection that have a manager identifier beginning with 'MGR' followed by five digits, and include the fields 'first_name', 'last_name', 'title', and 'base_salary' in the results. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find entries in the 'management_team' collection where the manager ID matches the pattern 'MGR' followed by five numerical digits, while selecting the 'first_name', 'last_name', 'title', and 'base_salary' fields for each document."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.email"": { $regex: /@company.com$/ } }); ",Retrieve all records from the 'management_team' collection where the email address in the personal information ends with '@company.com'. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.email"": { $regex: /@company.com$/ } }); ", Find all entries in the 'management_team' collection that have an email under personal information concluding with '@company.com'.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gte: 100000 } }).sort({ ""compensation.base_salary"": -1 }); ","Select all documents from the 'management_team' collection where the base salary in the compensation field is greater than or equal to 100,000, and order the results by base salary in descending order. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gte: 100000 } }).sort({ ""compensation.base_salary"": -1 }); "," Retrieve records from the 'management_team' collection for individuals whose base salary is at least 100,000, sorted from highest to lowest salary in the compensation section."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""position_details.level"": 5 } }, { $group: { _id: null, avgBonus: { $avg: ""$compensation.bonus_percentage"" } } } ]); ","Select all documents from the 'management_team' collection where the level in the position details is 5, and calculate the average of the bonus percentage from the compensation field for these documents. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""position_details.level"": 5 } }, { $group: { _id: null, avgBonus: { $avg: ""$compensation.bonus_percentage"" } } } ]); "," Query the 'management_team' collection for entries where the position level is 5, and determine the average value of the bonus percentage within the compensation field for those selected records."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", avgKPI: { $avg: ""$performance_metrics.kpi_achievement"" } } } ]); ","Unwind the performance metrics from the 'management_team' collection and group the results by year, calculating the average KPI achievement for each year. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", avgKPI: { $avg: ""$performance_metrics.kpi_achievement"" } } } ]); ", Flatten the performance metrics array in the 'management_team' collection and aggregate the data by year to determine the mean KPI achievement across each distinct year.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $gt: 10 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ","Find all documents in the 'management_team' collection where the number of direct reports exceeds 10, and return only the first and last names of the individuals. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $gt: 10 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); "," Retrieve records from the 'management_team' collection for managers who have more than 10 direct reports, specifically extracting only their first and last names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gt: 500000 } } }, { $sort: { ""personal_info.last_name"": 1 } } ]); ","Select all records from the 'management_team' collection where the annual budget responsibility exceeds 500,000 and sort the resulting documents by the last name of the individual in ascending order. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gt: 500000 } } }, { $sort: { ""personal_info.last_name"": 1 } } ]); "," Retrieve documents from the 'management_team' collection that have an annual budget greater than 500,000 and arrange these documents in ascending order based on the last name field."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { manager_id: ""$identifier.manager_id"", total_spend: { $sum: [ ""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend"" ] } } }, { $match: { total_spend: { $gt: 200000 } } } ]); ","Project the manager identifier and calculate the total spending for each manager from the 'management_team' collection by summing their quarterly expenditures, then filter the results to include only those managers whose total spending exceeds 200,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { manager_id: ""$identifier.manager_id"", total_spend: { $sum: [ ""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend"" ] } } }, { $match: { total_spend: { $gt: 200000 } } } ]); "," From the 'management_team' collection, retrieve the manager's ID and compute the total spend by adding up all quarterly spends, ensuring the results only show those managers with a total spend greater than 200,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$identifier.division_code"", total_count: { $sum: 1 } } } ]); ","Unwind the array of strategic initiatives in the 'management_team' collection, then filter to include only those initiatives where the success rate is 75% or greater, and finally group the results by the division code, calculating the total count of initiatives for each division. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $group: { _id: ""$identifier.division_code"", total_count: { $sum: 1 } } } ]); "," From the 'management_team' collection, break down the strategic initiatives array, apply a filter to select initiatives with a success rate of 75% or more, and group the output by division code, summing the total number of initiatives per division."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $filter: { input: ""$certifications"", as: ""cert"", cond: { $gte: [""$$cert.expiry_date"", new Date()] } } }, { $count: ""active_certifications"" } ]); ","Count the total number of active certifications from the 'management_team' collection, where the expiration date of each certification is on or after the current date. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $filter: { input: ""$certifications"", as: ""cert"", cond: { $gte: [""$$cert.expiry_date"", new Date()] } } }, { $count: ""active_certifications"" } ]); "," Calculate the number of certifications that are still valid from the 'management_team' documents, filtering for those whose expiry dates are not before today."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", averageSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","Group the documents in the 'management_team' collection by the 'title' field in the 'position_details' object, calculating the average of the 'base_salary' found within the 'compensation' structure, and sort the results in descending order based on the average salary. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", averageSalary: { $avg: ""$compensation.base_salary"" } } }, { $sort: { averageSalary: -1 } } ]); "," Aggregate the entries from the 'management_team' collection by their respective 'position_details.title', determining the average 'compensation.base_salary', and organize the output so that higher average salaries appear first."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.projects_completed"": { $gt: 5 } } }, { $project: { name: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, level: ""$position_details.level"" } } ]); ","Select documents from the 'management_team' collection where the number of completed projects reported in performance metrics is greater than five, and project the full name, comprising first and last names from personal information, along with the position level from position details. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""performance_metrics.projects_completed"": { $gt: 5 } } }, { $project: { name: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, level: ""$position_details.level"" } } ]); "," Retrieve entries from the 'management_team' collection with more than five projects completed according to performance metrics, and include the combined name formed by the first and last names in personal info as well as the level of the position from position details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.total_team_members"": { $lt: 5 } } }, { $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""supervisor"" } } ]); ","Select documents from the 'management_team' collection where the total number of team members is fewer than five, and perform a join with the 'management_team' collection to include the supervisor's information based on the reports_to field matching the manager_id. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.total_team_members"": { $lt: 5 } } }, { $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""supervisor"" } } ]); "," Retrieve entries from the 'management_team' collection that have less than five total team members, while also merging in the supervisor data from the same collection, matching the reports_to field with the manager_id."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics"": { $elemMatch: { ""year"": 2023, ""kpi_achievement"": { $gt: 90 } } } }); ",Select documents from the 'management_team' collection where the performance metrics include at least one entry from the year 2023 with a KPI achievement score greater than 90. 
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics"": { $elemMatch: { ""year"": 2023, ""kpi_achievement"": { $gt: 90 } } } }); "," Find records in the 'management_team' collection that contain performance metrics for the year 2023, specifically looking for instances where the KPI achievement exceeds 90."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { title: ""$position_details.title"", totalTeamMembers: ""$team_size.total_team_members"", baseSalary: ""$compensation.base_salary"", totalSpend: { $sum: [ ""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend"" ] } } }, { $sort: { totalSpend: -1 } } ]); ","Project the title from the position details, the total number of team members, the base salary, and the total spending from the budget responsibility for each document in the 'management_team' collection, while calculating the total spending by summing the quarterly spending for Q1, Q2, Q3, and Q4, and then sort the results in descending order by total spending. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { title: ""$position_details.title"", totalTeamMembers: ""$team_size.total_team_members"", baseSalary: ""$compensation.base_salary"", totalSpend: { $sum: [ ""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend"" ] } } }, { $sort: { totalSpend: -1 } } ]); "," From the 'management_team' collection, select the position title, total team members, base salary, and calculate the total expenditure by adding up the Q1, Q2, Q3, and Q4 spending, and finally, arrange the results by total expenditure in descending order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $addFields: { totalCompensation: { $add: [""$compensation.base_salary"", { $multiply: [""$compensation.base_salary"", { $divide: [""$compensation.bonus_percentage"", 100] }] }] } } }, { $match: { totalCompensation: { $gt: 120000 } } } ]); ","Calculate the total compensation for all entries in the 'management_team' collection by adding the base salary to the bonus amount, where the bonus is determined by multiplying the base salary with the bonus percentage divided by 100, and then filter for those whose total compensation exceeds 120,000. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $addFields: { totalCompensation: { $add: [""$compensation.base_salary"", { $multiply: [""$compensation.base_salary"", { $divide: [""$compensation.bonus_percentage"", 100] }] }] } } }, { $match: { totalCompensation: { $gt: 120000 } } } ]); "," From the 'management_team' collection, compute the total compensation by summing the base salary and the corresponding bonus derived from the base salary multiplied by the bonus percentage divided by 100, then return only those entries where the total compensation is greater than 120,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.budget_allocated"": { $gt: 50000 } } }, { $group: { _id: ""$strategic_initiatives.name"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); ","Unwind the 'strategic_initiatives' array in the 'management_team' collection, filter for initiatives with a budget allocated greater than 50,000, and then group the results by the names of these initiatives while calculating the total budget allocated for each. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.budget_allocated"": { $gt: 50000 } } }, { $group: { _id: ""$strategic_initiatives.name"", totalBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); "," Deconstruct the 'strategic_initiatives' array from the 'management_team' collection, apply a filter to select only those initiatives that have a budget allocation exceeding 50,000, and summarize the total budget per initiative name in the grouped output."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $lookup: { from: ""management_team"", localField: ""identifier.manager_id"", foreignField: ""identifier.manager_id"", as: ""directReports"" } }, { $project: { manager: ""$personal_info.first_name"", directReportsCount: { $size: ""$directReports"" } } } ]); ","Join the 'management_team' collection with itself to find all managers and their direct reports by matching the 'manager_id' fields, then project the managers' first names along with the count of their direct reports. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $lookup: { from: ""management_team"", localField: ""identifier.manager_id"", foreignField: ""identifier.manager_id"", as: ""directReports"" } }, { $project: { manager: ""$personal_info.first_name"", directReportsCount: { $size: ""$directReports"" } } } ]); "," Perform a self-join on the 'management_team' collection to associate each manager with their direct reports by using the 'manager_id' key, and return the managers' first names alongside the total number of direct reports for each manager."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all documents from the 'management_team' collection where the 'level' field is greater than 3 and the 'start_date' is on or after January 1, 2020, and project the 'first_name' and 'last_name' fields of the managers. "
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",," Find manager records in the 'management_team' collection that have a level higher than 3 and started on or after January 1, 2020, while including only their first and last names in the results."
