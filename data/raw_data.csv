database_id,schema,mongo_query,natural_language_query
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ department: 'Sales' }); ,"""Retrieve the documents of employees from the 'employees' collection who belong to the 'Sales' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ status: 'Active' }); ","""Retrieve all documents of active employees from the 'employees' collection where the 'status' is 'Active'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.findOne({ employeeId: 'E12345' }); ","""Retrieve a single document from the 'employees' collection where the employeeId is 'E12345'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ budget: { $gt: 50000 } }); ","""Retrieve the documents of departments from the 'departments' collection where the budget is greater than 50,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ name: 'HR' }); ","""Retrieve the documents from the 'departments' collection where the department name is 'HR'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ status: 'Approved' }); ","""Retrieve all documents from the 'leaveRecords' collection where the status is 'Approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ leaveType: 'Sick Leave' }); ","""Retrieve all documents from the 'leaveRecords' collection where the leave type is 'Sick Leave'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.findOne({ employeeId: ObjectId(""60b8d5b2f1c3d3f30c8f89a3"") }); ","""Retrieve a single document from the 'leaveRecords' collection where the 'employeeId' matches the ObjectId '60b8d5b2f1c3d3f30c8f89a3'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ hireDate: { $gte: new Date('2020-01-01') } }); ","""Retrieve all documents of employees from the 'employees' collection who were hired on or after January 1, 2020."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ position: 'Manager' }); ","""Retrieve all documents of employees from the 'employees' collection who hold the position of 'Manager'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ location: 'New York' }); ","""Retrieve the documents of departments from the 'departments' collection where the location is 'New York'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ startDate: { $lte: new Date('2022-12-31') } }); ","""Retrieve the documents from the 'leaveRecords' collection where the 'startDate' is on or before December 31, 2022."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ phone: { $regex: /^123/ } }); ","""Retrieve the documents of employees from the 'employees' collection whose phone number starts with '123'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ 'EmergencyContact.relationship': 'Spouse' }); ","""Retrieve the documents of employees from the 'employees' collection where the relationship of the Emergency Contact is 'Spouse'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ createdAt: { $gt: new Date('2021-01-01') } }); ","""Retrieve the documents of departments from the 'departments' collection that were created after January 1, 2021."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ salary: { $lt: 40000 } }); ","""Retrieve the documents of employees from the 'employees' collection whose salary is less than 40,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ reason: { $exists: true } }); ","""Retrieve all documents from the 'leaveRecords' collection where the 'reason' field exists."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ managerId: ObjectId(""60b8d5b2f1c3d3f30c8f89b0"") }); ","""Retrieve the documents of employees from the 'employees' collection who have a manager with the ID of '60b8d5b2f1c3d3f30c8f89b0'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ headId: ObjectId(""60b8d5b2f1c3d3f30c8f89b1"") }); ","""Retrieve the documents from the 'departments' collection where the headId is equal to the specified ObjectId '60b8d5b2f1c3d3f30c8f89b1'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ lastName: 'Doe' }); ","""Retrieve the documents of employees from the 'employees' collection where the last name is 'Doe'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ description: { $regex: /finance/i } }); ","""Retrieve the documents from the 'departments' collection where the 'description' field contains the word 'finance', ignoring case sensitivity."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all documents from the 'leaveRecords' collection where the 'status' is 'approved' and join related employee information from the 'employees' collection based on the employeeId."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ status: 'active' }); ,"""Retrieve the documents of employees from the 'employees' collection where the status is 'active'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ department: 'HR' }); ","""Retrieve the documents of employees from the 'employees' collection who belong to the 'HR' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ salary: { $gte: 50000 } }); ","""Retrieve the documents of employees from the 'employees' collection whose salary is greater than or equal to 50,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ hireDate: { $gt: new Date('2020-01-01') } }); ","""Retrieve the documents of employees from the 'employees' collection who were hired after January 1, 2020."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ location: 'New York' }); ","""Retrieve the documents of departments from the 'departments' collection where the location is 'New York'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ budget: { $lt: 1000000 } }); ","""Retrieve all documents from the 'departments' collection where the budget is less than 1,000,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ employeeId: ObjectId('60adf2184f1c2a4c8c8e0123') }); ","""Retrieve all leave records from the 'leaveRecords' collection for the employee with the ID '60adf2184f1c2a4c8c8e0123'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ status: 'approved' }); ","""Retrieve the documents from the 'leaveRecords' collection where the 'status' is 'approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ leaveType: 'sick', startDate: { $lte: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'leaveRecords' collection where the 'leaveType' is 'sick' and the 'startDate' is on or before January 1, 2023."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ position: 'Developer', department: 'IT' }); ","""Retrieve the documents of employees from the 'employees' collection who hold the position of 'Developer' and belong to the 'IT' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ firstName: 'John', lastName: 'Doe' }); ","""Retrieve the documents of employees from the 'employees' collection where the first name is 'John' and the last name is 'Doe'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ headId: ObjectId('60adf2184f1c2a4c8c8e0456') }); ","""Retrieve the documents from the 'departments' collection where the 'headId' is equal to the specified ObjectId '60adf2184f1c2a4c8c8e0456'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ createdAt: { $gt: new Date('2022-01-01') } }); ","""Retrieve all documents from the 'departments' collection where the 'createdAt' date is greater than January 1, 2022."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ email: /@example.com$/ }); ","""Retrieve the documents of employees from the 'employees' collection whose email addresses end with '@example.com'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ 'EmergencyContact.relationship': 'sibling' }); ","""Retrieve the documents of employees from the 'employees' collection who have an emergency contact with a relationship specified as 'sibling'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ employeeId: ObjectId('60adf2184f1c2a4c8c8e0456'), status: 'pending' }); ","""Retrieve the documents of leave records from the 'leaveRecords' collection for the employee with the specific ID of '60adf2184f1c2a4c8c8e0456', where the status of the leave is 'pending'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ managerId: ObjectId('60adf2184f1c2a4c8c8e0234') }); ","""Retrieve the documents of employees from the 'employees' collection who have a manager with the ID of '60adf2184f1c2a4c8c8e0234'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ phone: { $exists: true, $ne: '' } }); ","""Retrieve the documents of employees from the 'employees' collection who have a phone number that exists and is not an empty string."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ name: 'Sales', description: { $exists: true } }); ","""Retrieve the documents from the 'departments' collection where the name is 'Sales' and the description field exists."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ salary: { $lt: 40000 }, department: 'Support' }); ","""Retrieve the documents of employees from the 'employees' collection who work in the 'Support' department and have a salary less than 40,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
", ,"""Find all employees from the 'employees' collection whose status is 'active', retrieving their first name, last name, email, and phone, and sort the results by their hire date in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" } } } ]); ","""Group the documents from the 'employees' collection by department and calculate the total salary for each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, totalEmployees: { $size: ""$employees"" } } } ]); ","""Retrieve the names of all departments from the 'departments' collection and the total number of employees associated with each department, where the employee data is included from the 'employees' collection by matching the department's ID with the department field in employees."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: ""approved"" } }, { $group: { _id: ""$leaveType"", totalLeaves: { $sum: 1 } } } ]); ","""Count the total number of approved leave records grouped by leave type from the 'leaveRecords' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: ""active"" } }, { $sort: { hireDate: -1 } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have an active status, sorted by their hire date in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $lookup: { from: 'employees', localField: 'employeeId', foreignField: '_id', as: 'employeeDetails' } }, { $unwind: ""$employeeDetails"" }, { $match: { ""employeeDetails.department"": ""HR"" } } ]); ","""Retrieve the leave records from the 'leaveRecords' collection and include related employee details from the 'employees' collection by matching the 'employeeId' in leave records with the '_id' in employees. Then, filter the results to include only those employees who are in the 'HR' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$managerId"", employeeCount: { $sum: 1 } } }, { $sort: { employeeCount: -1 } } ]); ","""Group the documents from the 'employees' collection by their manager ID and count the number of employees under each manager, then sort the results in descending order based on the employee count."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { budget: { $gt: 50000 } } }, { $sort: { createdAt: -1 } } ]); ","""Retrieve the documents from the 'departments' collection where the budget is greater than 50,000, and sort these documents by the creation date in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", leaveDays: { $sum: { $subtract: [""$endDate"", ""$startDate""] } } } } ]); ","""Group the leave records from the 'leaveRecords' collection by 'employeeId' and calculate the total number of leave days taken by each employee, based on the difference between their 'endDate' and 'startDate'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { position: ""Manager"" } }, { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentInfo' } } ]); ","""Retrieve all employee documents from the 'employees' collection where the position is 'Manager', and include related information from the 'departments' collection based on the department name."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$department"", averageSalary: { $avg: ""$salary"" } } }, { $match: { averageSalary: { $gt: 60000 } } } ]); ","""Calculate the average salary of employees from the 'employees' collection grouped by their department, and only include those departments where the average salary is greater than 60,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { appliedDate: { $gte: new Date(""2023-01-01"") } } }, { $sort: { appliedDate: 1 } } ]); ","""Retrieve all leave records from the 'leaveRecords' collection where the 'appliedDate' is on or after January 1, 2023, and sort the results by 'appliedDate' in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'headInfo' } }, { $project: { name: 1, headName: { $arrayElemAt: [""$headInfo.firstName"", 0] } } } ]); ","""Retrieve the names of all departments from the 'departments' collection and include the first name of each department's head from the 'employees' collection by matching the 'headId' of the departments with the '_id' of employees."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveInfo' } }, { $unwind: { path: ""$leaveInfo"", preserveNullAndEmptyArrays: true } }, { $project: { firstName: 1, lastName: 1, leaveStatus: ""$leaveInfo.status"" } } ]); ","""Retrieve the first name and last name of employees from the 'employees' collection, along with their leave status from the 'leaveRecords' collection, by joining the collections based on the employee's ID, while ensuring that employees without leave records are also included."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { leaveType: ""Sick Leave"" } }, { $group: { _id: ""$employeeId"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Retrieve the count of leave records from the 'leaveRecords' collection where the leave type is 'Sick Leave', grouping the results by employee ID and sorting the counts in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $project: { firstName: 1, lastName: 1, totalBudget: ""$departmentDetails.budget"" } } ]); ","""Retrieve the first name and last name of employees from the 'employees' collection and include their department budget information by looking up details from the 'departments' collection where the employee's department matches the department name."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { managerId: { $ne: null } } }, { $group: { _id: ""$managerId"", employeeCount: { $sum: 1 } } } ]); ","""Count the number of employees from the 'employees' collection who have a manager assigned, grouping the results by their manager's ID."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { location: ""Remote"" } }, { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, employeeCount: { $size: ""$employees"" } } } ]); ","""Find the departments from the 'departments' collection that are located in 'Remote', and for each department, include the count of employees from the 'employees' collection that belong to each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: ""pending"" } }, { $group: { _id: ""$leaveType"", totalRequests: { $sum: 1 } } } ]); ","""Retrieve the total number of pending leave requests grouped by leave type from the 'leaveRecords' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all records from the 'leaveRecords' collection where the 'status' is 'approved', and for each of these records, include the associated employees' first names and last names from the 'employees' collection by matching the 'employeeId' field in 'leaveRecords' with the 'employeeId' field in 'employees'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { status: 'active' } }, { $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" }, employeeCount: { $sum: 1 } } } ]); ","""Retrieve the total salary and employee count for each department from the 'employees' collection, considering only those employees with an 'active' status."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees_info' } }, { $match: { budget: { $gt: 100000 } } } ]); ","""Retrieve the documents from the 'departments' collection, including related employee information from the 'employees' collection where the department's budget is greater than 100,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'approved' } }, { $group: { _id: ""$leaveType"", totalLeaves: { $sum: 1 } } } ]); ","""Retrieve the total count of approved leave records from the 'leaveRecords' collection, grouping the results by leave type."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $project: { firstName: 1, lastName: 1, 'department_info.description': 1 } } ]); ","""Retrieve the first name and last name of employees from the 'employees' collection and include the description of their respective department from the 'departments' collection, where the department name in the 'departments' collection matches the department field in the 'employees' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", leaveCount: { $sum: 1 } } }, { $match: { leaveCount: { $gt: 3 } } } ]); ","""Group the leave records from the 'leaveRecords' collection by 'employeeId' to count the total number of leave records per employee, and then filter the results to include only those employees who have more than 3 leave records."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $sort: { hireDate: -1 } }, { $limit: 5 } ]); ","""Retrieve the most recently hired employees from the 'employees' collection, sorting by their hire date in descending order, and limit the results to the top 5 employees."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { location: 'Headquarters' } }, { $sort: { createdAt: 1 } } ]); ","""Retrieve the documents from the 'departments' collection where the location is 'Headquarters', sorted by the created date in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$position"", avgSalary: { $avg: ""$salary"" } } }, { $match: { avgSalary: { $gt: 70000 } } } ]); ","""Calculate the average salary for each position from the 'employees' collection, and then filter the results to include only those positions where the average salary exceeds 70,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leave_info' } }, { $match: { 'leave_info.status': 'approved' } } ]); ","""Retrieve all employees from the 'employees' collection and include their leave information from the 'leaveRecords' collection, where the leave status is 'approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { startDate: { $gte: ISODate(""2023-01-01"") } } }, { $group: { _id: ""$leaveType"", totalDays: { $sum: { $subtract: [""$endDate"", ""$startDate""] } } } } ]); ","""Retrieve the total number of leave days grouped by leave type from the 'leaveRecords' collection, where the leave's start date is on or after January 1, 2023."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { managerId: { $exists: true } } }, { $lookup: { from: 'employees', localField: 'managerId', foreignField: '_id', as: 'manager_info' } } ]); ","""Retrieve all employee documents from the 'employees' collection where the 'managerId' field exists, and include the corresponding manager information by joining with the 'employees' collection using the 'managerId' as the local field and the '_id' as the foreign field."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $group: { _id: ""$headId"", totalDepartments: { $sum: 1 } } }, { $match: { totalDepartments: { $gt: 1 } } } ]); ","""Group the documents from the 'departments' collection by the 'headId' field, calculating the total number of departments for each head, and then filter the results to include only those heads that manage more than one department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: 'inactive' } }, { $sort: { hireDate: 1 } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have the status of 'inactive', sorted by their hire date in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$approvedBy"", totalApprovedLeaves: { $sum: 1 } } }, { $sort: { totalApprovedLeaves: -1 } } ]); ","""Aggregate the leave records from the 'leaveRecords' collection by grouping them based on the 'approvedBy' field, and calculate the total number of approved leaves for each approver. Then, sort the results in descending order of the total number of approved leaves."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { department: 'IT' } }, { $group: { _id: null, avgSalary: { $avg: ""$salary"" } } } ]); ","""Calculate the average salary of employees from the 'employees' collection who work in the 'IT' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'head_info' } }, { $project: { name: 1, 'head_info.firstName': 1, 'head_info.lastName': 1 } } ]); ","""Aggregate the documents from the 'departments' collection, joining with the 'employees' collection to include information on department heads based on the 'headId' field matching the '_id' field of employees. Project the department name along with the first and last names of the heads."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { endDate: { $lt: new Date() } } }, { $group: { _id: ""$employeeId"", expiredLeaves: { $sum: 1 } } } ]); ","""Retrieve the documents from the 'leaveRecords' collection where the 'endDate' is earlier than the current date, and group these records by 'employeeId', calculating the total number of expired leaves for each employee."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_details' } }, { $unwind: ""$department_details"" }, { $project: { firstName: 1, lastName: 1, 'department_details.budget': 1 } } ]); ","""Retrieve the first name and last name of employees from the 'employees' collection and include the budget details from the corresponding department in the 'departments' collection by matching the employee's department with the department's name, unwinding the results to create a flat structure."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { appliedDate: { $gte: new Date('2023-01-01') } } }, { $group: { _id: ""$employeeId"", pendingLeaves: { $sum: { $cond: [ { $eq: [""$status"", ""pending""] }, 1, 0 ] } } } } ]);","""Aggregate the leave records from the 'leaveRecords' collection, selecting only those records where the 'appliedDate' is on or after January 1, 2023, and group the results by 'employeeId' to count the number of pending leave requests for each employee."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { status: 'active' } }, { $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" }, employeeCount: { $sum: 1 } } }, { $sort: { totalSalary: -1 } } ]); ","""Retrieve the total salary and employee count for each department from the 'employees' collection, filtering to include only those employees with an 'active' status, and sorting the results by total salary in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $unwind: '$employees' }, { $group: { _id: '$name', totalBudget: { $sum: '$budget' }, employeeCount: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'departments' collection by joining with the 'employees' collection where the department ID matches the employee's department. Unwind the resulting employee records and group the results by department name, calculating the total budget and counting the number of employees in each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'approved' } }, { $group: { _id: ""$leaveType"", count: { $sum: 1 }, totalDays: { $sum: { $subtract: [""$endDate"", ""$startDate""] } } } } ]); ","""Aggregate the approved leave records from the 'leaveRecords' collection, grouping the results by leave type to calculate the total number of approved leaves and the total days taken for each leave type."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: { path: '$leaveRecords', preserveNullAndEmptyArrays: true } }, { $group: { _id: ""$_id"", firstName: { $first: ""$firstName"" }, lastName: { $first: ""$lastName"" }, totalLeaves: { $sum: 1 } } } ]); ","""Retrieve the employee documents from the 'employees' collection and join them with the corresponding leave records from the 'leaveRecords' collection based on the employee's ID. For each employee, unwind the leave records to get individual records, and then group the results by employee ID while selecting the first name, last name, and counting the total number of leave records for each employee."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { hireDate: { $gte: new Date('2022-01-01') } } }, { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentInfo' } }, { $unwind: '$departmentInfo' }, { $project: { employeeId: 1, firstName: 1, lastName: 1, 'departmentInfo.name': 1, 'departmentInfo.budget': 1 } } ]); ","""Retrieve the documents of employees from the 'employees' collection who were hired on or after January 1, 2022, and include related department information from the 'departments' collection, specifically selecting the employeeId, firstName, lastName, department name, and department budget."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { budget: { $gt: 100000 } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, totalEmployees: { $size: ""$employees"" } } } ]); ","""Retrieve the departments from the 'departments' collection where the budget is greater than 100,000, and include a count of the total number of employees associated with each department from the 'employees' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", totalLeaves: { $sum: 1 }, lastLeaveDate: { $max: ""$lastUpdated"" } } }, { $sort: { totalLeaves: -1 } } ]); ","""Aggregate the leave records from the 'leaveRecords' collection to group them by 'employeeId', calculating the total number of leaves taken by each employee and the date of their most recent leave record. Then sort the results by the total number of leaves in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveData' } }, { $group: { _id: ""$employeeId"", totalLeaves: { $sum: { $size: ""$leaveData"" } }, status: { $first: ""$status"" } } } ]); ","""Aggregate data from the 'employees' collection by joining with the 'leaveRecords' collection, where the employee's ID matches the employee ID in the leave records. Group the results by 'employeeId' to calculate the total number of leaves taken by each employee and retrieve the employment status of the first employee in each group."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { managerId: { $exists: true } } }, { $lookup: { from: 'employees', localField: 'managerId', foreignField: '_id', as: 'managerInfo' } }, { $unwind: '$managerInfo' }, { $project: { firstName: 1, lastName: 1, 'managerInfo.firstName': 1, 'managerInfo.lastName': 1 } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have a managerId field existing, joining with the same 'employees' collection to include the first and last names of their managers, and then project only the first name and last name of the employees along with the first and last names of their managers."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'pending' } }, { $lookup: { from: 'employees', localField: 'employeeId', foreignField: '_id', as: 'employeeInfo' } }, { $unwind: '$employeeInfo' }, { $project: { 'employeeInfo.firstName': 1, 'employeeInfo.lastName': 1, leaveType: 1, startDate: 1, endDate: 1 } } ]); ","""Retrieve all leave records from the 'leaveRecords' collection where the status is 'pending', and join this data with employee information from the 'employees' collection based on the employee's ID, then extract the first name and last name of the employee, along with the leave type, start date, and end date."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'headInfo' } }, { $unwind: '$headInfo' }, { $project: { name: 1, 'headInfo.firstName': 1, 'headInfo.lastName': 1 } } ]); ","""Retrieve the names of all departments from the 'departments' collection, and include the first and last names of the department heads by performing a lookup from the 'employees' collection where the department's headId matches the employee's _id, unwinding the results to flatten the structure."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$department"", avgSalary: { $avg: ""$salary"" }, totalEmployees: { $sum: 1 } } }, { $sort: { avgSalary: -1 } } ]); ","""Group the employee documents in the 'employees' collection by their department, calculating the average salary and the total number of employees in each department, and then sort the results by average salary in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: { month: { $month: ""$startDate"" }, year: { $year: ""$startDate"" } }, totalLeaves: { $sum: 1 } } }, { $sort: { '_id.year': 1, '_id.month': 1 } } ]); ","""Group the leave records from the 'leaveRecords' collection by the month and year of the 'startDate', counting the total number of leaves for each month and year, and then sort the results in ascending order by year and month."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaves' } }, { $unwind: { path: '$leaves', preserveNullAndEmptyArrays: true } }, { $group: { _id: ""$_id"", firstName: { $first: ""$firstName"" }, lastName: { $first: ""$lastName"" }, leavesCount: { $sum: { $cond: [{ $ifNull: [""$leaves.leaveType"", false] }, 1, 0] } } } } ]); ","""Aggregate the employee documents from the 'employees' collection by looking up related leave records from the 'leaveRecords' collection based on the employee's ID, unwind the leave records to allow one-to-one mapping, and group the results by employee ID to retrieve the first name, last name, and count of leave records for each employee, considering only those records where a leave type exists."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'approved' } }, { $lookup: { from: 'employees', localField: 'employeeId', foreignField: '_id', as: 'employeeDetails' } }, { $unwind: '$employeeDetails' }, { $group: { _id: ""$leaveType"", totalApproved: { $sum: 1 }, employeeNames: { $addToSet: { $concat: [""$employeeDetails.firstName"", "" "", ""$employeeDetails.lastName""] } } } } ]); ","""Aggregate the approved leave records from the 'leaveRecords' collection, and join them with the corresponding employee details from the 'employees' collection using the employee's ID. Then, group the records by leave type, counting the total number of approved leaves and compiling a list of unique employee names associated with each leave type."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $unwind: '$departmentDetails' }, { $project: { firstName: 1, lastName: 1, department: ""$departmentDetails.name"", budget: ""$departmentDetails.budget"" } } ]); ","""Retrieve the first name, last name, department name, and budget of all employees from the 'employees' collection, while joining relevant department details from the 'departments' collection based on the department name, and ensure that the department details are included as individual records."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$approvedBy"", totalLeaves: { $sum: 1 }, leaveTypes: { $addToSet: ""$leaveType"" } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: '_id', as: 'approvers' } }, { $unwind: '$approvers' }, { $project: { approverName: { $concat: [""$approvers.firstName"", "" "", ""$approvers.lastName""] }, totalLeaves: 1, leaveTypes: 1 } } ]); ","""Group the leave records from the 'leaveRecords' collection by the approver's ID, calculating the total number of leaves approved and collecting the distinct leave types. Then, join this grouped data with the 'employees' collection to retrieve the approvers' details, and unwind the results to get a flat structure. Finally, project the approver's full name, total leaves, and leave types."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",,"""Select all employee documents from the 'employees' collection where the employee's status is 'active' and their department is 'Engineering', and sort the results by their hire date in ascending order."""
