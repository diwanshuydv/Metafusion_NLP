schema,sql_query,natural_language_query
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001;,Retrieve all information about all employees from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001;",Retrieve the first and last names of all employees from the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT JobTitle FROM employee_1001 WHERE Department = 'Sales';,Retrieve the job titles of employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001;,Count the total number of employees in the employee_1001 table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001;,List all unique departments that employees work in.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, Salary FROM employee_1001 WHERE Salary > 50000;","Retrieve the Employee ID and salary of employees earning more than 50,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE HireDate > '2020-01-01'","Find the first names, last names, and hire dates of employees hired after January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT FirstName || ' ' || LastName AS FullName FROM employee_1001;,Retrieve the full names of all employees by combining their first and last names from the employee table.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE JobTitle = 'Manager';,Retrieve all information about employees with the job title 'Manager.'
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT EmployeeID, Department FROM employee_1001 ORDER BY Department;","Retrieve the Employee IDs and departments of all employees, organized by department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Department = 'HR';","Retrieve the first names, last names, and salaries of employees in the HR department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT FirstName FROM employee_1001 WHERE LastName LIKE 'S%';,Find the first names of employees whose last names start with the letter 'S'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE Department = 'Finance';,Count the number of employees in the Finance department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary < 40000;","Find the first and last names of employees with a salary less than 40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE HireDate BETWEEN '2015-01-01' AND '2020-01-01',"Retrieve all information about employees who were hired between January 1, 2015, and January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department;","Calculate the average salary for each department in the company, labeling the result as AverageSalary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE FirstName IS NOT NULL;",Retrieve the first and last names of employees who have a non-null first name.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT EmployeeID FROM employee_1001 ORDER BY HireDate DESC LIMIT 5;,"Retrieve the Employee IDs of the five most recently hired employees, ordered by their hire dates from newest to oldest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(DISTINCT JobTitle) FROM employee_1001;,Count the unique job titles held by employees in the company.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT Salary FROM employee_1001 WHERE Department = 'IT' AND Salary > 60000;,"Find the salaries of employees in the IT department earning more than 60,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department IS NULL;",Retrieve the first and last names of employees whose department is not assigned.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001,Retrieve all information about every employee.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001",Retrieve the first and last names of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, Department FROM employee_1001 WHERE Salary > 60000","List the job titles and departments of employees earning more than 60,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Department = 'Sales',Retrieve all the information about employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE HireDate > '2020-01-01'","Find the first names, last names, and salaries of employees hired after January 1, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE Department = 'HR',Count the number of employees in the HR department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT Department FROM employee_1001,List all unique departments that employees work in.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 ORDER BY Salary DESC","Retrieve the first names, last names, and salaries of all employees, sorted by salary in descending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%'",Find the first and last names of employees whose job titles contain the word 'Manager'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) FROM employee_1001 GROUP BY Department","Calculate the average salary of employees, grouping the results by department, and include the department name."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2019-01-01' AND '2020-12-31'","Retrieve the first and last names of employees hired between January 1, 2019, and December 31, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) FROM employee_1001 GROUP BY JobTitle",Count the number of employees in each job title.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Salary < 40000,"Retrieve all information about employees earning less than $40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 ORDER BY HireDate ASC",Retrieve the first and last names of all employees arranged by their hire dates from earliest to latest.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001 WHERE Department = 'IT',Retrieve the unique job titles of employees in the IT department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(EmployeeID) FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001),Count the number of employees whose salary is greater than the average salary of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Department FROM employee_1001 WHERE Department IS NOT NULL","Retrieve the first names, last names, and departments of employees with a non-null department."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT SUM(Salary) FROM employee_1001 WHERE Department = 'Finance',What is the total salary paid to employees in the Finance department?
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE LENGTH(FirstName) > 5",Find the first and last names of employees with first names longer than five characters.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT COUNT(*) FROM employee_1001 WHERE JobTitle IN ('Analyst', 'Developer')",Count how many employees have the job title of Analyst or Developer.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 5",Identify the departments with more than five employees and count the number of employees in each department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY JobTitle ORDER BY AverageSalary DESC","List each job title with its average salary among employees, ordered from the highest average salary to the lowest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate > '2020-01-01' ORDER BY HireDate ASC","List the first and last names of employees hired after January 1, 2020, ordered by their hire date in ascending order."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalary FROM employee_1001 GROUP BY Department",Calculate the total salary for each department in the company.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001) ORDER BY Salary DESC","Find the first and last names of employees who earn more than the average salary of all employees, along with their salaries, and list them in descending order by salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle HAVING COUNT(*) > 2","Identify the job titles of employees and count how many people hold each job title, including only those job titles that have more than two employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, HireDate FROM employee_1001 WHERE Department = 'Engineering' ORDER BY HireDate DESC","Retrieve the first names, last names, and hire dates of employees in the Engineering department, sorted by hire dates from most recent to oldest."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MAX(Salary) as MaxSalary FROM employee_1001 GROUP BY Department",Identify the highest salary for each department among employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE JobTitle LIKE '%Manager%'",Find the first and last names of employees whose job title includes 'Manager'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS CountByTitle FROM employee_1001 GROUP BY JobTitle ORDER BY CountByTitle ASC",Count the number of employees per job title and list them in ascending order of the count.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate BETWEEN '2018-01-01' AND '2022-12-31'","Find the first and last names of employees hired between January 1, 2018, and December 31, 2022."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MIN(Salary) AS MinimumSalary FROM employee_1001 GROUP BY Department HAVING MIN(Salary) < 40000","List the departments along with the minimum salary in each department, but only include those departments where the minimum salary is less than 40,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary BETWEEN 50000 AND 80000 ORDER BY Salary ASC","List the first and last names of employees whose salaries are between 50,000 and 80,000, arranged in ascending order by salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) AS TotalEmployees FROM employee_1001 WHERE Department = 'Sales',Count the total number of employees in the Sales department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001,List all the distinct job titles of employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY Department ORDER BY EmployeeCount DESC",Count the number of employees in each department and order the departments from the most employees to the least.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Salary > 70000 AND Department = 'HR' ORDER BY Salary DESC","Find the first and last names of employees in the HR department earning more than 70,000, listed from highest to lowest salary."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, MAX(Salary) AS HighestSalary FROM employee_1001 GROUP BY Department",Find the highest salary for each department along with the department name.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE strftime('%Y', HireDate) = '2023'",Retrieve the first and last names of employees hired in the year 2023.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY JobTitle HAVING COUNT(*) > 5","Count how many employees work in each job title, and show only the job titles that have more than five employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, AVG(Salary) AS AverageSalary FROM employee_1001 GROUP BY Department HAVING AVG(Salary) > 60000","List the departments where the average salary is greater than 60,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT COUNT(*) AS NumberOfEmployees, JobTitle FROM employee_1001 GROUP BY JobTitle ORDER BY NumberOfEmployees DESC",Count and list the job titles of employees ordered from the most to the least employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE HireDate >= '2021-01-01' ORDER BY HireDate","List the first and last names of employees who were hired on or after January 1, 2021, and arrange the results in the order they were hired."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS NumberOfEmployees FROM employee_1001 WHERE Salary > 50000 GROUP BY JobTitle HAVING COUNT(*) > 5","Identify the job titles of employees who earn more than 50,000 and count how many employees hold each job title, including only those job titles with more than 5 employees."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Department = 'IT' AND Salary > (SELECT AVG(Salary) FROM employee_1001),Retrieve all details of employees who work in the IT department and have a salary that is higher than the average salary of all employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department IN ('HR', 'Finance') ORDER BY LastName","Retrieve the first and last names of employees who work in the HR or Finance departments, and list them in order by their last names."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, SUM(Salary) AS TotalSalaries FROM employee_1001 GROUP BY Department ORDER BY TotalSalaries DESC",Calculate the total salaries for each department and list them in order from highest to lowest total salary.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT DISTINCT JobTitle FROM employee_1001 WHERE Salary > 70000,"Find the distinct job titles of employees with a salary greater than 70,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM employee_1001 GROUP BY JobTitle HAVING MAX(Salary) > 90000","Find the job titles of employees with their minimum and maximum salaries, including only those job titles where the maximum salary exceeds 90,000."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE FirstName LIKE 'A%'",Retrieve the first and last names of employees whose first name begins with the letter 'A'.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT COUNT(*) FROM employee_1001 WHERE HireDate >= '2020-01-01' AND HireDate < '2021-01-01',"Count how many employees were hired from January 1, 2020, to December 31, 2020."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY Department ORDER BY COUNT(*) ASC",Count the number of employees in each department and list the departments in order from the least to the most employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT AVG(Salary) FROM employee_1001 WHERE HireDate < '2015-01-01',"Calculate the average salary of employees hired before January 1, 2015."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, Salary FROM employee_1001 WHERE Salary > (SELECT AVG(Salary) FROM employee_1001) ORDER BY Salary DESC",Retrieve the first and last names of employees who earn more than the average salary and list these results along with their salaries in descending order.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT JobTitle, COUNT(*) AS EmployeeCount FROM employee_1001 GROUP BY JobTitle ORDER BY EmployeeCount DESC LIMIT 3",Identify the top three job titles with the highest number of employees and count how many employees hold each of those titles.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT FirstName || ' ' || LastName AS FullName FROM employee_1001 WHERE Department = 'Engineering',Retrieve the full names of employees in the Engineering department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
",SELECT * FROM employee_1001 WHERE Salary < ALL (SELECT Salary FROM employee_1001 WHERE Department = 'Marketing'),Find all employees whose salaries are lower than the salaries of all employees in the Marketing department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(DISTINCT JobTitle) AS UniqueJobTitles FROM employee_1001 GROUP BY Department",Count the unique job titles for each department in the employee records.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName, CAST(JULIANDAY('now') - JULIANDAY(HireDate) AS INTEGER) AS DaysSinceHired FROM employee_1001 ORDER BY DaysSinceHired DESC","Retrieve the first and last names of employees along with the number of days since their hire date, and sort the results to show the most recently hired employees first."
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT Department, COUNT(*) AS NumberOfEmployees FROM employee_1001 GROUP BY Department HAVING COUNT(*) > 10",Count and list the departments that have more than 10 employees.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT FirstName, LastName FROM employee_1001 WHERE Department = 'Sales'",Retrieve the first and last names of employees in the 'Sales' department.
"CREATE TABLE employee_1001 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""Department"" TEXT,
  ""Salary"" REAL,
  ""HireDate"" TIMESTAMP
)
","SELECT e1.FirstName, e1.LastName, e1.JobTitle FROM employee_1001 e1 WHERE e1.Salary > (SELECT AVG(Salary) FROM employee_1001)","List the first and last names, along with job titles of employees who earn more than the average salary."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002;,"Retrieve all records from the attendance table, including check-in and check-out times, employee statuses, and employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID FROM attendance_1002;",Retrieve the AttendanceID and EmployeeID from the attendance records for all entries in the attendance table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE Status = 'Present';",Retrieve the check-in and check-out times of employees who are marked as present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Absent';,Count the number of employees who are recorded as absent in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002;,Retrieve the distinct Employee IDs from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE CheckInTime > '2023-01-01 08:00:00';","Find the Employee IDs and their check-in times for employees who checked in after January 1, 2023, at 8:00 AM."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE CheckOutTime IS NOT NULL;,Retrieve all attendance records for which employees have checked out.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Status FROM attendance_1002 WHERE AttendanceID = 1;",Retrieve the Employee ID and Status of the attendance record with Attendance ID 1.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) FROM attendance_1002 GROUP BY Status;",Count how many records there are for each attendance status in the attendance table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT MIN(CheckInTime) AS EarliestCheckIn, MAX(CheckOutTime) AS LatestCheckOut FROM attendance_1002;",Retrieve the earliest check-in time and the latest check-out time from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC;","Retrieve the list of employee IDs and their check-in times, ordered by the most recent check-ins."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AttendanceID FROM attendance_1002 WHERE EmployeeID = 5 AND CheckInTime > '2023-01-01';,"Retrieve the AttendanceID for the employee with an EmployeeID of 5 who checked in after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM attendance_1002 WHERE Status = 'Present';,Count the number of unique employees marked as present in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AttendanceID, EmployeeID FROM attendance_1002 WHERE CheckOutTime < '2023-06-01 17:00:00';","Retrieve the attendance records for employees where the checkout time is before June 1, 2023, at 5:00 PM, including their attendance IDs and employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) > 5;,Identify employees who have checked in more than five times total.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE Status IS NOT NULL;,Retrieve all attendance records where the status is not null.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Status FROM attendance_1002;,List all unique attendance statuses recorded in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime < '2024-01-01';,Count the total number of attendance records with check-in times in the year 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AttendanceID FROM attendance_1002 ORDER BY CheckInTime LIMIT 1;,Find the AttendanceID of the record with the earliest CheckInTime from the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE Status = 'Late';,Find all attendance records where employees were marked as late.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002;,"Retrieve all records from the attendance data, including all details about employee check-in and check-out times, their attendance status, and associated employee IDs."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE Status = 'Present';",Retrieve the Employee IDs and their corresponding check-in times for employees currently marked as present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 101;",Retrieve the check-in and check-out times for the employee with ID 101.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Status FROM attendance_1002;,Retrieve all distinct attendance statuses recorded in the attendance database.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE Status = 'Absent';,Count the number of employees marked as absent.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID;",Count the total number of attendance records for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 ORDER BY CheckInTime DESC;","Retrieve the employee IDs and their check-in times from the attendance records, listing them from the most recent check-in to the oldest."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCount FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID;",Count how many times each employee was marked as late in their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime < '2024-01-01';,"Retrieve all attendance records for the year 2023, including check-in and check-out times with precise date filtering."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckOutTime) AS LastCheckOut FROM attendance_1002 GROUP BY EmployeeID;",Find the latest check-out time for each employee from their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE Status = 'On Leave'",Retrieve the Employee IDs and Check-In times for employees who have a status of 'On Leave'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, e.FirstName, e.LastName FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID",Retrieve the Employee IDs along with the first and last names of employees who have recorded attendance in the attendance table.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average duration of time employees spend at work by subtracting their check-in times from their check-out times, grouped by each employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT * FROM attendance_1002 WHERE Status IN ('Present', 'Late');",Retrieve all records of employee attendance with a status of 'Present' or 'Late'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FROM attendance_1002 WHERE CheckInTime IS NOT NULL GROUP BY EmployeeID;","Count how many times each employee has checked in, including only those instances where the check-in actually occurred."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT CheckInTime, CheckOutTime FROM attendance_1002 WHERE EmployeeID = 102 AND Status = 'Present';",Retrieve the check-in and check-out times for the employee with ID 102 who is marked as present.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) FROM attendance_1002 GROUP BY Status;","Count the number of attendance records for each status, grouping the results by status."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckOutTime IS NOT NULL;,Identify the unique Employee IDs of employees who have a recorded CheckOutTime.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime FROM attendance_1002 WHERE CheckInTime > '2023-05-01' ORDER BY CheckInTime;","Retrieve the employee IDs and their check-in times for all employees who checked in after May 1, 2023, and order the results by their check-in times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM attendance_1002 WHERE EmployeeID = 103 AND Status = 'Absent';,Count the number of times employee number 103 was marked as absent.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalAttendance FROM attendance_1002 GROUP BY EmployeeID;",Count the total number of attendance records for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID;","Calculate the average duration of time each employee spends at work by finding the difference between their check-in and check-out times, and group the results by employee."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS CountStatus FROM attendance_1002 GROUP BY Status HAVING COUNT(*) > 5;","Count the number of attendance records for each distinct status, showing only those statuses with more than five attendance records."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckInTime) AS EarliestCheckIn FROM attendance_1002 GROUP BY EmployeeID;",Find the earliest check-in time for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(CheckOutTime) AS LastCheckOut FROM attendance_1002 GROUP BY EmployeeID;",List each employee's ID along with the latest checkout time.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' AND CheckInTime < '2024-01-01' GROUP BY EmployeeID;","Count how many times each employee attended work in the year 2023, based on their check-in times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, a.CheckInTime FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID WHERE e.Status = 'Active';",Retrieve the check-in times and employee IDs for all employees with an active status.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCount FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID;",Count the number of times each employee was recorded as late based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS NumberOfDaysAbsent FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID;",Count the number of days each employee was absent and list the Employee IDs along with their absence counts.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPresent FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID HAVING COUNT(*) > 10;","Identify the Employee IDs of those who were present at work more than 10 times, along with the total number of times they were marked as present."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, EXTRACT(MONTH FROM CheckInTime) AS Month, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID, Month;",Count how many times each employee checked in during each month.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS Count FROM attendance_1002 WHERE CheckInTime >= '2023-01-01' GROUP BY Status;","Count the number of records for each attendance status, including only check-ins that occurred on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))) AS AverageDuration FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID;","Calculate the average duration in seconds each employee spends at work for those who were present, by measuring the time difference between their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, COUNT(a.AttendanceID) AS AttendanceCount FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.EmployeeID, e.Name ORDER BY AttendanceCount DESC;","List the Employee IDs and names of all employees along with the total attendance records for each employee, sorted by the number of attendance records in descending order."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID ORDER BY AttendanceCount DESC LIMIT 1;","Identify the EmployeeID of the employee with the highest attendance count, along with the total number of times they attended, based on the attendance records."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS Absences FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID ORDER BY Absences DESC;","Count the number of absences for each employee, showing the employee ID and total absences, listed in descending order of absences."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT A.EmployeeID, COUNT(*) AS TotalLate FROM attendance_1002 A WHERE A.Status = 'Late' AND A.CheckInTime >= '2023-01-01' AND A.CheckInTime < '2023-07-01' GROUP BY A.EmployeeID;","Count how many times each employee was late for work during the first half of 2023, from January 1 to June 30, and list their employee IDs along with the total number of late occurrences."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime)) / 60) AS TotalMinutes FROM attendance_1002 WHERE CheckInTime IS NOT NULL AND CheckOutTime IS NOT NULL GROUP BY EmployeeID;","Calculate the total minutes worked by each employee, only considering records with valid check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, COUNT(a.AttendanceID) AS TotalAttendance FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Name;",Retrieve the names of employees and the total number of days they were marked as 'Present' in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) > 10","Count the number of times each employee has checked in and checked out, and show only those employees who have attended more than 10 times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(CheckOutTime - CheckInTime) AS AvgDuration FROM attendance_1002 GROUP BY EmployeeID","Calculate the average duration of time each employee spends at work by finding the difference between their check-out and check-in times, grouped by EmployeeID."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Status, COUNT(*) AS StatusCount FROM attendance_1002 GROUP BY Status",Count each attendance status and how many times it is recorded.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(CheckInTime) AS EarliestCheckIn FROM attendance_1002 GROUP BY EmployeeID",Retrieve the earliest check-in time for each employee.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS LateCount FROM attendance_1002 WHERE Status = 'Late' GROUP BY EmployeeID",Count how many times each employee was marked as late based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckInTime >= '2023-01-01',"Retrieve the unique Employee IDs of employees who checked in on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, CheckInTime, CheckOutTime FROM attendance_1002 ORDER BY CheckInTime DESC","Retrieve the employee IDs along with their check-in and check-out times from the attendance records, arranged by the most recent check-in time."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present'",Retrieve the Employee ID and names of employees marked as present in the attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 WHERE Status = 'Absent' GROUP BY EmployeeID HAVING COUNT(*) >= 5,Identify the Employee IDs of employees who have been absent for five or more days.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, (CheckOutTime - CheckInTime) AS WorkDuration FROM attendance_1002 WHERE CheckInTime >= '2023-01-01'","Retrieve the Employee IDs and calculate the duration of their work for all employees who checked in on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS MissedCheckOut FROM attendance_1002 WHERE CheckOutTime IS NULL GROUP BY EmployeeID",Count how many times each employee has not checked out by identifying records with missing checkout times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM attendance_1002 WHERE CheckInTime BETWEEN '2023-01-01' AND '2023-01-31',"Retrieve the list of unique Employee IDs for employees who checked in between January 1, 2023, and January 31, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT DATE(CheckInTime)) AS UniqueCheckInDays FROM attendance_1002 GROUP BY EmployeeID",Count the unique days each employee checked in to work.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PresentDays FROM attendance_1002 WHERE Status = 'Present' GROUP BY EmployeeID",Calculate the total number of days each employee was present by counting the records where their status is 'Present' and grouping by employee IDs.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM attendance_1002 GROUP BY EmployeeID HAVING MAX(CheckInTime) < '2023-01-15',"Find the Employee IDs of employees whose latest check-in time was before January 15, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) FILTER (WHERE Status = 'Late') AS LateCount FROM attendance_1002 GROUP BY EmployeeID",Count how many times each employee was marked as late in their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT DISTINCT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.AttendanceID IS NULL",Identify the unique Employee IDs and names of employees who do not have any attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, DATE(CheckInTime) AS CheckInDate, COUNT(*) AS DailyCount FROM attendance_1002 GROUP BY EmployeeID, DATE(CheckInTime)","Count the number of times each employee checked in on each day, providing the employee's ID and the date of check-in."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(EXTRACT(EPOCH FROM (CheckOutTime - CheckInTime))/3600) AS AvgWorkHours FROM attendance_1002 GROUP BY EmployeeID",Calculate the average number of hours worked for each employee by averaging the difference between their check-in and check-out times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalCount FROM attendance_1002 GROUP BY EmployeeID HAVING COUNT(*) > 20",Count how many times each employee has checked in and show only those who have checked in more than 20 times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT a.EmployeeID, COUNT(*) AS AttendanceCount FROM attendance_1002 a JOIN employee_1001 e ON a.EmployeeID = e.EmployeeID WHERE e.Name LIKE 'J%' GROUP BY a.EmployeeID","Count how many times each employee whose name starts with 'J' has attended work, and show the EmployeeID along with that count."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM attendance_1002 WHERE Status = 'Present' AND CheckInTime >= '2023-01-01' AND CheckInTime < '2023-02-01';,Count the number of distinct employees who were present at work during the entire month of January 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.EmployeeID, e.Name HAVING COUNT(a.AttendanceID) > 20",List the employee IDs and names of employees who have recorded more than 20 days of attendance as 'Present'.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, AVG(strftime('%H', a.CheckOutTime) - strftime('%H', a.CheckInTime)) AS AverageHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime >= '2023-01-01' GROUP BY e.Name","Retrieve the names of employees and calculate the average number of hours they worked each day based on their check-in and check-out times, for all attendance records on or after January 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime = (SELECT MAX(CheckInTime) FROM attendance_1002 WHERE EmployeeID = e.EmployeeID)",Retrieve the names of employees along with their latest check-in times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Absent' GROUP BY e.Name HAVING COUNT(a.AttendanceID) > 5,Identify the names of employees who have been marked as absent more than five times in attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, e.Name, SUM( julianday(a.CheckOutTime) - julianday(a.CheckInTime) ) * 24 AS TotalWorkedHours FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department, e.Name HAVING TotalWorkedHours > 40","Find the names and departments of employees who have worked more than 40 hours total, calculated from their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e WHERE NOT EXISTS (SELECT 1 FROM attendance_1002 a WHERE a.EmployeeID = e.EmployeeID AND a.CheckInTime >= '2023-01-01' AND a.CheckInTime < '2024-01-01'),"Find the names of employees who have not checked in at all during the year 2023, considering their check-in records within that year."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Name HAVING MIN(a.CheckInTime) <= '2023-01-15',"Find the names of employees who had their first check-in on or before January 15, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, COUNT(*) AS LateCheckIns FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime::time > '09:00:00' GROUP BY e.Name HAVING COUNT(*) > 10","Identify the names of employees who have checked in late more than 10 times, specifically after 9:00 AM, and count how many times each employee has arrived late."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, SUM(julianday(a.CheckOutTime) - julianday(a.CheckInTime)) AS TotalOvertime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Overtime' GROUP BY e.Name","Calculate the total overtime hours for each employee by finding the time difference between their check-in and check-out times when their attendance status is marked as 'Overtime', and list the names of those employees along with their total overtime hours in a format that accounts for time differences accurately."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(DISTINCT e.EmployeeID) AS EmployeesNotPresent FROM employee_1001 e LEFT JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Absent' AND a.CheckOutTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.Department","Count the number of distinct employees who were absent during the year 2023, grouped by their department based on their check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckOutTime > '17:00:00' GROUP BY e.Name,Identify the names of employees who checked out of work after 5:00 PM.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e INNER JOIN (SELECT a.EmployeeID FROM attendance_1002 a WHERE a.Status = 'Absent' GROUP BY a.EmployeeID HAVING COUNT(*) > 3) absents ON e.EmployeeID = absents.EmployeeID,Find the names of employees who have been marked as absent more than three times based on their attendance records.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, a.CheckInTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckOutTime IS NOT NULL AND a.CheckInTime < a.CheckOutTime",Retrieve the names and check-in times of employees who have checked out and whose check-in times are earlier than their check-out times.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, a.CheckInTime, a.CheckOutTime FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE DATE(a.CheckInTime) <= '2023-09-15' AND DATE(a.CheckOutTime) >= '2023-09-15' AND a.Status = 'Present'","Retrieve the names of employees, along with their check-in and check-out times, for those who were present on September 15, 2023, based on their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.Name HAVING COUNT(*) < 15,List the names of employees who checked in to work fewer than 15 times in the year 2023.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, AVG((julianday(a.CheckOutTime) - julianday(a.CheckInTime)) * 24) AS AverageHoursWorked FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID GROUP BY e.Department","Calculate the average number of hours worked by employees, grouped by their department, using the difference between their check-in and check-out times."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.Status = 'Present' GROUP BY e.Name HAVING COUNT(DISTINCT DATE(a.CheckInTime)) > 10,Select the names of employees who have been present for more than 10 different days.
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime < '2023-09-01' GROUP BY e.Name HAVING COUNT(a.AttendanceID) > 15,"Identify the names of employees who checked in to work more than 15 times before September 1, 2023."
"CREATE TABLE attendance_1002 (
  ""AttendanceID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""CheckInTime"" TIMESTAMP,
  ""CheckOutTime"" TIMESTAMP,
  ""Status"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, MAX(a.CheckInTime) AS LatestCheckIn FROM employee_1001 e JOIN attendance_1002 a ON e.EmployeeID = a.EmployeeID WHERE a.CheckInTime >= '2023-12-01' GROUP BY e.Name;","Find the names of employees who checked in after December 1, 2023, and display the most recent check-in time for each."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus, Commission, PaymentDate FROM salary_1003;","Retrieve all records of employee salary information, including the base salary, bonus, commission, and payment dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003;",Retrieve the employee IDs and their base salaries from the salary_1003 records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus FROM salary_1003 WHERE BaseSalary > 50000;","Retrieve the base salary and bonus of employees whose base salary is greater than 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC;","Retrieve the Salary IDs and payment dates from the salary records, sorted by payment date in descending order."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003;,Retrieve a list of unique employee IDs from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003;,Calculate the total base salary from all salary records for employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(Bonus) AS AverageBonus FROM salary_1003;,What is the average bonus that employees receive from the salary records?
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS SalaryCount FROM salary_1003 GROUP BY EmployeeID;",Count the number of salary records for each employee.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31',"Retrieve all salary records for payments made between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + Bonus + Commission AS TotalCompensation FROM salary_1003","Retrieve the Employee IDs and calculate the total compensation for each employee by adding their base salary, bonus, and commission from the salary_1003 records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SalaryID FROM salary_1003 WHERE Bonus IS NULL;,Find the SalaryID of all entries where the bonus is NULL.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) AS HighestBaseSalary FROM salary_1003 GROUP BY EmployeeID;","Retrieve the highest base salary for each employee from the salary records, labeled as HighestBaseSalary."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003 WHERE Commission > 0;,Count the number of records in the salary_1003 table where employees have received a commission greater than zero.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(BaseSalary) AS MinimumSalary FROM salary_1003 GROUP BY EmployeeID;",Retrieve the minimum base salary for each employee by their EmployeeID.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID FROM salary_1003 WHERE BaseSalary < 40000;","Find the salary IDs and employee IDs of employees whose base salary is below 40,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE EmployeeID = 1;,Retrieve all salary records for the employee with ID 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, PaymentDate FROM salary_1003 ORDER BY BaseSalary ASC;","List the base salaries and payment dates of all employees, arranged in ascending order of base salary."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) AS SalaryCount FROM salary_1003;,Count the total number of salary records in the salary table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, (Bonus + Commission) AS TotalAdditionalIncome FROM salary_1003;","Retrieve the salary IDs and the total additional income, which is the sum of bonuses and commissions, for all entries in the salary records."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PaymentDate FROM salary_1003;,Retrieve unique payment dates from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(Commission) AS TotalCommission FROM salary_1003;,Calculate the total commission earned by all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SalaryID, EmployeeID, BaseSalary, Bonus, Commission, PaymentDate FROM salary_1003;","Retrieve all records from the salary table, including salary ID, employee ID, base salary, bonus, commission, and payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus FROM salary_1003 WHERE EmployeeID = 1;",Retrieve the base salary and bonus for the employee with ID 1.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + Bonus + Commission AS TotalCompensation FROM salary_1003;","Calculate the total compensation for each employee by summing their base salary, bonus, and commission."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM salary_1003;,Count the total number of salary records in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003;,Retrieve a list of unique EmployeeIDs from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PaymentDate FROM salary_1003 WHERE BaseSalary > 50000;,"Find the payment dates for employees with a base salary greater than 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003 ORDER BY BaseSalary DESC;","Retrieve the Employee IDs and their corresponding base salaries from the salary records, ordered from highest to lowest base salary."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 WHERE Bonus > 0;,Find the IDs of employees who have received a bonus greater than zero.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(BaseSalary) FROM salary_1003;,Calculate the average base salary of employees recorded in the salary table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID;",Calculate the total base salary for each employee by summing the base salaries in the salary database.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary FROM salary_1003 WHERE PaymentDate >= '2023-01-01' AND PaymentDate < '2024-01-01';",Retrieve the Employee IDs and Base Salaries of employees who received payments in the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM salary_1003 WHERE Commission > 0;,Retrieve all records from the salary table for employees who have received a commission greater than zero.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) AS MaxSalary FROM salary_1003 GROUP BY EmployeeID;",Retrieve the maximum base salary for each employee.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary + Bonus AS TotalEarnings FROM salary_1003 WHERE BaseSalary + Bonus > 60000;","Retrieve the Employee IDs and total earnings, including both the base salary and bonus, for employees whose total earnings exceed 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PaymentDate, COUNT(*) FROM salary_1003 GROUP BY PaymentDate;",Count the number of salary payments made on each payment date.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 WHERE BaseSalary < 30000;,"Find the employee IDs of employees whose base salary is less than 30,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(Bonus) AS BonusCount FROM salary_1003 WHERE Bonus > 0 GROUP BY EmployeeID;",Count the number of bonus payments for each employee who has received a bonus.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, BaseSalary, PaymentDate FROM salary_1003 ORDER BY PaymentDate DESC;","Retrieve the employee IDs, their base salaries, and the payment dates, arranged from the most recent payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary) FROM salary_1003 WHERE PaymentDate < '2023-07-01';,"Calculate the total of all base salaries for employees paid before July 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Commission FROM salary_1003 WHERE BaseSalary IS NOT NULL;",Retrieve the employee IDs and their commission amounts for employees who have a base salary.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 GROUP BY EmployeeID",Calculate the total base salary for each employee by summing their base salaries from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalPayments FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) > 5",Count how many payments each employee has received and list the employees who have received more than five payments.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageSalary FROM salary_1003 GROUP BY EmployeeID ORDER BY AverageSalary DESC",Calculate the average base salary for each employee and list the averages in descending order.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(Bonus) AS TotalBonus, SUM(Commission) AS TotalCommission FROM salary_1003 GROUP BY EmployeeID HAVING SUM(Bonus) > 1000","Find the employee IDs along with their total bonuses and total commissions, including only those employees whose total bonuses exceed 1,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31',"Calculate the total compensation for all employees who received payments, including base salary, bonus, and commission, between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, e.EmployeeName FROM salary_1003 s JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID WHERE s.BaseSalary > 70000","Find the Employee IDs and names of employees with a base salary greater than 70,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COALESCE(SUM(s.BaseSalary), 0) AS TotalSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalSalary DESC","Retrieve the employee IDs and the total base salary for each employee, including those who may not have any recorded salary, and display the results sorted from the highest total salary to the lowest."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(*) > 3","Identify employees who have received more than three payments, and count the number of payments each of these employees has received."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM salary_1003 WHERE PaymentDate > CURRENT_DATE - INTERVAL '1 YEAR',Identify the distinct employees who have received any payment in the last year according to the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SUM(s.BaseSalary) BETWEEN 50000 AND 100000,"Find the IDs of employees whose total base salary is between 50,000 and 100,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS HighBonusCount FROM salary_1003 WHERE Bonus > 1000 GROUP BY EmployeeID","Count how many times each employee has received a bonus greater than 1,000, and group the results by EmployeeID."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus) AS TotalEarnings FROM salary_1003 WHERE Commission < 500 GROUP BY EmployeeID","Calculate the total earnings, which includes both the base salary and bonus, for each employee with a commission of less than 500."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(BaseSalary) AS MinSalary, MAX(BaseSalary) AS MaxSalary FROM salary_1003 GROUP BY EmployeeID",Find the minimum and maximum base salary for each employee in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 GROUP BY EmployeeID HAVING AverageBaseSalary >= 60000","Calculate the average base salary for each employee and list those employees whose average base salary is at least $60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, e.Department FROM salary_1003 s JOIN employee_1001 e ON s.EmployeeID = e.EmployeeID GROUP BY s.EmployeeID, e.Department","Retrieve the employee IDs along with their corresponding department names from the salary records and employee details, grouping the results by employee ID and department."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, SUM(s.Bonus) AS TotalBonus FROM salary_1003 s GROUP BY s.EmployeeID ORDER BY TotalBonus DESC",Calculate the total bonuses received by each employee and list them in descending order of total bonus.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.EmployeeName FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.EmployeeName HAVING COUNT(s.SalaryID) > 2",Identify the employee IDs and names of employees who have received more than two salary payments.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT SUM(Bonus) AS TotalBonuses, COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE PaymentDate > '2023-01-01' GROUP BY EmployeeID","Calculate the total bonuses and count the distinct number of employees who received bonuses for payments made after January 1, 2023, grouping the results by each employee."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31',"Count the number of distinct employees who received a payment between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT s.EmployeeID FROM salary_1003 s),Identify the Employee IDs of employees who do not have any recorded salary information in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary + Bonus + Commission) AS TotalCompensation FROM salary_1003 GROUP BY EmployeeID HAVING TotalCompensation > 100000","Identify the Employee IDs and their total compensation for those employees whose total compensation, including base salary, bonus, and commission, exceeds 100,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, AVG(s.BaseSalary) AS AvgBaseSalary FROM salary_1003 s GROUP BY s.EmployeeID ORDER BY AvgBaseSalary DESC",Calculate the average base salary for each employee and list the results in descending order of average salary.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.PaymentDate, COUNT(*) AS NumberOfPayments FROM salary_1003 s GROUP BY s.PaymentDate HAVING COUNT(*) > 5",Identify the payment dates with more than five payments and count the payments for those dates.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(BaseSalary) AS MaxBaseSalary, MIN(BaseSalary) AS MinBaseSalary FROM salary_1003 GROUP BY EmployeeID",Retrieve the maximum and minimum base salary for each employee.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(BaseSalary) AS TotalBaseSalary FROM salary_1003 WHERE PaymentDate >= '2023-01-01' GROUP BY EmployeeID","Identify each employee's ID and calculate the total base salary they have received since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, COUNT(DISTINCT s.PaymentDate) AS PaymentCount FROM salary_1003 s WHERE s.Bonus > 0 GROUP BY s.EmployeeID","Count how many unique payment dates each employee has received bonuses, and list the employee IDs along with the count of these unique payment dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, SUM(s.BaseSalary) AS TotalBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name ORDER BY TotalBaseSalary DESC","Retrieve the employee IDs and names from the employee database, along with the total base salary for each employee, and organize the results in descending order based on the total base salary."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(Commission) AS AverageCommission FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31',Calculate the average commission for all employees from the salary records where the payment date is in the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID FROM salary_1003 s GROUP BY s.EmployeeID HAVING SUM(COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) > 20000","Find the IDs of employees whose total incentives, including bonuses and commissions, exceed 20,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, COUNT(s.SalaryID) AS PaymentOccurrences FROM salary_1003 s GROUP BY s.EmployeeID HAVING COUNT(s.SalaryID) < 3",Identify the employees who have received fewer than three salary payments and count the number of salary payments each employee has received.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.DepartmentID, COUNT(s.SalaryID) AS NumberOfSalaries FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.DepartmentID ORDER BY COUNT(s.SalaryID) DESC",Count the number of salary records for each department and list the departments by the count of salary records in descending order.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Name HAVING SUM(s.BaseSalary + s.Bonus) > 90000,"Retrieve the names of employees whose total earnings, including base salary and bonus, exceed 90,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, strftime('%Y', s.PaymentDate) AS PaymentYear, SUM(s.BaseSalary) AS YearlySalary FROM salary_1003 s GROUP BY s.EmployeeID, strftime('%Y', s.PaymentDate)","Retrieve the total annual base salary for each employee, grouped by employee ID and the year of the payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, s.PaymentDate, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalPayment FROM salary_1003 s GROUP BY s.EmployeeID, s.PaymentDate","Retrieve the total payments made to each employee on specific payment dates by summing their base salary, bonus, and commission, and group the results by employee and payment date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT s.EmployeeID, COUNT(*) AS PaymentCount FROM salary_1003 s WHERE s.PaymentDate < '2022-01-01' GROUP BY s.EmployeeID HAVING COUNT(*) > 5","Identify employees who received payments before January 1, 2022, and count how many payments each of them received, including only those who received more than five payments."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, AVG(s.BaseSalary) AS AverageSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.Name",Calculate the average base salary for each employee and list their employee IDs and names.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(COALESCE(Bonus, 0) + COALESCE(Commission, 0)) AS TotalIncentives FROM salary_1003 GROUP BY EmployeeID HAVING SUM(COALESCE(Bonus, 0) + COALESCE(Commission, 0)) > 50000","Calculate the total incentives, including bonuses and commissions, for each employee, and list only those employees whose total incentives exceed 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalSalaries FROM salary_1003 WHERE PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID","Count the total number of salary records for each employee that were paid between January 1, 2023, and December 31, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT PaymentDate) AS DistinctPaymentDates FROM salary_1003 GROUP BY EmployeeID HAVING COUNT(DISTINCT PaymentDate) > 3","Identify the employees who have received payments on more than three distinct payment dates, and count the number of unique payment dates for each employee."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, AVG(BaseSalary) AS AverageBaseSalary FROM salary_1003 WHERE PaymentDate > '2022-01-01' GROUP BY EmployeeID","Calculate the average base salary for each employee where the payment date is after January 1, 2022."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) > 100000","Retrieve the employee IDs, first names, and last names of employees whose total compensation, including base salary, bonuses, and commissions, exceeds 100,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 5",Identify the first and last names of employees who received more than five salary payments in the year 2023.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, AVG(s.BaseSalary) AS AverageBaseSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department",Calculate the average base salary for employees grouped by department.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(s.PaymentDate) AS RecentPayments FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID AND s.PaymentDate > '2023-01-01' WHERE NOT EXISTS (SELECT 1 FROM salary_1003 s2 WHERE s2.EmployeeID = e.EmployeeID AND s2.PaymentDate < '2023-01-01') GROUP BY e.EmployeeID","Identify the employee IDs and count how many salary payments they have received since January 1, 2023, for employees who have received no salary payments prior to that date."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.Department = 'Sales' GROUP BY e.EmployeeID HAVING SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) > 80000","Find the first and last names of employees in the Sales department whose total compensation, including base salary, bonuses, and commissions, exceeds 80,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName, e.LastName HAVING SUM(s.BaseSalary) > 50000","Find the first and last names of employees whose total base salary from salaries exceeds 50,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalSalary FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.HireDate < '2020-01-01' GROUP BY e.EmployeeID HAVING TotalSalary > 60000","Find the Employee IDs and total salaries (including base salary, bonus, and commission) of employees who were hired before January 1, 2020, and whose total salary exceeds 60,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, COUNT(s.SalaryID) AS TotalPayments FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate IS NOT NULL GROUP BY e.FirstName ORDER BY TotalPayments DESC","Retrieve the first names of employees along with the total number of salary payments they have received, only including those payments that have a recorded payment date. Sort the results by the total number of payments in descending order, grouping by employee first names."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Department, SUM(s.BaseSalary + COALESCE(s.Bonus, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE e.EmployeeID > 1000 GROUP BY e.EmployeeID, e.Department","Calculate the total compensation, including base salary and any bonuses, for each employee along with their department, only for employees with IDs greater than 1000. Group the results by employee ID and department."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.Commission IS NOT NULL GROUP BY e.FirstName, e.LastName HAVING TotalCompensation > (SELECT AVG(BaseSalary) FROM salary_1003)","Retrieve the first and last names of employees who have received a commission, along with their total compensation (base salary plus bonus), and only include those whose total compensation exceeds the average base salary of all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, SUM(s.Commission) AS TotalCommission FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING SUM(s.Commission) > 0","Retrieve the employee IDs and the total commission earned by each employee during the year 2023, including only those employees who have earned a positive commission."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.Department HAVING COUNT(DISTINCT e.EmployeeID) > 5","Find the departments that have more than five distinct employees who received payments starting from January 1, 2023, and count how many distinct employees are in each of those departments."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM salary_1003 WHERE SalaryID = (SELECT MAX(SalaryID) FROM salary_1003),Find the Employee IDs of employees who have the highest salary record in the salary_1003 table.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01'","Find the first and last names of employees who have received a salary payment on or after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.FirstName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName HAVING SUM(s.BaseSalary) > 70000,"Find the first names of employees whose total base salary exceeds 70,000."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(s.Commission) > 1000","Find the employee IDs, first names, and last names of employees who have earned more than 1,000 in total commissions since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.BaseSalary + COALESCE(s.Bonus, 0) + COALESCE(s.Commission, 0)) AS TotalCompensation FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID WHERE s.PaymentDate >= '2023-01-01' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING TotalCompensation < 50000","Retrieve the employee ID, first name, last name, and total compensation (including base salary, bonus, and commission) for employees whose total compensation is less than $50,000 for payments made on or after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, SUM(s.BaseSalary) AS TotalDepartmentSalary FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING SUM(s.BaseSalary) > (SELECT AVG(BaseSalary) FROM salary_1003)","Identify the departments of employees and calculate the total base salary for each department, including only those departments where the total base salary exceeds the average base salary across all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.HireDate FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName, e.LastName, e.HireDate HAVING COUNT(s.SalaryID) > 3 ORDER BY e.HireDate","Retrieve the first names, last names, and hire dates of employees who have received more than three salary payments, sorted by their hire dates."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT s.PaymentDate) >= 5,Identify the Employee IDs of employees who have received salary payments on five or more different dates.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(s.SalaryID) AS PaymentCount FROM employee_1001 e LEFT JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID AND s.PaymentDate >= '2023-01-01' WHERE e.Department = 'Engineering' GROUP BY e.EmployeeID","Retrieve the first and last names of employees in the Engineering department, along with the count of their salary payments made since January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, COUNT(*) AS EmployeeCount FROM employee_1001 e JOIN salary_1003 s ON s.EmployeeID = e.EmployeeID GROUP BY e.Department",Count the number of employees in each department who have salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.FirstName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.FirstName HAVING AVG(s.BaseSalary) > (SELECT AVG(BaseSalary) FROM salary_1003),Find the names of employees whose average base salary is greater than the average base salary of all employees.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(s.BaseSalary) > (SELECT AVG(BaseSalary) FROM salary_1003)","Retrieve the IDs, first names, and last names of employees whose total base salary is greater than the average base salary of all employees."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(s.BaseSalary) > (SELECT AVG(BaseSalary) FROM salary_1003)","List the Employee IDs, first names, and last names of employees whose total base salary is higher than the average base salary, grouping the results by each employee."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Department, SUM(s.BaseSalary) AS TotalSalary FROM employee_1001 e INNER JOIN salary_1003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department HAVING SUM(s.BaseSalary) > (SELECT AVG(BaseSalary) FROM salary_1003)",Find the total base salary for each department and return only those departments where this total exceeds the average base salary from the salary records.
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT s.EmployeeID FROM salary_1003 s WHERE s.PaymentDate > '2023-01-01' GROUP BY s.EmployeeID HAVING SUM(s.BaseSalary) >= (SELECT AVG(BaseSalary) FROM salary_1003 WHERE PaymentDate > '2023-01-01'),"Identify the employee IDs of those who have accumulated a total base salary greater than or equal to the average base salary for payments made after January 1, 2023."
"CREATE TABLE salary_1003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""BaseSalary"" REAL,
  ""Bonus"" REAL,
  ""Commission"" REAL,
  ""PaymentDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT BaseSalary, Bonus, Commission, PaymentDate FROM salary_1003","Retrieve the base salary, bonuses, commissions, and payment dates of employees from the salary records."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email, Address FROM employee_contacts_1004;","Retrieve the phone numbers, email addresses, and physical addresses for every employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004;",Retrieve the phone numbers and email addresses of all employees from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Address FROM employee_contacts_1004 WHERE EmployeeID = 1;,Retrieve the address of the employee with ID 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, EmployeeID FROM employee_contacts_1004 WHERE PhoneNumber LIKE '%555%';",Find the contact IDs and employee IDs of employees whose phone numbers contain '555'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM employee_contacts_1004;,Get a list of unique employee IDs from the employee contacts table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,Count the total number of contacts in the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Email FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3);","Retrieve the email addresses of employees with IDs 1, 2, and 3."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 WHERE Address = 'specified address';",Find the contact IDs and phone numbers of employees who have the specified address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 ORDER BY ContactID;,"Retrieve all contact information for employees, sorted by their contact identification numbers."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;",Find the employee IDs and phone numbers of employees with non-null phone numbers.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004 WHERE EmployeeID = 2;,Count the total number of contact entries for the employee with Employee ID 2.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Email, PhoneNumber FROM employee_contacts_1004 WHERE ContactID < 5;",Retrieve the email addresses and phone numbers of contacts with a ContactID less than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Email LIKE '%@gmail.com',Find all employee contact details for those with a Gmail email address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ContactID FROM employee_contacts_1004 WHERE EmployeeID = (SELECT EmployeeID FROM employee_contacts_1004 WHERE ContactID = 1);,Retrieve the contact ID of the employee whose EmployeeID matches the EmployeeID of the contact with ContactID equal to 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM employee_contacts_1004 GROUP BY EmployeeID HAVING COUNT(*) > 1;,Identify the Employee IDs of employees who have more than one contact entry in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(ContactID) AS NumberOfContacts FROM employee_contacts_1004 GROUP BY EmployeeID;",Count the number of contact details for each employee based on their EmployeeID.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 ORDER BY PhoneNumber DESC;,Retrieve the phone numbers of all employees and list them in descending order.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT PhoneNumber FROM employee_contacts_1004 WHERE PhoneNumber != '',"Retrieve a list of unique phone numbers from the employee contacts, making sure to exclude any empty or null entries."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE ContactID BETWEEN 1 AND 10;,Retrieve all contact details for employees with ContactID numbers between 1 and 10.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004 WHERE Address LIKE '%Street%';",Retrieve the phone numbers and email addresses of employees who live on a street address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email, Address FROM employee_contacts_1004;","Retrieve the phone numbers, email addresses, and home addresses for every employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, PhoneNumber FROM employee_contacts_1004;",Retrieve the employee IDs and their phone numbers from the employee contacts database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Email FROM employee_contacts_1004 WHERE EmployeeID = 1;,Retrieve the email address of the employee with ID 1.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Address FROM employee_contacts_1004 WHERE ContactID = 5;,Retrieve the address of the employee contact with ContactID 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT EmployeeID FROM employee_contacts_1004;,Retrieve a list of unique Employee IDs from the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber, Email FROM employee_contacts_1004 WHERE Address LIKE '%Street%';",Find the phone numbers and email addresses of employees who live on a street.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_contacts_1004;,Count the total number of contact entries in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID = 2;",Retrieve the contact ID and phone number for the employee whose ID is 2.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL;,Retrieve all contact information for employees with a listed phone number.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS ContactCount FROM employee_contacts_1004 GROUP BY EmployeeID;",Count the number of contact records for each employee and list the Employee IDs along with their respective contact counts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Email FROM employee_contacts_1004 ORDER BY Email;,Retrieve all email addresses from the employee contacts and arrange them in alphabetical order.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE Address IS NOT NULL;,Retrieve all contact information for employees who have a non-null address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT PhoneNumber FROM employee_contacts_1004 WHERE EmployeeID IN (1, 2, 3);","Retrieve the phone numbers of employees with the IDs 1, 2, and 3."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM employee_contacts_1004 WHERE PhoneNumber LIKE '555%';,Find the Employee IDs of employees whose phone numbers begin with 555.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ContactID, Address FROM employee_contacts_1004 WHERE EmployeeID > 5;",Retrieve the contact IDs and addresses of employees with ID numbers greater than 5.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT PhoneNumber FROM employee_contacts_1004 WHERE LENGTH(PhoneNumber) >= 10,Retrieve the phone numbers of employees that have 10 or more digits.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ContactID FROM employee_contacts_1004 WHERE Email LIKE '%@example.com';,Retrieve the contact IDs of all employees whose email addresses end with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Address FROM employee_contacts_1004 WHERE EmployeeID = (SELECT MIN(EmployeeID) FROM employee_contacts_1004);,Retrieve the unique addresses of the employee with the lowest EmployeeID in the employee contacts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM employee_contacts_1004 WHERE PhoneNumber IS NOT NULL ORDER BY EmployeeID DESC;,"Retrieve all employee contact information for employees who have a phone number listed, and arrange the results by Employee ID in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT Email) FROM employee_contacts_1004;,Count the number of unique email addresses in the employee_contacts_1004 table.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.EmployeeID;","Retrieve the employee IDs and phone numbers of all employees, ordered by their employee IDs."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) >= 1","List the employee IDs of those employees who have at least one contact, along with the count of contacts for each employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ec.Email FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL,Retrieve the email addresses of employees who have provided a phone number.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec ORDER BY ec.EmployeeID ASC","Retrieve the employee IDs and their corresponding phone numbers from the employee contacts, listed in ascending order by employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Email FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%Street%',Retrieve the email addresses of employees who live at an address containing 'Street.'
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 2,List the Employee IDs of employees who have more than two contact records.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ec.Email FROM employee_contacts_1004 ec WHERE ec.Email <> '' ORDER BY ec.Email,"Retrieve a list of unique email addresses from the employee contacts where the email is not empty, and arrange the email addresses in alphabetical order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber LIKE '123%'",Find the Employee IDs and phone numbers of employees whose phone numbers start with '123'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.EmployeeID FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email IS NULL,Identify the Employee IDs of employees who do not have any associated email addresses in their contact information.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.Address FROM employee_contacts_1004 ec WHERE ec.Address IS NOT NULL",Retrieve the employee IDs and addresses of employees with a non-null address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.EmployeeID, ec.PhoneNumber","Retrieve the employee IDs and their corresponding phone numbers from the employee contacts, and list the results sorted by employee ID and phone number."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IN (SELECT PhoneNumber FROM employee_contacts_1004 GROUP BY PhoneNumber HAVING COUNT(DISTINCT EmployeeID) > 1)",Retrieve the Employee IDs and phone numbers of employees who share phone numbers with other employees.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.*, e.Name FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.EmployeeID = 101","Retrieve all contact information including phone numbers, email addresses, and addresses for the employee with ID 101, along with the employee's name."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.Email FROM employee_contacts_1004 ec WHERE ec.Email LIKE '%@example.com'",Retrieve the employee IDs and email addresses of employees from the employee_contacts_1004 table who have an email address ending with '@example.com'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT ec.Email) FROM employee_contacts_1004 ec WHERE ec.Email <> '',Count the number of unique non-empty email addresses in the employee contacts.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Email NOT LIKE '%gmail.com'","Retrieve the employee IDs, phone numbers, and email addresses of employees whose email addresses do not include 'gmail.com'."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ec.EmployeeID FROM employee_contacts_1004 ec WHERE ec.PhoneNumber IS NOT NULL GROUP BY ec.EmployeeID HAVING COUNT(ec.PhoneNumber) > 3,Retrieve the IDs of employees who have more than three non-null recorded phone numbers.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address LIKE '%City%'",Retrieve the Employee IDs and addresses of employees with addresses that contain the word 'City.'
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.ContactID FROM employee_contacts_1004 ec ORDER BY ec.ContactID DESC","Retrieve the contact IDs along with their corresponding employee IDs, and list them in descending order based on the contact ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL ORDER BY e.LastName","Retrieve the first and last names of employees who have a phone number listed, along with their phone numbers, sorted by the employees' last names."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, COUNT(ec.Email) AS ValidEmailCount FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID","Count the number of valid email addresses for each employee, and display this count along with each employee's ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL ORDER BY e.EmployeeID;","Retrieve the employee IDs and phone numbers of employees who have a non-null phone number in their contact information, sorted by employee ID."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, ec.PhoneNumber, ec.Email FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE e.Department = 'HR' AND ec.PhoneNumber IS NOT NULL","Retrieve the Employee IDs, phone numbers, and email addresses of employees who work in the HR department and have a non-null phone number."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, COUNT(ec.ContactID) AS NumberOfContacts FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ec.ContactID) > 2","Find the employee IDs of those employees who have more than two contact records, along with the count of their contact records."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.Email FROM employee_contacts_1004 ec WHERE ec.Email LIKE '%@company.com' AND ec.Address != ''",Find the Employee IDs and email addresses of employees who have a company email ending with '@company.com' and have a non-empty address string.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.PhoneNumber FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.HireDate > (SELECT MIN(HireDate) FROM employee_1001)",Retrieve the names and phone numbers of employees hired after the earliest hire date in the company.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber LIKE '555%'",Find the IDs and names of employees with a phone number that starts with '555'.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.PhoneNumber FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID ORDER BY e.Name ASC, ec.PhoneNumber DESC","Retrieve the names of employees along with their phone numbers, sorted by employee names in ascending order and phone numbers in descending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.Email FROM employee_1001 e INNER JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE e.Department = 'Finance'",Retrieve the names and email addresses of employees who work in the Finance department and have contact information listed.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Address, COUNT(ec.ContactID) AS ContactCount FROM employee_contacts_1004 ec GROUP BY ec.Address HAVING COUNT(ec.ContactID) > 1",Identify the addresses that have more than one employee contact associated with them and count the number of contacts for each of those addresses.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e JOIN employee_contacts_1004 ec ON ec.EmployeeID = e.EmployeeID WHERE ec.PhoneNumber IS NOT NULL",Retrieve the IDs and names of employees who have a phone number listed in their contact information.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Name HAVING COUNT(DISTINCT ec.Email) > 1,Find the names of employees who have more than one unique email address.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, COUNT(ec.PhoneNumber) AS TotalPhoneNumbers FROM employee_contacts_1004 ec GROUP BY ec.EmployeeID HAVING COUNT(ec.PhoneNumber) >= (SELECT AVG(PhoneCount) FROM (SELECT COUNT(*) AS PhoneCount FROM employee_contacts_1004 GROUP BY EmployeeID))","Identify the employees who have a count of phone numbers greater than or equal to the average count of phone numbers across all employees, and list their Employee ID along with the total number of phone numbers they possess."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, ec.Address FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.Address IS NOT NULL ORDER BY ec.Address ASC","Retrieve the names and addresses of employees who have a listed address, sorting the results by address in ascending order."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL OR ec.Email IS NOT NULL",Find the employee IDs and names of employees who have a phone number or an email address in their contact information.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, COUNT(ec.ContactID) AS ContactCount FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Name","Retrieve the names of employees who have contact information, along with the count of contact details associated with each employee."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.EmployeeID, ec.PhoneNumber FROM employee_contacts_1004 ec WHERE ec.Email IS NULL",Retrieve the Employee IDs and phone numbers of employees who do not have an email address listed.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID GROUP BY e.Name HAVING COUNT(ec.ContactID) > 3,Identify the names of employees who have more than three contact details listed in the contact database.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ec.Email, COUNT(*) FROM employee_contacts_1004 ec GROUP BY ec.Email HAVING COUNT(*) > 1",Identify the email addresses of employees that have more than one contact entry and count how many times each email address appears.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ec.PhoneNumber FROM employee_contacts_1004 ec JOIN employee_1001 e ON ec.EmployeeID = e.EmployeeID WHERE ec.PhoneNumber LIKE '123%' AND e.Location IN (SELECT Location FROM employee_1001 WHERE Department = 'IT'),Find the phone numbers of employees who have phone numbers starting with '123' and work in the same locations as those in the IT department.
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, ec.PhoneNumber FROM employee_1001 e LEFT JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE (ec.PhoneNumber IS NOT NULL AND e.Status = 'Active') OR e.HireDate < '2020-01-01'","Retrieve the Employee IDs and names of active employees who have a phone number listed, or who were hired before January 1, 2020, and include their phone numbers."
"CREATE TABLE employee_contacts_1004 (
  ""ContactID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""PhoneNumber"" TEXT,
  ""Email"" TEXT,
  ""Address"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, MAX(ec.PhoneNumber) FROM employee_1001 e JOIN employee_contacts_1004 ec ON e.EmployeeID = ec.EmployeeID WHERE ec.PhoneNumber IS NOT NULL GROUP BY e.Name",Retrieve the names of employees along with their maximum non-empty phone number.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, EmployeeID, ProjectName, StartDate, EndDate, Role FROM project_assignments_1005","Retrieve the assignment ID, employee ID, project name, start date, end date, and role for each project assignment."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005,List all project names from the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName = 'Project A'",Find the Employee IDs and their roles for all employees assigned to 'Project A'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ProjectName FROM project_assignments_1005,List the distinct project names from the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005,Count the total number of project assignments in the database.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT StartDate FROM project_assignments_1005 WHERE EmployeeID = 1,Retrieve the start dates of projects assigned to the employee with ID 1.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EndDate FROM project_assignments_1005 WHERE AssignmentID = 2,Retrieve the end date of the assignment with AssignmentID 2.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT Role FROM project_assignments_1005 WHERE EmployeeID = 3 AND ProjectName = 'Project B',Retrieve the role of employee ID 3 assigned to 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE StartDate <= CURRENT_TIMESTAMP AND (EndDate IS NULL OR EndDate > CURRENT_TIMESTAMP)","List the Employee IDs and project names for assignments that are currently ongoing, meaning their start date is in the past and their end date is either not set or in the future."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, EmployeeID FROM project_assignments_1005 ORDER BY StartDate DESC","Retrieve the assignment IDs and employee IDs from the project assignments table, listed in order of start date from the most recent to the oldest."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE Role = 'Manager',Count the number of project assignments where the role is 'Manager'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT AssignmentID, ProjectName FROM project_assignments_1005 WHERE StartDate > '2023-01-01'","Retrieve the Assignment IDs and Project names for projects that started after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE Role LIKE '%Developer%',Retrieve all project assignments where the role includes the term 'Developer.'
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY ProjectName","List each project name along with the number of employees assigned to that project, labeled as EmployeeCount."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(ProjectName) AS ProjectCount FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(ProjectName) > 1",Identify the employees assigned to more than one project and count the number of projects for each employee.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE EndDate < StartDate,Find all project assignments where the end date is earlier than the start date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT AVG(StartDate) FROM project_assignments_1005,Calculate the average starting date of all project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID FROM project_assignments_1005 WHERE ProjectName IN ('Project A', 'Project B')",Find the employee IDs assigned to 'Project A' or 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName",List the names of each project along with the latest end date of assignments for those projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM project_assignments_1005 WHERE Role = 'Team Lead' ORDER BY AssignmentID ASC,"List the Employee IDs of all individuals with the role of 'Team Lead', ordered by their Assignment IDs in ascending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ProjectName FROM project_assignments_1005 WHERE EmployeeID IS NOT NULL,Retrieve the distinct names of all projects that have been assigned to employees.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, Role, StartDate, EndDate FROM project_assignments_1005","Retrieve the Employee IDs, project names, roles, and the start and end dates of assignments made to employees."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005;,"Retrieve all details about project assignments, including assignment ID, employee ID, project name, start date, end date, and role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE Role = 'Developer';,Retrieve the names of projects where the role assigned is 'Developer'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT StartDate, EndDate FROM project_assignments_1005 WHERE EmployeeID = 1;",Retrieve the start and end dates of the projects assigned to the employee with ID 1.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005;,Retrieve the unique roles of employees in project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE ProjectName = 'Project A';,Count the total number of assignments for the project named 'Project A'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL;",Retrieve the Employee IDs and Project names for assignments that have a non-null end date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName;",List the names of projects along with the number of assignments for each project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 ORDER BY StartDate DESC;","Retrieve the Employee IDs and project names from the project assignments, ordering them by the most recent start dates first."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01',"Retrieve all project assignments that started on or after January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS AssignmentCount FROM project_assignments_1005 GROUP BY Role;","Count how many assignments there are for each role in the project assignments, and provide the count for each role."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE StartDate < EndDate;",Find the Employee IDs and their roles for assignments where the Start Date is before the End Date.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ProjectName FROM project_assignments_1005 WHERE EmployeeID IN (SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 1);,List the distinct names of projects that have been assigned to employees who are involved in more than one project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE Role LIKE 'M%'",Find the employee IDs and project names for all assignments where the role begins with the letter 'M'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MIN(StartDate) AS EarliestAssignmentDate FROM project_assignments_1005 GROUP BY EmployeeID;",Find the earliest assignment date for each employee.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT ProjectName FROM project_assignments_1005 WHERE EmployeeID IN (SELECT EmployeeID FROM project_assignments_1005 WHERE ProjectName = 'Project B'),Find all distinct project names assigned to employees who are working on 'Project B'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT EmployeeID FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(*) > 3;,Identify the Employee IDs of employees assigned to more than three projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE EndDate IS NULL;,Retrieve all project assignments where the end date is null.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) FROM project_assignments_1005 GROUP BY ProjectName HAVING MAX(EndDate) < '2023-12-31'","List the names of projects and their latest end dates, including only those projects where the latest end date is before December 31, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE AssignmentID BETWEEN 1 AND 10;",Retrieve the employee IDs and project names for assignments with Assignment IDs between 1 and 10.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01' AND StartDate < '2024-01-01';,Retrieve all project assignments that started in the year 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS TotalAssignments FROM project_assignments_1005 GROUP BY ProjectName;",List the names of projects along with the total number of assignments for each project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 WHERE EndDate > CURRENT_TIMESTAMP;","Retrieve the Employee IDs, Project names, and Start dates of all ongoing projects that have a future end date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) FROM project_assignments_1005 GROUP BY Role HAVING COUNT(*) > 5;","Identify the roles in the project assignments and count how many employees are assigned to each role, including only roles with more than five employees assigned."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MIN(StartDate) AS EarliestStart FROM project_assignments_1005 GROUP BY ProjectName;",Find the earliest start date for each project by listing the project names along with their earliest start dates.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID ORDER BY TotalProjects DESC;",Count and list the total number of projects assigned to each employee in descending order.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName;",Calculate the average duration of projects by finding the average length of time from the start date to the end date for each project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE StartDate > '2023-01-01' ORDER BY StartDate;","Retrieve the Employee ID and their roles for all project assignments that started after January 1, 2023, and list them in chronological order of their start dates."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS UniqueProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(DISTINCT ProjectName) > 3;",Identify the employees who have worked on more than three distinct projects and list their employee IDs along with the count of unique projects they have contributed to.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE StartDate < '2023-06-01' GROUP BY ProjectName;","List the names of projects and the number of assignments for each project that started before June 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) FROM project_assignments_1005 WHERE strftime('%Y', StartDate) = '2023' GROUP BY Role;",Count the number of project assignments for each role where the assignments started in 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005 WHERE EndDate IS NOT NULL;,List all unique roles of employees who have completed their project assignments (defined as having a non-null EndDate).
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, SUM(julianday(EndDate) - julianday(StartDate)) AS TotalDays FROM project_assignments_1005 GROUP BY EmployeeID;",Calculate the total number of days each employee has worked on projects by summing the differences between the start and end dates of their assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MAX(EndDate) AS LatestEnd FROM project_assignments_1005 GROUP BY ProjectName;",Retrieve the names of each project along with the latest end date of those projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 WHERE Role = 'Manager';,Count the number of distinct employees with the role of 'Manager' in the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, Role FROM project_assignments_1005 WHERE EndDate > '2023-01-01' ORDER BY ProjectName;","List the project names and roles of active assignments, meaning those whose end date is after January 1, 2023, ordered by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE Role = 'Developer' GROUP BY EmployeeID;",Count the number of project assignments for each employee with the role of 'Developer'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS AssignmentNumber FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(*) > 2;","Identify the names of projects that have more than two assignments, and count the number of assignments for each project."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, StartDate FROM project_assignments_1005 WHERE Role IN ('Developer', 'Tester') ORDER BY StartDate;","Retrieve the project names and their start dates for employees with the roles of Developer or Tester, ordered by the projects' start dates."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE ProjectName = 'Project X' AND StartDate < '2023-01-01';","Find the employee IDs and their roles for assignments to 'Project X' that started before January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(*) FROM project_assignments_1005 WHERE ProjectName LIKE '%Alpha%',Count the total number of project assignments that include 'Alpha' in their project name.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(*) > 1",Identify the project names that have more than one assignment and provide the count of assignments for each of those projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY EmployeeID",Find the latest end date of project assignments for each employee.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName, StartDate FROM project_assignments_1005 WHERE EndDate IS NULL","List the Employee IDs, project names, and start dates of all ongoing assignments where the end date is not specified."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(*) AS NumberOfAssignments FROM project_assignments_1005 GROUP BY Role ORDER BY NumberOfAssignments DESC",Count the number of project assignments for each role and list them in descending order of assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(DISTINCT ProjectName) AS TotalProjects FROM project_assignments_1005 GROUP BY EmployeeID HAVING COUNT(DISTINCT ProjectName) > 3",Identify the employees who have been assigned to more than three distinct projects and count how many distinct projects each has worked on.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, AVG(julianday(EndDate) - julianday(StartDate)) AS AverageDuration FROM project_assignments_1005 GROUP BY ProjectName","Calculate the average duration of each project by finding the difference between the start and end dates, and group the results by project name."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT * FROM project_assignments_1005 WHERE StartDate >= '2023-01-01' AND StartDate < '2024-01-01' ORDER BY StartDate,"Retrieve all project assignments that started in the year 2023, listed in chronological order by their start date."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS TotalAssignments FROM project_assignments_1005 WHERE Role = 'Manager' GROUP BY EmployeeID HAVING COUNT(*) > 2","Identify the employees with the role of 'Manager' and count their assignments, including only those with more than two assignments."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE ProjectName LIKE 'Alpha%'",Retrieve the IDs and names of projects assigned to employees whose project names begin with 'Alpha'.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 WHERE Role IN ('Developer', 'Designer') ORDER BY EmployeeID","Retrieve the Employee IDs and their roles for employees with the roles of Developer or Designer, and organize the results by Employee ID."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 GROUP BY ProjectName HAVING SUM(julianday(EndDate) - julianday(StartDate)) > 30,Find the names of projects that have a total duration of more than 30 days calculated by the difference between their start and end dates.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) AS NumberOfDistinctEmployees FROM project_assignments_1005,Count the number of distinct employees assigned to projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, COUNT(*) AS AssignmentsCount FROM project_assignments_1005 WHERE StartDate < '2023-01-01' GROUP BY EmployeeID HAVING COUNT(*) > 5","Find the Employee IDs of employees with more than five assignments to projects that started before January 1, 2023, and include the count of those assignments."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, MIN(StartDate) AS EarliestStartDate, MAX(EndDate) AS LatestEndDate FROM project_assignments_1005 GROUP BY ProjectName",Get the project names along with the earliest start date and the latest end date for each project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, Role FROM project_assignments_1005 GROUP BY EmployeeID, Role HAVING COUNT(*) > 2",Identify the Employee IDs and their roles for employees who have been assigned to more than two projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ProjectName, COUNT(EmployeeID) AS EmployeesOnProject FROM project_assignments_1005 GROUP BY ProjectName ORDER BY EmployeesOnProject DESC","List the names of projects along with the count of employees assigned to each project, ordered from the project with the highest number of employees to the lowest."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT Role FROM project_assignments_1005,List all unique roles of employees in their project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, (julianday(MAX(EndDate)) - julianday(MIN(StartDate))) AS TotalDuration FROM project_assignments_1005 GROUP BY EmployeeID HAVING TotalDuration > 10","Find the IDs of employees who have worked on projects for more than 10 days in total, along with the total duration of their projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT Role, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM project_assignments_1005 GROUP BY Role",Count the number of distinct employees for each role in the project assignments.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE EndDate < '2023-01-01'","Find the Employee IDs and project names for all projects that ended before January 1, 2023."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT ProjectName FROM project_assignments_1005 WHERE EndDate IS NOT NULL ORDER BY EndDate DESC;,"List the names of the projects that have been completed, sorted from the most recent completion date to the earliest."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT ea.EmployeeID, ea.ProjectName, ea.Role FROM project_assignments_1005 ea WHERE ea.StartDate < (SELECT MAX(EndDate) FROM project_assignments_1005 WHERE EmployeeID = ea.EmployeeID)","List the Employee IDs, Project names, and Roles of employees whose project start dates are earlier than their most recent project end dates."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT pa.EmployeeID FROM project_assignments_1005 pa GROUP BY pa.EmployeeID HAVING COUNT(pa.AssignmentID) > 5,Find the IDs of employees who have been assigned to more than five projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT pa.EmployeeID, e.Name, COUNT(pa.AssignmentID) as ProjectCount FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.EndDate IS NOT NULL GROUP BY pa.EmployeeID, e.Name HAVING COUNT(pa.AssignmentID) > 3 ORDER BY ProjectCount DESC","Retrieve the Employee IDs and names of employees who have completed more than three projects, showing the count of projects each has completed, sorted from the most to least completed projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, SUM(JULIANDAY(pa.EndDate) - JULIANDAY(pa.StartDate)) AS TotalDays FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name HAVING TotalDays > 30","List the names of employees who have worked on projects for more than 30 total days, along with the total number of days they spent on those projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, pa.ProjectName FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.Role = 'Manager' AND pa.StartDate >= '2023-01-01' AND pa.StartDate < '2024-01-01'","Retrieve the employee IDs and names of employees who have been assigned the role of 'Manager' on any project that started in the year 2023, along with the names of those projects."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT pa.EmployeeID, e.Name FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.Role = 'Developer' GROUP BY pa.EmployeeID, e.Name HAVING COUNT(*) > 10",Identify the IDs and names of employees with the role of Developer who have worked on more than 10 projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name, pa.ProjectName, pa.StartDate FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.EndDate IS NULL ORDER BY pa.StartDate ASC","Retrieve the Employee IDs and names of employees who are currently assigned to projects with no end date, along with the project names and their start dates, and arrange the results by the start date of the projects in ascending order."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT pa.ProjectName, e.Name FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.ProjectName IN (SELECT ProjectName FROM project_assignments_1005 GROUP BY ProjectName HAVING COUNT(EmployeeID) > 1)",Find the names of projects and the names of employees working on projects that have more than one employee assigned.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT pa.EmployeeID, COUNT(pa.ProjectName) AS CompletedProjects FROM project_assignments_1005 pa WHERE pa.EndDate < NOW() GROUP BY pa.EmployeeID HAVING COUNT(pa.ProjectName) > 2","Identify the Employee IDs of employees who have completed more than two projects before the current date, and show the count of those completed projects for each employee."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, pa.Role FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.StartDate >= '2023-01-01' AND pa.EndDate <= '2023-12-31' ORDER BY e.Name, pa.ProjectName","Retrieve the names of employees along with their roles in projects that started and ended in the year 2023, and organize the results by employee names and project names."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, ProjectName FROM project_assignments_1005 WHERE julianday(EndDate) - julianday(StartDate) > 30",Find the Employee IDs and Project names for assignments that lasted longer than 30 days.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT e.Name FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name HAVING COUNT(pa.AssignmentID) = 0,Find the names of employees who are not assigned to any projects.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT EmployeeID, GROUP_CONCAT(ProjectName) AS ProjectsAssigned FROM project_assignments_1005 WHERE ProjectName = 'Project A' GROUP BY EmployeeID","Identify the employee IDs and the names of all projects they have been assigned to, specifically focusing on those who have worked on 'Project A'."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT DISTINCT pa.ProjectName FROM project_assignments_1005 pa JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE e.HireDate < '2022-01-01',"List the unique project names assigned to employees hired before January 1, 2022."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID WHERE pa.EndDate IS NULL GROUP BY e.EmployeeID HAVING COUNT(pa.AssignmentID) > 1",Find the IDs and names of employees who are currently assigned to more than one project.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, pa.Role FROM employee_1001 e JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name, pa.Role HAVING AVG(DATEDIFF(pa.EndDate, pa.StartDate)) > 30",Find the names and roles of employees whose average duration of project assignments is greater than 30 days.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT a.EmployeeID FROM project_assignments_1005 a WHERE a.StartDate >= '2023-01-01' AND a.StartDate < '2024-01-01' GROUP BY a.EmployeeID HAVING COUNT(*) >= 5,Identify the Employee IDs of employees who have been assigned to projects at least five times during the year 2023.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.Name, MAX(pa.StartDate) as LastProjectStart FROM employee_1001 e LEFT JOIN project_assignments_1005 pa ON e.EmployeeID = pa.EmployeeID GROUP BY e.Name HAVING MAX(pa.StartDate) IS NULL OR MAX(pa.StartDate) < NOW() - INTERVAL 1 YEAR","Find the names of employees who have not started any project in the last year or do not have any project assigned, along with the start date of their most recent project."
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
",SELECT pa.ProjectName FROM project_assignments_1005 pa LEFT JOIN employee_1001 e ON pa.EmployeeID = e.EmployeeID WHERE pa.EndDate IS NULL GROUP BY pa.ProjectName HAVING COUNT(e.EmployeeID) > 5,Find the names of projects that currently have more than five employees assigned to them.
"CREATE TABLE project_assignments_1005 (
  ""AssignmentID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  ""Role"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT pa.EmployeeID FROM project_assignments_1005 pa WHERE pa.EndDate IS NULL);",Find the IDs and names of employees who are not currently assigned to any projects that have no end date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001;",Retrieve the unique IDs and names of all departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001;",List the IDs and names of all departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002;,"Retrieve all records from the employee department assignments, including all details."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002;",Retrieve the Employee IDs and the corresponding Department IDs they are associated with.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1;,Retrieve the name of the department with ID 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, DepartmentID FROM employee_department_2002;",Retrieve the Employee IDs and their corresponding Department IDs for employees working in various departments without filtering by specific departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d1.DepartmentName, e1.EmployeeID FROM department_2001 d1 JOIN employee_department_2002 e1 ON d1.DepartmentID = e1.DepartmentID WHERE e1.StartDate IS NOT NULL;",Retrieve the names of departments along with the IDs of employees who have a start date indicating they work in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT DepartmentID FROM employee_department_2002;,List all unique department IDs from the employee department records.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM department_2001;,Count the total number of departments in the department_2001 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName;","List the names of all departments along with the count of employees associated with each department, including those without employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE ManagerID IS NULL;,Find the names of departments that do not have a manager assigned.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentID FROM employee_department_2002 GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 5;,Identify the department IDs with more than five associated employees.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName, ManagerID FROM department_2001 WHERE ManagerID = 100;",Find the names of departments and their manager IDs for departments managed by the employee with the ID 100.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.EndDate IS NULL;","Retrieve the employee IDs and the names of the departments for employees who are currently active, meaning their end date is not listed."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE StartDate >= '2023-01-01';,"List the IDs of employees who started working in the department on or after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, COUNT(EmployeeID) AS NumberOfEmployees FROM employee_department_2002 GROUP BY DepartmentID;",Count the number of employees in each department and return their department IDs along with the employee counts.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT * FROM department_2001 WHERE DepartmentID IN (1, 2, 3);","Retrieve all details of the departments with IDs 1, 2, and 3."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;",List the names of departments that have employees and the number of employees in each department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.StartDate < e.EndDate;,Find the IDs of employees whose start date in their department is earlier than their end date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentID ORDER BY EmployeeCount DESC;","Count the number of employees in each department, listing the department names in order from the highest to lowest number of employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM department_2001;,Retrieve all information about the departments in the year 2001.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE DepartmentID = 1;,Retrieve the name of the department with DepartmentID 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT * FROM employee_department_2002 WHERE EndDate IS NULL;,Retrieve all records of employees in departments where their employment has not yet ended.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, COUNT(EmployeeID) FROM employee_department_2002 GROUP BY DepartmentID;",Count the number of employees in each department according to their records from 2002.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID;",Retrieve the employee IDs along with the names of the departments they belong to.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT DepartmentName FROM department_2001;,List all unique department names.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE StartDate > '2023-01-01';,"Find the employee IDs of those who started their position in a department after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID;","List the names of all departments along with the employee IDs of those who have worked in each department, including departments that may not have any employees assigned to them."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(*) FROM employee_department_2002 WHERE StartDate < '2022-01-01';,"Count the number of employees who started in their department before January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT ManagerID FROM department_2001;,Retrieve a list of unique Manager IDs from the department_2001 records.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentName FROM department_2001 WHERE ManagerID IS NOT NULL;,List the names of departments that have an assigned manager.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, COUNT(DISTINCT DepartmentID) FROM employee_department_2002 GROUP BY EmployeeID;",Count the number of different departments each employee has worked in.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentID FROM employee_department_2002 WHERE EndDate < '2021-12-31';,"Find the Department IDs of employees who ended their employment in their departments before December 31, 2021."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentID, DepartmentName FROM department_2001 ORDER BY DepartmentName ASC;",Retrieve the IDs and names of all departments in alphabetical order by department name.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 WHERE DepartmentID = 2 AND EndDate IS NULL;,Retrieve the list of Employee IDs for those currently employed in department number 2 without an end date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.StartDate < CURRENT_TIMESTAMP;",Retrieve the employee IDs and department names of employees who started working in a department before the current date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM employee_department_2002 WHERE DepartmentID = 1;,Count the distinct number of employees who belong to department 1.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName;","List the names of departments and the count of employees associated with each department, including those with no employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DepartmentID FROM department_2001 WHERE ManagerID = 5;,Retrieve the IDs of departments with a manager whose ID is 5.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT EmployeeID, StartDate FROM employee_department_2002 WHERE EndDate IS NULL ORDER BY StartDate DESC;","Retrieve the Employee IDs and start dates of employees who are currently working in a department, sorted by start date in descending order."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT DepartmentName FROM department_2001 WHERE DepartmentID IN (1, 2, 3);","Retrieve the names of departments with IDs 1, 2, or 3."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 5",List the names of departments and their employee counts for departments that have more than five employees.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE e.ManagerID IS NOT NULL",Retrieve the IDs of employees and the names of their departments for employees who have an assigned manager.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(ed.StartDate) AS FirstEmployeeStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName","Identify the earliest start date of employees in each department, listing the department names alongside these start dates."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName ORDER BY AverageSalary DESC","Calculate and list the average salary of employees in each department, including department names, sorted from highest to lowest average salary."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID WHERE ed.EndDate IS NULL",Retrieve the IDs and names of employees who are currently assigned to a department (where their assignment has not ended).
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC","Count the number of employees in each department and list the department names along with their employee counts, sorted from most employees to least."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, COUNT(ed.DepartmentID) AS DepartmentCount FROM employee_department_2002 ed GROUP BY ed.EmployeeID HAVING COUNT(ed.DepartmentID) > 1","Identify the employees and count how many departments each has worked in, only for those who have worked in more than one department."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.StartDate) AS RecentStartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",Retrieve the names of departments along with the most recent start date of employees who joined those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.ManagerID, COUNT(ed.EmployeeID) AS ManagedEmployees FROM employee_department_2002 ed JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY e.ManagerID HAVING COUNT(ed.EmployeeID) > 3","Identify the manager IDs of managers who oversee more than three employees, along with the count of employees they manage."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d JOIN employee_1001 e ON d.ManagerID = e.EmployeeID WHERE e.Salary > 60000,"Retrieve the names of departments managed by employees earning more than 60,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT COUNT(DISTINCT ed.EmployeeID) AS UniqueEmployees FROM employee_department_2002 ed WHERE ed.StartDate > '2023-01-01',"Count the number of unique employees who started in a department after January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName, ed.StartDate FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate IS NULL ORDER BY ed.StartDate","Retrieve the employee IDs, department names, and start dates for employees who are currently in a department (where their end date is not specified) and list the results in order of their start dates."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) BETWEEN 2 AND 5",List the names of departments along with the count of employees in each department that have between 2 and 5 employees assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, COUNT(DISTINCT ed.DepartmentID) FROM employee_department_2002 ed GROUP BY ed.EmployeeID ORDER BY COUNT(DISTINCT ed.DepartmentID) DESC","Count how many different departments each employee has worked in, listing the employees in order from most to least departments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate IS NOT NULL",List the names of departments along with the IDs of employees who have ended their employment in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.Name FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT ed.EmployeeID FROM employee_department_2002 ed WHERE ed.EndDate IS NULL)",List the employee IDs and names of all employees who are not currently assigned to any department according to the employee_department_2002 table.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName","List the names of all departments along with the count of employees in each department, including those departments that may have no employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS ActiveEmployees FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate IS NULL GROUP BY d.DepartmentName","List the names of departments and the count of currently active employees in each department, including only those departments that have employees with no recorded end date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate < '2023-01-01' AND ed.EndDate > '2023-01-01'","Find the employee IDs and department names of employees who were in a department whose tenure started before January 1, 2023, and continued after that date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 50000","Retrieve the names of departments and the average salary of employees in those departments where the average salary exceeds 50,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName","List the names of departments along with the number of employees assigned to each department, including only those departments that have at least one employee."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE d.ManagerID IS NOT NULL",Retrieve the names of departments with managers and the IDs of employees working in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS TotalEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalEmployees DESC","Retrieve the names of departments and count how many employees work in each department, then order the results by the number of employees in descending order."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID, ed.StartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate IS NULL",Retrieve the names of departments and the employee IDs and start dates of employees who are currently active in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 60000","Find the names of departments and the average salary of their employees, only including departments where the average salary is greater than 60,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(ed.StartDate) AS EarliestStartDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName",Retrieve the names of each department along with the earliest start date of an employee who joined that department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT DISTINCT d.DepartmentName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate < '2023-01-01',"List the distinct names of departments that had employees starting work before January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EmployeeID IS NULL,List the names of departments that have no employees assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.ManagerID, COUNT(ed.EmployeeID) AS ManagedEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.ManagerID HAVING COUNT(ed.EmployeeID) > 5",Identify the managers who supervise more than five employees in their departments and count how many employees each manager supervises.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT ed.EmployeeID, d.DepartmentName FROM employee_department_2002 ed JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.EndDate > ed.StartDate",Retrieve the employee IDs and department names for employees who have worked in a department during a period where the end date is later than the start date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID JOIN employee_1001 e ON ed.EmployeeID = e.EmployeeID GROUP BY d.DepartmentName","Retrieve the total salary of employees, grouped by department name, for all departments."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.StartDate < '2022-01-01' GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) >= 3","Count the number of employees in each department who started working before January 1, 2022, and list the department names that have at least three employees."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID, ed.StartDate, ed.EndDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID WHERE ed.EndDate < '2023-01-01'","Find the names of departments, the IDs of employees, and the start and end dates of their employment, for employees who have left their positions before January 1, 2023."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT ed.EmployeeID) AS UniqueEmployees FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName",List the names of departments and count the unique employees in each department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(ed.EmployeeID) > 2 AND d.ManagerID IS NOT NULL,Retrieve the names of departments that have more than two employees assigned and also have a manager.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT ed.EmployeeID FROM employee_department_2002 ed GROUP BY ed.EmployeeID HAVING COUNT(ed.DepartmentID) > 1,List the IDs of employees who are assigned to multiple departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(ed.EndDate) AS LatestEndDate FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName","List the names of the departments along with the most recent end date of employee assignments in those departments, ensuring to group by department ID."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName, ed.StartDate FROM employee_1001 e JOIN employee_department_2002 ed ON e.EmployeeID = ed.EmployeeID JOIN department_2001 d ON ed.DepartmentID = d.DepartmentID WHERE ed.StartDate = (SELECT MIN(StartDate) FROM employee_department_2002 WHERE EmployeeID = e.EmployeeID)","Retrieve the employee IDs, department names, and start dates for each employee, focusing on the earliest department they joined based on their records."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, ed.EmployeeID FROM department_2001 d JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName, ed.EmployeeID HAVING COUNT(ed.DepartmentID) > 1",List the names of departments along with the IDs of employees who have worked in more than one department.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(ed.EmployeeID) AS EmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 ed ON d.DepartmentID = ed.DepartmentID GROUP BY d.DepartmentName ORDER BY COUNT(ed.EmployeeID) DESC","List the names of all departments along with the count of employees in each department, ordered by the employee count from highest to lowest."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.DepartmentID, e.StartDate FROM employee_department_2002 e WHERE e.EndDate IS NULL AND e.StartDate < '2022-01-01'","Retrieve the employee IDs, department IDs, and start dates of employees who are currently in a department (i.e., have no end date) and started before January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID IS NOT NULL",Retrieve the employee IDs and department names for departments that have a manager assigned.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.StartDate, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE e.StartDate BETWEEN '2021-01-01' AND '2022-01-01'","Retrieve the employee IDs and their start dates along with the department names for all employees who started in a department between January 1, 2021, and January 1, 2022."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EndDate IS NOT NULL",Retrieve the names of departments along with the IDs of employees who have left their positions (where an EndDate exists) in those departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, COUNT(e.DepartmentID) AS DepartmentCount FROM employee_department_2002 e GROUP BY e.EmployeeID HAVING COUNT(e.DepartmentID) > 1","Identify the employees and count the number of departments each of them belongs to, focusing on those who belong to more than one department."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, d.DepartmentName FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID = e.EmployeeID",Retrieve the Employee IDs and department names for employees who are the managers of their corresponding departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS ActiveEmployeeCount FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID WHERE e.EndDate IS NULL GROUP BY d.DepartmentID, d.DepartmentName","List the names of departments along with the count of currently active employees in each department, where an active employee is defined as having no specified end date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT e.EmployeeID FROM employee_department_2002 e WHERE e.EndDate IS NOT NULL AND e.StartDate < e.EndDate,Find the IDs of employees who have a recorded end date for their department assignment and whose start date is before that end date.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MAX(e.StartDate) AS LatestStartDate FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName","Find the latest start date for employees in each department along with the corresponding department names, ensuring each department is represented."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT EmployeeID FROM employee_department_2002 GROUP BY EmployeeID HAVING COUNT(DISTINCT DepartmentID) > 1,Identify the IDs of employees who have worked in multiple departments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
",SELECT d.DepartmentName FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(DISTINCT e.EmployeeID) > 5,Retrieve the names of departments that have more than five unique employees assigned to them.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.DepartmentID FROM employee_department_2002 e JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID IS NOT NULL",Find the Employee IDs and Department IDs of employees working in departments that have a manager assigned.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentID, e.EmployeeID FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY e.EmployeeID HAVING COUNT(e.DepartmentID) = 1",Find the department IDs and employee IDs for employees assigned to only one department without any other department assignments.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentID, AVG(e.salary) AS AvgSalary FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID HAVING AVG(e.salary) > 60000","Find the average salary of employees in each department and identify the departments where the average salary exceeds 60,000."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT e.EmployeeID, e.DepartmentID FROM employee_department_2002 e LEFT JOIN department_2001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL",List the EmployeeIDs and DepartmentIDs of employees associated with departments that no longer exist.
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS CurrentlyActive FROM department_2001 d LEFT JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID AND e.EndDate IS NULL GROUP BY d.DepartmentName","List the names of all departments and the count of currently active employees in each department, defined as employees without an end date."
"CREATE TABLE department_2001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT,
  ""ManagerID"" INTEGER,
  FOREIGN KEY (""ManagerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_department_2002 (
  ""EmployeeID"" INTEGER,
  ""DepartmentID"" INTEGER,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""DepartmentID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""DepartmentID"") REFERENCES department_2001(""DepartmentID"")
)
","SELECT d.DepartmentName, MIN(e.StartDate) AS EarliestStartDate FROM department_2001 d JOIN employee_department_2002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EarliestStartDate ASC","List the names of departments along with the earliest start date of any employee in each department, ordered by the earliest start date in ascending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003;,Retrieve all details about the projects from the year 2003.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, ProjectName FROM project_2003;",List the Project IDs and names of all projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT StartDate, EndDate FROM project_2003 WHERE ProjectID = 1;",Get the start and end dates for the project that has an ID of 1.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004;,"Retrieve all the information about the employee assignments to projects in 2004, including employee ID, project ID, and their roles."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Developer';",Find the Employee IDs and Project IDs for employees who have the role of 'Developer'.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004;,List all unique roles that employees have on projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY ProjectID;","Count the number of employees assigned to each project, grouped by project."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE AssignmentStart > '2023-01-01'","Retrieve the Employee IDs and Project IDs for all employees who started their assignments on projects after January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE StartDate < '2022-01-01';,"Find the names of projects that started before January 1, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, Role FROM employee_projects_2004 WHERE AssignmentEnd > CURRENT_TIMESTAMP;","Find the Project IDs and roles of employees who are currently assigned to projects, where their assignment is still ongoing."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID;",Retrieve the names of projects and the roles of employees assigned to those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003 WHERE EndDate > '2023-01-01';,"List all projects that have not yet ended as of January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_projects_2004 WHERE EmployeeID = 123;,Count the number of projects assigned to the employee with ID 123.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID;",Count the number of projects assigned to each employee.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectName LIKE '%Project%';,Find the names of projects that contain the word 'Project' in their title.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT EmployeeID FROM employee_projects_2004 WHERE Role = 'Manager' AND AssignmentStart < '2023-01-01';,"Find the IDs of employees assigned the role of 'Manager' who started their assignments before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT MAX(EndDate) FROM project_2003;,What is the latest end date of all projects?
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectID FROM employee_projects_2004 WHERE AssignmentEnd < '2022-12-31';,"Retrieve the Project IDs of all projects where employee assignments ended before December 31, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT ProjectID FROM employee_projects_2004 WHERE Role = 'Tester';,List the unique project IDs for projects where the employee's role is 'Tester'.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.EmployeeID FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Lead'",List the names of projects and the IDs of employees who have the role of 'Lead' in those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM project_2003;,Retrieve all information about the projects in the project_2003 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_2004;,"Retrieve all records from the employee projects table, including each employee's ID, project ID, role, and assignment dates."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE ProjectID = 1;,Retrieve the name of the project where the ProjectID is 1.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE Role = 'Manager';",Find the Employee IDs and Project IDs of employees assigned the role of Manager in their projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectName, StartDate FROM project_2003 WHERE EndDate > '2023-12-31'","Retrieve the project names and their start dates for projects that end after December 31, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT Role FROM employee_projects_2004 WHERE EmployeeID = 1001;,Retrieve the role of the employee with the ID 1001 in the employee_projects_2004 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 ORDER BY StartDate DESC;,"List the names of projects ordered by their start date, starting from the most recent."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 WHERE AssignmentStart < '2023-01-01'","Retrieve the Employee IDs and Project IDs for all employees who started their assignments before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT Role FROM employee_projects_2004;,List all unique roles that employees have in projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) AS TotalProjects FROM project_2003;,Count the total number of projects in the project_2003 table.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY ProjectID;",Count the number of employees assigned to each project and return the count along with the ProjectID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 INNER JOIN employee_projects_2004 ON project_2003.ProjectID = employee_projects_2004.ProjectID WHERE employee_projects_2004.EmployeeID = 1001;,Find the names of projects assigned to the employee with ID 1001.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, COUNT(ProjectID) AS ProjectCount FROM employee_projects_2004 GROUP BY EmployeeID;",Count the number of projects assigned to each employee.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, p.ProjectName FROM employee_projects_2004 e JOIN project_2003 p ON e.ProjectID = p.ProjectID WHERE e.Role = 'Developer';",Find the IDs of employees who worked as developers on projects and the names of those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ProjectID, MAX(AssignmentEnd) AS HighestAssignmentEnd FROM employee_projects_2004 GROUP BY ProjectID;",Retrieve the highest assignment end date for each project including the corresponding project ID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE StartDate >= '2023-01-01' AND StartDate < '2024-01-01';,List the names of projects that started in the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, ProjectID FROM employee_projects_2004 ORDER BY AssignmentStart;","List the Employee IDs and Project IDs from the employee projects table, ordered by the start date of their assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT Role, COUNT(EmployeeID) AS EmployeeCount FROM employee_projects_2004 GROUP BY Role;","Count the number of employees assigned to each role, grouping the results by their roles."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, p.ProjectName FROM project_2003 p LEFT JOIN employee_projects_2004 e ON p.ProjectID = e.ProjectID WHERE e.ProjectID IS NULL;",Identify the projects from the year 2003 that do not have any assigned employees in the year 2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, MIN(AssignmentStart) AS FirstAssignment FROM employee_projects_2004 GROUP BY EmployeeID;",What is the earliest assignment date for each employee from the employee projects data?
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","Count the number of employees assigned to each project, including projects with no assignments, and list the project names along with the employee counts."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(*) as NumberOfAssignments FROM employee_projects_2004 ep GROUP BY ep.Role HAVING COUNT(*) > 1;","List the roles of employees in projects and count how many times each role has been assigned, including only those roles with more than one assignment."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL AND p.EndDate > CURRENT_TIMESTAMP;",Find the employee IDs and project names for projects that employees are currently assigned to and that have not yet ended.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MIN(ep.AssignmentStart) AS EarliestAssignmentStart FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;",List the names of projects and the earliest assignment start date for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate > '2023-01-01'","Retrieve the IDs of employees and the names of projects that started after January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, MAX(ep.AssignmentEnd) AS LatestEndDate FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID",List the project IDs along with the latest assignment end date for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT p.ProjectName FROM project_2003 p JOIN employee_projects_2004 ep ON ep.ProjectID = p.ProjectID;,Find the distinct names of projects that have employees assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) as RoleCount FROM employee_projects_2004 ep GROUP BY ep.Role ORDER BY RoleCount DESC;",Count the number of employees for each role in the projects and list the roles in order from the most common to the least common.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE (julianday(EndDate) - julianday(StartDate)) > 30;,List the names of projects with a duration longer than 30 days.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT EmployeeID FROM employee_projects_2004 GROUP BY EmployeeID HAVING COUNT(*) >= 2;,Identify the employee IDs of those who are involved in two or more projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) as ManagerCount FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Manager' GROUP BY p.ProjectName;",List the names of projects along with the count of employees assigned the role of 'Manager' for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentStart >= '2023-01-01' AND ep.AssignmentStart < '2024-01-01';",Find the names of projects and the roles of employees assigned to those projects for assignments that started in the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.AssignmentEnd FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd IS NOT NULL ORDER BY ep.AssignmentEnd DESC;","List the names of projects and their assignment end dates for employees, including only those assignments that have a recorded end date, sorted by assignment end date in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart < p.StartDate;",Retrieve the employee IDs and project names for projects where the employee's assignment start date is earlier than the project's start date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ep.Role FROM employee_projects_2004 ep GROUP BY ep.Role ORDER BY COUNT(*) DESC LIMIT 1;,Identify the role that has been assigned to the highest number of employees in the project assignments from 2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) as NumberOfEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","List the names of projects along with the number of employees assigned to each project, including only projects that have at least one employee assigned to them."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) as ProjectCount FROM employee_projects_2004 ep GROUP BY ep.EmployeeID ORDER BY ProjectCount DESC;","Count the number of projects assigned to each employee, listing the employees in order of the number of projects assigned, from highest to lowest."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectID FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) > 1;,Identify the project IDs of projects with more than one employee assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, MAX(ep.AssignmentStart) AS LastAssignment FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING MAX(ep.AssignmentStart) < '2023-01-01';","Find the names of projects and the most recent assignment start date for each project, including only projects where the last assignment start date was before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) as RoleAssignments FROM employee_projects_2004 ep WHERE ep.AssignmentEnd IS NOT NULL GROUP BY ep.Role ORDER BY RoleAssignments DESC;","Count the number of employees assigned to each role in projects whose assignment has ended, and list the roles from the most assigned to the least."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS EmployeeCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING COUNT(ep.EmployeeID) > 1",Retrieve the names of projects with more than one employee assigned and the count of employees for each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(*) AS TotalAssignments FROM employee_projects_2004 ep GROUP BY ep.Role ORDER BY TotalAssignments DESC","Count and list the number of project assignments for each role in the employee projects, sorted from the most assignments to the least."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS ManagerCount FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID AND ep.Role = 'Manager' GROUP BY p.ProjectName",List the names of projects along with the count of managers assigned to each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep INNER JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart <= '2023-12-31' AND ep.AssignmentEnd >= '2023-01-01'",Retrieve the Employee IDs and Project names for employees who were assigned to projects anytime during the year 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT ProjectName FROM project_2003 WHERE (julianday(EndDate) - julianday(StartDate)) > 30,List the names of projects that have a duration longer than 30 days.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, MAX(ep.AssignmentEnd) AS LastAssignment FROM employee_projects_2004 ep WHERE ep.AssignmentEnd < '2023-01-01' GROUP BY ep.EmployeeID","Identify the employee IDs and the date of their last project assignment for employees whose last assignment ended before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TotalEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > CURRENT_TIMESTAMP GROUP BY p.ProjectName ORDER BY TotalEmployees DESC","List the names of projects along with the total number of employees currently assigned to each project, sorted by the number of employees in descending order, including only projects with ongoing employee assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.Role = 'Developer' AND p.StartDate >= '2022-01-01'","Find the Employee IDs and project names of employees who have the role of Developer in projects that started on or after January 1, 2022."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TesterCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.Role = 'Tester' GROUP BY p.ProjectName",List the names of projects and count the number of employees in the role of 'Tester' assigned to each project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectID FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(ep.EmployeeID) = 0,List the project IDs of projects with no employees assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, MIN(ep.AssignmentStart) AS FirstAssignment FROM employee_projects_2004 ep WHERE ep.AssignmentStart < '2022-01-01' GROUP BY ep.EmployeeID","Identify the Employee IDs of employees whose first assignment started before January 1, 2022, and include the date of that first assignment."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentStart BETWEEN '2022-01-01' AND '2023-12-31'","Retrieve the project names and employee roles for assignments that occurred between January 1, 2022, and December 31, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS TotalProjects FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING COUNT(ep.ProjectID) > 3","Identify the employee IDs of those who are assigned to more than three projects, including the total count of projects they are involved in."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, COUNT(ep.EmployeeID) FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.Role","Count how many employees have each role in projects that started before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, ep.ProjectID FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.EndDate IS NOT NULL",Retrieve the employee IDs and project IDs for employees assigned to projects that have a defined end date.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, ep.Role FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > '2023-01-01' AND ep.AssignmentStart < '2024-01-01'",Find the names of projects and the roles of employees assigned to them for projects where the employee's assignment started before the beginning of 2024 and ended after the beginning of 2023.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(DISTINCT ep.ProjectID) AS ProjectsAssigned FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING ProjectsAssigned >= 2",Identify the employees who have been assigned to two or more different projects and count how many unique projects each employee is assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.Role, AVG(julianday(ep.AssignmentEnd) - julianday(ep.AssignmentStart)) AS AvgDuration FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.Role","Retrieve the average duration of assignments for different roles in projects that started before January 1, 2023, by calculating the length of time each employee spent on those assignments."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, COUNT(ep.EmployeeID) AS TotalActiveEmployees FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.AssignmentEnd > CURRENT_TIMESTAMP GROUP BY p.ProjectName",List the names of projects and count how many employees are assigned to each currently active project.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, p.ProjectName FROM employee_projects_2004 ep JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd < '2023-01-01'","Retrieve the employee IDs and project names for employees who completed their assignments on projects before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, COUNT(*) AS LeadCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.Role = 'Lead' GROUP BY p.ProjectID",Count the number of employees assigned as 'Lead' for each project ID.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS NumberOfProjects FROM employee_projects_2004 ep GROUP BY ep.EmployeeID HAVING COUNT(ep.ProjectID) > 5",Identify employees who are assigned to more than five different projects and count the number of projects each of those employees is assigned to.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectName FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING COUNT(ep.EmployeeID) > 5,List the names of projects that have more than five employees assigned.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, e.FirstName, e.LastName FROM employee_projects_2004 ep JOIN employees e ON ep.EmployeeID = e.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate < '2023-01-01' GROUP BY ep.EmployeeID, e.FirstName, e.LastName HAVING COUNT(p.ProjectID) > 2","Identify the employees who have worked on more than two projects that started before the year 2023, and list their employee IDs along with their first and last names."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NULL",Retrieve the first and last names of employees who are currently assigned to projects and the names of those projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, (p.EndDate - p.StartDate) AS ProjectDuration FROM project_2003 p WHERE (p.EndDate - p.StartDate) > INTERVAL '30 days' ORDER BY ProjectDuration DESC","List the names of projects that lasted longer than 30 days, showing their duration in days, and sort the results by the duration in descending order."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_2004 ep)",Find the IDs and names of employees who are not assigned to any projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, AVG(JULIANDAY(ep.AssignmentEnd) - JULIANDAY(ep.AssignmentStart)) AS AvgAssignmentDuration FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName",Calculate the average duration in days of assignments for each project based on the start and end dates of employee assignments.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employees e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_2004 ep WHERE ep.Role = 'Manager')",Find the first and last names of employees who have held a Manager role in any project assignment.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE p.StartDate > ep.AssignmentStart",Retrieve the first and last names of employees along with the names of the projects they are working on for projects that started after the employees' assignment start dates.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectID FROM project_2003 p LEFT JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectID HAVING COUNT(DISTINCT ep.EmployeeID) > 1,Identify the Project IDs from 2003 that have more than one unique employee assigned to them.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.EmployeeID, e.FirstName FROM employees e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_2004 ep WHERE ep.AssignmentStart < '2023-01-01')","Retrieve the IDs and first names of employees who have not been assigned to any projects that started before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT p.ProjectName FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING COUNT(ep.EmployeeID) > 3,Find the names of projects that have more than three employee assignments in 2004.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, SUM(ep.AssignmentEnd - ep.AssignmentStart) AS TotalHoursAssigned FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName","Calculate the total assignment durations in hours for each employee, and list their first and last names."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, p.ProjectName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd IS NOT NULL AND ep.AssignmentStart <= ep.AssignmentEnd","Retrieve the first and last names of employees along with the names of the projects they worked on, for assignments with a recorded end date and where the assignment start date is earlier than or equal to the assignment end date."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employees e JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 3",Find the first and last names of employees who are assigned to more than three projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectID, COUNT(ep.EmployeeID) AS DeveloperCount FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID WHERE ep.Role = 'Developer' GROUP BY p.ProjectID",Count the number of employees with the role of 'Developer' assigned to each project and list this information along with the project IDs.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employees e WHERE NOT EXISTS (SELECT 1 FROM employee_projects_2004 ep WHERE ep.EmployeeID = e.EmployeeID AND ep.AssignmentEnd > CURRENT_TIMESTAMP)",List the first and last names of employees who are not currently assigned to any active projects.
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, COUNT(DISTINCT p.ProjectID) AS CompletedProjects FROM employees e LEFT JOIN employee_projects_2004 ep ON e.EmployeeID = ep.EmployeeID LEFT JOIN project_2003 p ON ep.ProjectID = p.ProjectID WHERE ep.AssignmentEnd < '2023-01-01' GROUP BY e.FirstName, e.LastName","Find the first and last names of employees and count how many distinct projects they completed before January 1, 2023."
"CREATE TABLE project_2003 (
  ""ProjectID"" INTEGER PRIMARY KEY,
  ""ProjectName"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP
);

CREATE TABLE employee_projects_2004 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""AssignmentStart"" TIMESTAMP,
  ""AssignmentEnd"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT p.ProjectName, e.FirstName, e.LastName FROM project_2003 p JOIN employee_projects_2004 ep ON p.ProjectID = ep.ProjectID JOIN employees e ON ep.EmployeeID = e.EmployeeID WHERE p.EndDate < CURRENT_TIMESTAMP ORDER BY p.EndDate DESC;","Retrieve the names of projects that have already ended, along with the first and last names of the employees who worked on those projects, and arrange the results by the project end dates from most recent to oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005,Retrieve all performance reviews from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, ep.ReviewID, ep.ReviewScore FROM employee_performance_2006 ep INNER JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID","Retrieve all records of employee performance reviews conducted in 2006, including employee IDs, review IDs, and their review scores."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, Rating FROM performance_review_2005","Retrieve the Review ID, Employee ID, and Rating for all performance reviews in 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006",Retrieve the employee IDs and their review IDs from the performance data for the year 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT EmployeeID FROM performance_review_2005,Retrieve a list of unique employee IDs from the performance reviews conducted in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, Comments FROM performance_review_2005 WHERE Rating > 4.0",Retrieve the review dates and comments from performance reviews for employees with a rating greater than 4.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM performance_review_2005 WHERE Rating IS NOT NULL,Count the total number of performance reviews that have a recorded rating.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(Rating) FROM performance_review_2005,What is the average rating from all performance reviews conducted in 2005?
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT Comments FROM performance_review_2005 WHERE ReviewerID = 1,Retrieve the comments from the performance reviews authored by the reviewer with an ID of 1.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, Rating FROM performance_review_2005 ORDER BY Rating DESC","Retrieve the Employee IDs and their corresponding ratings from the performance reviews for 2005, ordered from highest to lowest rating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, ReviewDate FROM performance_review_2005 WHERE EmployeeID = 101",Retrieve the review IDs and review dates for the performance reviews of the employee with ID 101.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(ReviewScore) FROM employee_performance_2006 WHERE EmployeeID = 102,Calculate the average review score for the employee with ID 102.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31',"Retrieve all performance reviews from the year 2005, including those dated on the first and last day of the year."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore > 3.5",Find the employee IDs and review IDs of employees with a performance score greater than 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT ReviewerID FROM performance_review_2005,Retrieve a list of unique ReviewerIDs from the performance reviews conducted in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM performance_review_2005,Count the number of unique employees who have received performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(ReviewID) AS ReviewCount FROM employee_performance_2006 GROUP BY EmployeeID",Count the number of performance reviews for each employee in the performance data from 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT Rating, COUNT(*) AS Count FROM performance_review_2005 GROUP BY Rating",Count how many performance reviews there are for each rating in 2005 and show the ratings along with their respective counts.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Rating FROM performance_review_2005 WHERE Rating IS NOT NULL ORDER BY ReviewID","Retrieve the Review IDs and Ratings from the performance reviews for 2005 where the Ratings are available, and organize the results by the Review IDs."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM performance_review_2005 WHERE Comments IS NOT NULL,Count the number of performance reviews in 2005 that have comments.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID","Calculate the average rating given by each reviewer, including the reviewer IDs, in the performance reviews from 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM performance_review_2005;,Retrieve all details of performance reviews conducted in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT * FROM employee_performance_2006;,"Retrieve all records of employee performance reviews from 2006, including details about each employee and their corresponding review scores."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, EmployeeID, ReviewDate FROM performance_review_2005 WHERE Rating > 3;","Retrieve the review IDs, employee IDs, and review dates for all performance reviews with a rating greater than 3."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore < 3;",Find the Employee IDs and Review IDs of employees who received a review score below 3.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID;",Count how many reviews each reviewer has given in the performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID;","Calculate the average rating for each employee based on their performance reviews, and return it as AverageRating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID;",Retrieve the review IDs along with the first and last names of the reviewers from the performance reviews for the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewDate, Rating FROM performance_review_2005 ORDER BY ReviewDate DESC;","Retrieve the ReviewDate and Rating of performance reviews from 2005, sorted from the most recent to the oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, COUNT(p.ReviewID) FROM performance_review_2005 p GROUP BY p.EmployeeID;",Count the number of performance reviews for each employee based solely on the review information from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT ReviewerID FROM performance_review_2005 WHERE Rating >= 4;,List the unique IDs of reviewers who gave a rating of 4 or higher in the performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, p.Comments FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE e.ReviewScore > 4;",Retrieve the Employee IDs and comments from performance reviews for employees with a review score greater than 4.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT MAX(Rating) AS HighestRating FROM performance_review_2005 GROUP BY ReviewID;,Retrieve the highest rating for each review from the performance reviews in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, SUM(ReviewScore) AS TotalScore FROM employee_performance_2006 GROUP BY EmployeeID HAVING TotalScore > 10;",Calculate the total review scores for each employee and list the employees whose total review score is greater than 10.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) > 4;","Identify the reviewers who have given an average rating greater than 4 for employee performance reviews, including their ID and the average rating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.EmployeeID, COUNT(p.ReviewID) FROM performance_review_2005 p JOIN employee_1001 e ON p.EmployeeID = e.EmployeeID WHERE e.Department = 'Sales' GROUP BY p.EmployeeID;",Count how many performance reviews have been received by each employee in the Sales department.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, Rating FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31';",Retrieve the review IDs and ratings from performance reviews conducted in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, p.ReviewID FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE p.Rating IN (1, 2);",Find the employee IDs and corresponding review IDs of employees whose performance reviews had ratings of 1 or 2.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(*) FROM performance_review_2005 WHERE Comments IS NOT NULL;,Count the total number of performance reviews from 2005 that have non-null comments.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT DISTINCT e.EmployeeID FROM employee_performance_2006 e JOIN performance_review_2005 p ON e.ReviewID = p.ReviewID WHERE e.ReviewScore >= 3;,"Identify the unique employee IDs that received a performance review score of 3 or higher in 2006, based on the reviews they received in 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(ReviewScore) FROM employee_performance_2006;,Calculate the average review score from the employee performance reviews in the year 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY EmployeeID",Calculate the average rating for each employee from the performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY ReviewerID HAVING COUNT(*) > 5",Identify the reviewers who have conducted more than five performance reviews and count the number of reviews for each reviewer.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 WHERE Rating >= 3.5 GROUP BY EmployeeID",Count how many performance reviews each employee received with a rating of 3.5 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31'",Retrieve the first and last names of employees who received performance reviews in the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY ReviewID",Calculate the average review score for each performance review by grouping the scores based on Review IDs.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(Rating) AS HighestRating FROM performance_review_2005 GROUP BY EmployeeID",Find the highest performance rating for each employee based on their reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID WHERE pr.Rating < 3",Identify the first and last names of employees who reviewed performance in 2005 and assigned a rating lower than 3.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewID, pr.Rating, e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID ORDER BY pr.ReviewDate DESC","Retrieve the review IDs, ratings, and first and last names of employees from performance reviews, organizing the results by review dates from most recent to oldest."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, COUNT(pr.ReviewID) as ReviewScoresCount FROM employee_performance_2006 ep JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating >= 4 GROUP BY ep.EmployeeID","Count how many performance reviews each employee received that had a rating of 4 or higher, and provide the employee IDs along with the total count of those reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT ReviewID FROM employee_performance_2006 WHERE ReviewScore > 80 GROUP BY ReviewID HAVING COUNT(EmployeeID) >= 3,Find the review IDs for performance reviews that have received a score greater than 80 and have been reviewed by at least three employees.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, AVG(ep.ReviewScore) AS AverageReviewScore FROM employee_performance_2006 ep GROUP BY ep.EmployeeID",Calculate the average review score for each employee based on their performance reviews recorded in 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN performance_review_2005 r ON e.EmployeeID = r.EmployeeID WHERE r.Rating < 2",Find the first and last names of employees with a performance review rating lower than 2.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT AVG(Rating) AS OverallAverage FROM performance_review_2005,What is the average rating from all performance reviews conducted in 2005?
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.EmployeeID, COUNT(DISTINCT pr.ReviewID) AS UniqueReviews FROM performance_review_2005 pr GROUP BY pr.EmployeeID",Count the number of unique performance reviews from 2005 for each employee and display the results by employee ID.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, MAX(Rating) AS HighestRating FROM performance_review_2005 GROUP BY ReviewerID",Find the highest performance rating given by each reviewer in the performance reviews from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, ReviewID FROM employee_performance_2006 WHERE ReviewScore = (SELECT MAX(ReviewScore) FROM employee_performance_2006)",Identify the EmployeeID and ReviewID of the employee with the highest review score in the employee performance data for 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT strftime('%Y-%m', pr.ReviewDate) AS Month, AVG(pr.Rating) AS AverageRating FROM performance_review_2005 pr GROUP BY Month",Calculate the average rating of performance reviews for each month in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.Rating > 3.5 ORDER BY pr.ReviewDate","Find the first and last names of employees who received a performance rating higher than 3.5, arranged by the date of their review."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) as AvgReviewerRating FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) < 3",Identify the reviewers who have an average rating of less than 3 for their performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, COUNT(ep.ReviewID) AS ReviewCount FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE pr.Rating < 3 GROUP BY e.EmployeeID;","List the first and last names of employees who have received a performance rating of less than 3, along with the number of reviews they have in the year 2006, counting all their reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY EmployeeID HAVING COUNT(*) > 2","Identify employees who have received more than two performance reviews, and count the number of reviews each employee has received."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID ORDER BY AverageRating DESC","Calculate the average rating given by each reviewer for the performance reviews conducted in 2005, and list the reviewers in order from highest to lowest average rating."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, MAX(Rating) AS MaxRating FROM performance_review_2005 GROUP BY EmployeeID",Identify each employee and their highest performance review rating from the year 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID WHERE p.Rating > 4",Retrieve the first and last names of employees who reviewed a performance and gave a rating greater than 4.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, AVG(ReviewScore) AS AverageScore FROM employee_performance_2006 GROUP BY EmployeeID HAVING AVG(ReviewScore) >= 3.5",Find the average review score for each employee and return those employees with an average score of 3.5 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT DATE(ReviewDate) AS ReviewDate, AVG(Rating) AS AvgRating FROM performance_review_2005 WHERE ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY DATE(ReviewDate)",Find the average rating of performance reviews for each date in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, p.Rating FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID WHERE p.Comments IS NOT NULL","Retrieve the first and last names of employees, along with their performance review ratings, for reviews that include comments."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(*) AS TotalReviews FROM performance_review_2005 GROUP BY ReviewerID HAVING TotalReviews > 1",Count the number of reviews written by each reviewer and list the reviewers who have written more than one review.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(p.Rating) AS HighestRating FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName","Retrieve the employee IDs, first names, and last names of all employees, along with their highest performance review ratings, grouped by employee."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ep.EmployeeID, AVG(ep.ReviewScore) AS AverageScore FROM employee_performance_2006 ep GROUP BY ep.EmployeeID HAVING AVG(ep.ReviewScore) < 3",Find the Employee IDs of employees who have an average performance review score of less than 3 based on their reviews from 2006.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, AVG(ep.ReviewScore) AS AverageReviewScore FROM performance_review_2005 p JOIN employee_performance_2006 ep ON ep.ReviewID = p.ReviewID GROUP BY p.ReviewID",Calculate the average review score for each review from 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, p.ReviewDate FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID WHERE p.Rating >= 4 ORDER BY p.ReviewDate DESC","Retrieve the first and last names of employees who received a performance review rating of 4 or higher, along with the date of their review, sorted by the most recent reviews first."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, COUNT(p.ReviewID) AS NumberOfReviews FROM employee_1001 e LEFT JOIN performance_review_2005 p ON e.EmployeeID = p.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(p.ReviewID) > 3","Identify the employees who have received more than three performance reviews, and list their EmployeeID along with the total number of reviews they have received."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT p.ReviewID FROM performance_review_2005 p GROUP BY p.ReviewID HAVING AVG(p.Rating) < 2.5,Identify the review IDs of performance reviews with an average rating lower than 2.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN performance_review_2005 p ON e.EmployeeID = p.ReviewerID WHERE p.Rating > (SELECT AVG(Rating) FROM performance_review_2005)",Find the first and last names of employees who served as reviewers and rated higher than the average rating of performance reviews in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
",SELECT COUNT(DISTINCT EmployeeID) AS NumEmployees FROM performance_review_2005 WHERE Rating >= 4,Count the number of distinct employees who received a performance review rating of 4 or higher.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, AVG(ep.ReviewScore) AS AveragePerformance FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING AVG(ep.ReviewScore) > 3.5","Identify the employees and calculate their average performance scores from their reviews, including only those employees whose average score exceeds 3.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, ep.ReviewScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.ReviewScore IS NOT NULL",Retrieve the first names and last names of employees who have an available review score.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT EmployeeID, COUNT(*) AS ReviewCount FROM performance_review_2005 GROUP BY EmployeeID HAVING COUNT(*) > 5",Count how many performance reviews each employee received and list only those employees who have more than five reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT p.ReviewID, p.ReviewDate, e.FirstName, e.LastName FROM performance_review_2005 p JOIN employee_1001 e ON p.ReviewerID = e.EmployeeID WHERE p.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31'","Retrieve the review IDs and dates, along with the first and last names of the reviewers for all performance reviews conducted between January 1, 2005, and December 31, 2005."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING AVG(pr.Rating) > 3.5",Find the names and employee IDs of employees who have an average performance review rating greater than 3.5.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employee_1001 e WHERE (SELECT COUNT(*) FROM performance_review_2005 pr WHERE pr.ReviewerID = e.EmployeeID) > 5","Identify the employee IDs, first names, and last names of employees who have reviewed more than five other employees."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, pr.ReviewDate, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.Rating >= 4.0 ORDER BY pr.Rating DESC","Retrieve the first and last names of employees along with their review dates and ratings for performance reviews conducted in 2005, where the ratings are 4.0 or higher, without filtering by specific review dates, and sort the results by rating in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, SUM(ep.ReviewScore) AS TotalScore FROM employee_performance_2006 ep JOIN employee_1001 e ON ep.EmployeeID = e.EmployeeID JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.ReviewDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(ep.ReviewScore) > 10.0","Find the first and last names of employees who received performance review scores in 2005, where the total review score for the year is greater than 10."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT pr.ReviewerID, e.FirstName, e.LastName, COUNT(pr.ReviewID) AS ReviewCount FROM performance_review_2005 pr JOIN employee_1001 e ON pr.ReviewerID = e.EmployeeID GROUP BY pr.ReviewerID, e.FirstName, e.LastName HAVING COUNT(pr.ReviewID) > 3","Count how many performance reviews each reviewer has completed, and list the names of those reviewers who have completed more than three reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, pr.Rating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID ORDER BY pr.Rating DESC LIMIT 5","Retrieve the names and the highest performance review ratings of the top five employees from 2005, including their first and last names."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e1.FirstName, e1.LastName, e2.FirstName AS ReviewerFirstName, e2.LastName AS ReviewerLastName, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e1 ON pr.EmployeeID = e1.EmployeeID JOIN employee_1001 e2 ON pr.ReviewerID = e2.EmployeeID WHERE pr.Rating < 2.5","Retrieve the first and last names of employees and their reviewers, along with the ratings from performance reviews where the rating is less than 2.5."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(ep.ReviewScore) AS AverageScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID","Retrieve the first and last names of employees along with their average review scores from the performance records, only including those who have received reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, COUNT(pr.ReviewID) AS TotalReviews FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.Rating IS NOT NULL GROUP BY e.EmployeeID HAVING COUNT(pr.ReviewID) > 5 ORDER BY TotalReviews DESC","List the first and last names of employees who have received more than five performance reviews with a rating, along with the total number of such reviews. Sort the results by the number of reviews in descending order."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, COUNT(pr.ReviewID) AS ReviewCount FROM employee_1001 e LEFT JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE e.EmployeeID NOT IN (SELECT DISTINCT ReviewerID FROM performance_review_2005) GROUP BY e.FirstName, e.LastName","List the first and last names of employees who have not reviewed anyone, along with the total number of performance reviews they have received, grouped by their names."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, pr.ReviewDate, pr.Rating FROM performance_review_2005 pr JOIN employee_1001 e ON pr.EmployeeID = e.EmployeeID WHERE pr.ReviewerID = (SELECT EmployeeID FROM employee_1001 WHERE FirstName = 'John' AND LastName = 'Doe')","Retrieve the first and last names of employees along with the dates and ratings of their performance reviews, specifically for reviews conducted by John Doe."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT ReviewerID, COUNT(ReviewID) AS ReviewCount, AVG(Rating) AS AverageRating FROM performance_review_2005 GROUP BY ReviewerID HAVING AVG(Rating) < 3.0","Identify the reviewers who conducted performance reviews, count how many reviews each reviewer completed, and calculate the average rating they gave. Include only those reviewers with an average rating of less than 3.0."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating >= 4.0",Find the first and last names of employees who received a performance review rating of 4.0 or higher based on their performance records in 2005.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, SUM(ep.ReviewScore) AS TotalScore FROM employee_1001 e JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID JOIN performance_review_2005 pr ON ep.ReviewID = pr.ReviewID WHERE pr.Rating > 3.0 GROUP BY e.EmployeeID",List the first and last names of employees along with their total review scores from the year 2006 who had a performance review in 2005 with a rating greater than 3.0.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, AVG(pr.Rating) AS AvgRating FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID WHERE pr.ReviewDate IN (SELECT MAX(ReviewDate) FROM performance_review_2005 GROUP BY EmployeeID) GROUP BY e.EmployeeID",Find the first and last names of employees and calculate the average rating from their most recent performance reviews for each employee.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName FROM employee_1001 e WHERE e.EmployeeID NOT IN (SELECT EmployeeID FROM performance_review_2005 WHERE Rating IS NOT NULL)",List the first and last names of employees who did not receive a performance review with a non-null rating.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.FirstName, e.LastName, COALESCE(AVG(ep.ReviewScore), 0) AS AverageScore FROM employee_1001 e LEFT JOIN employee_performance_2006 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COALESCE(AVG(ep.ReviewScore), 0) < 3.0","Retrieve the first and last names of employees who have an average performance review score of less than 3.0, including those without any performance reviews."
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","SELECT e.EmployeeID, e.FirstName FROM employee_1001 e JOIN performance_review_2005 pr ON e.EmployeeID = pr.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT pr.ReviewID) > 2",Find the Employee IDs and first names of employees who have received more than two distinct performance reviews.
"CREATE TABLE performance_review_2005 (
  ""ReviewID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""ReviewDate"" TIMESTAMP,
  ""ReviewerID"" INTEGER,
  ""Rating"" REAL,
  ""Comments"" TEXT,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewerID"") REFERENCES employee_1001(""EmployeeID"")
);

CREATE TABLE employee_performance_2006 (
  ""EmployeeID"" INTEGER,
  ""ReviewID"" INTEGER,
  ""ReviewScore"" REAL,
  PRIMARY KEY (""EmployeeID"", ""ReviewID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_1001(""EmployeeID""),
  FOREIGN KEY (""ReviewID"") REFERENCES performance_review_2005(""ReviewID"")
)
","
```","Find the review ratings and comments for each employee from the performance reviews conducted in 2005, along with their corresponding review scores from the performance data of 2006."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001,Retrieve all the information about the departments in the database.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName, JobTitle, DepartmentID, Salary FROM employee_3002","Retrieve first names, last names, job titles, department IDs, and salaries of all employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM salary_history_3003,"Retrieve all records from the salary history, including every salary entry along with the effective date."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002",Retrieve the first and last names of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001,List the names of all departments.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 50000","Retrieve the first and last names of employees who have a salary greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1,Retrieve the name of the department with ID 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, FirstName, LastName FROM employee_3002 WHERE DepartmentID = 2","List the Employee IDs, first names, and last names of employees working in department 2."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE JobTitle = 'Manager',Count the number of employees with the job title 'Manager'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002,Retrieve a list of unique job titles from the employee records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM department_3001,Count the total number of departments in the department_3001 table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, SalaryAmount FROM salary_history_3003",Retrieve the IDs of employees and their salary amounts from the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT LastName FROM employee_3002 ORDER BY LastName,"Retrieve the last names of all employees, sorted in alphabetical order."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IS NOT NULL",Retrieve the first and last names of employees who are assigned to a department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT SalaryAmount FROM salary_history_3003 WHERE EmployeeID = 1,Retrieve the salary amount history for the employee with the ID of 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM employee_3002 GROUP BY DepartmentID",Count how many employees work in each department and provide the number of employees for each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary < 40000","Find the first and last names of employees who earn less than 40,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID",List the first and last names of employees along with their department names.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID",Retrieve the first and last names of employees along with their salary amounts from the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'",List the first and last names of employees working in departments with names that start with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT e.JobTitle FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002);,Identify the unique job titles of employees whose salary is above the average salary of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT * FROM department_3001,Retrieve all information about the departments from the department_3001 table.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle, e.Salary, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID","Retrieve the first and last names, job titles, salaries, and department names of all employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentName FROM department_3001 WHERE DepartmentID = 1,Retrieve the name of the department where the DepartmentID is 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE JobTitle = 'Manager'",Find the first and last names of employees who have the job title 'Manager'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 50000","Find the first and last names of employees who earn more than 50,000 dollars."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID",Retrieve the first names and last names of employees and their department names.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE DepartmentID = 2,Count the number of employees who work in the department with DepartmentID 2.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT DepartmentID FROM employee_3002,Retrieve a list of unique DepartmentID values from the employee records.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT EmployeeID, SalaryAmount FROM salary_history_3003 WHERE SalaryAmount > 60000","Find the employee IDs and their salary amounts for employees in the salary history who earn more than 60,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 ORDER BY LastName","Retrieve the first and last names of all employees, sorted alphabetically by their last names."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID","Retrieve the first and last names of employees and their corresponding department names, including those without a department."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = 1,Calculate the average salary of employees in department 1.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT AVG(Salary) FROM employee_3002)",Find the first and last names of employees whose salary is less than the average salary of all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(*) FROM employee_3002 WHERE JobTitle IS NOT NULL,Count the total number of employees who have a job title assigned.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.DepartmentID IN (1, 2)",Retrieve the first and last names of employees in departments 1 and 2.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID",Retrieve the first names and last names of employees and their corresponding salary amounts from the employee records and salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DISTINCT JobTitle FROM employee_3002,List all the unique job titles of employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'",Find the first and last names of employees and the names of departments that start with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM salary_history_3003;,Count the number of employees who have recorded salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(*) as EmployeeCount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(*) > 5","Identify the names of departments that have more than 5 employees, and include the number of employees in each of those departments."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE Salary > 60000 ORDER BY LastName ASC","List the first and last names of employees who earn more than 60,000 and arrange the names in alphabetical order by their last names."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",Calculate the average salary of employees in each department and list the department names with their average salaries.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, sh.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID WHERE sh.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID)",Retrieve the first and last names of employees and their most recent salary from the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT e.JobTitle FROM employee_3002 e GROUP BY e.JobTitle HAVING COUNT(*) > 3,Identify the job titles that have more than three employees in those positions.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e ORDER BY e.Salary DESC LIMIT 10",Retrieve the first and last names and salaries of the top ten highest-paid employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING SUM(e.Salary) > 200000","List the names of departments and the total salaries of employees in those departments where the total salary exceeds 200,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(sh.SalaryID) > 1",Identify the first and last names of employees who have had more than one salary change recorded in their history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) AS EmployeeCount FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName, e.JobTitle","Count the number of employees in each department for each job title, listing the department names, job titles, and the number of employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE DepartmentID IN (SELECT DepartmentID FROM department_3001 WHERE DepartmentName LIKE '%Sales%')",Retrieve the first and last names of employees who are in departments with names containing 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) ORDER BY e.Salary DESC","Retrieve the first names, last names, and salaries of employees whose salary is greater than the average salary, and sort the results in descending order of their salaries."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, MIN(e.Salary) AS MinSalary, MAX(e.Salary) AS MaxSalary FROM department_3001 d LEFT JOIN employee_3002 e ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",Retrieve the names of all departments along with the minimum and maximum salaries of their employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID WHERE sh.SalaryAmount > e.Salary",Find the first and last names of employees who have a salary history record with a salary amount greater than their current salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT FirstName, LastName FROM employee_3002 WHERE EmployeeID NOT IN (SELECT EmployeeID FROM salary_history_3003)",Retrieve the first and last names of employees who have no entries in the salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) FROM department_3001 d LEFT JOIN employee_3002 e ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName",List the names of all departments and the count of unique employees in each department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary = (SELECT MAX(Salary) FROM employee_3002)","Find the first and last names of employees who have the highest salary in the company, along with their salary amount."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) as AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING AVG(e.Salary) > 50000","Find the average salary of employees in each department and list those departments where the average salary is greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, COUNT(sh.SalaryID) as SalaryHistoryCount FROM employee_3002 e LEFT JOIN salary_history_3003 sh ON e.EmployeeID = sh.EmployeeID GROUP BY e.EmployeeID","List the first and last names of employees who have salary history records, along with the count of those records for each employee, including employees with no records."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT DepartmentID FROM employee_3002 GROUP BY DepartmentID HAVING COUNT(*) > 2,Identify the departments that have more than two employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'HR' ORDER BY e.LastName;","Retrieve the first and last names of employees in the HR department, arranged by their last names."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT d.DepartmentName FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5,List the names of departments that have more than 5 employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT JobTitle, AVG(Salary) AS AverageSalary FROM employee_3002 GROUP BY JobTitle ORDER BY AverageSalary DESC",Calculate the average salary for each job title from the employee table and list them in order from highest to lowest average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID)",Retrieve the first and last names of employees with their most recent salary amount based on the latest effective date from their salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",List the total salary for each department by summing the salaries of all employees belonging to that department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.JobTitle, COUNT(e.EmployeeID) AS JobTitleCount FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) GROUP BY e.JobTitle HAVING COUNT(e.EmployeeID) > 2",Find job titles of employees who earn more than the average salary and have more than two employees in the same job title. Count the number of employees for each job title that meets these criteria.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.Salary FROM employee_3002 e WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002) ORDER BY e.Salary DESC","Find the first and last names of employees along with their salaries who earn more than the average salary, and display them in descending order of salary."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'",Find the first and last names of employees who work in departments with names beginning with 'Sales'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.EffectiveDate FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount = (SELECT MAX(SalaryAmount) FROM salary_history_3003 s2 WHERE s2.EmployeeID = e.EmployeeID)","Retrieve the first and last names of employees along with the date when they received their highest salary, ensuring the date corresponds to each employee's maximum salary."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.DepartmentID, AVG(e.Salary) AS AverageDepartmentSalary FROM employee_3002 e GROUP BY e.DepartmentID",Calculate the average salary of employees grouped by their department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) AS JobCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName, e.JobTitle","Count the number of employees for each job title in each department, listing the department names alongside the corresponding job titles and their employee counts."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary > (SELECT MAX(Salary) FROM employee_3002 WHERE JobTitle = 'Manager')",Find the first and last names of employees who earn more than the maximum salary of employees with the job title of 'Manager'.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 60000 ORDER BY s.EffectiveDate DESC","Retrieve the first and last names of employees and their most recent salaries who have a salary greater than 60,000, sorted by the most recent salary first."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, SUM(s.SalaryAmount) AS TotalSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentName","Calculate the total salaries paid to employees in each department, displaying the department names and their corresponding total salary amounts."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.JobTitle, COUNT(e.EmployeeID) AS EmployeeCount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount < 30000 GROUP BY e.JobTitle HAVING COUNT(e.EmployeeID) > 0","Identify the job titles of employees with salaries in their salary history less than 30,000 and count how many employees hold each job title, showing only those job titles that have at least one employee."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.DepartmentID, AVG(e.Salary) AS AverageSalary FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID GROUP BY e.DepartmentID HAVING AVG(e.Salary) > 50000","Calculate the average salary for each department that has employees with salaries greater than 50,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN (SELECT EmployeeID, MAX(SalaryAmount) AS MaxSalary FROM salary_history_3003 GROUP BY EmployeeID HAVING MaxSalary < 70000) s ON e.EmployeeID = s.EmployeeID","Find the first and last names of employees whose highest salary in their history is less than 70,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Marketing'",Find the first and last names of employees who work in the Marketing department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT e.JobTitle FROM employee_3002 e GROUP BY e.JobTitle HAVING COUNT(DISTINCT e.DepartmentID) > 1,List the job titles of employees who work in multiple unique departments.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary < (SELECT AVG(Salary) FROM employee_3002)",Find the first and last names of employees along with their department names who have salaries less than the average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN (SELECT EmployeeID FROM salary_history_3003 GROUP BY EmployeeID HAVING COUNT(SalaryID) > 1) sh ON e.EmployeeID = sh.EmployeeID",Find the first and last names of employees who have more than one record of salary changes in the history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002)","Retrieve the first and last names of employees along with their department names, including only those employees whose salary is above the average salary of all employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle, s.SalaryAmount FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID)","Retrieve the first names, last names, job titles, and the most recent salary amounts of employees."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT d.DepartmentName FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5;,List the names of departments that have more than 5 employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary = (SELECT MAX(Salary) FROM employee_3002);",Find the first and last names of employees who have the highest salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING SUM(s.SalaryAmount) > 100000;","Retrieve the first and last names of employees whose total salary recorded in the salary history is greater than 100,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_3002 e INNER JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(e2.Salary) FROM employee_3002 e2 WHERE e2.DepartmentID = e.DepartmentID);","Retrieve the first and last names of employees along with their department names, for employees whose salary is greater than the average salary of all employees in their respective departments."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentID, SUM(e.Salary) AS TotalDepartmentSalary FROM department_3001 d LEFT JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID ORDER BY TotalDepartmentSalary DESC;",Calculate the total salary for each department and list the departments by their total salary in descending order.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.SalaryAmount > 80000","Find the first and last names of employees who have received a salary greater than 80,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, e.JobTitle, COUNT(e.EmployeeID) AS EmployeeCount FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName, e.JobTitle HAVING COUNT(e.EmployeeID) > 1;","List the names of departments and job titles where there are more than one employee, along with the count of employees in each department for those job titles."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY AverageSalary DESC;",Find the average salary of employees in each department and list the departments in order from highest to lowest average salary.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e WHERE e.Salary < (SELECT MIN(Salary) FROM employee_3002);",Find the first and last names of employees who earn less than the minimum salary among all employees.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING MAX(s.SalaryAmount) > 90000;","Find the first and last names of employees who have a maximum salary in their salary history greater than 90,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN salary_history_3003 s ON s.EmployeeID = e.EmployeeID WHERE s.SalaryAmount > 75000;","Find the first and last names of employees with a salary history showing amounts greater than 75,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT d.DepartmentID, AVG(s.SalaryAmount) AS AverageSalary FROM department_3001 d JOIN employee_3002 e ON d.DepartmentID = e.DepartmentID JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY d.DepartmentID HAVING AVG(s.SalaryAmount) > 60000;","Calculate the average salary for each department and return the departments with an average salary greater than 60,000."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_3002 e JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID WHERE s.EffectiveDate = (SELECT MAX(EffectiveDate) FROM salary_history_3003 WHERE EmployeeID = e.EmployeeID);","Find the first names, last names, and job titles of employees who have recorded salary histories for the most recent effective date."
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentID IS NULL;",Find the first and last names of employees who do not belong to any department.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e LEFT JOIN salary_history_3003 s ON e.EmployeeID = s.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(s.SalaryID) > 3;",List the first and last names of employees who have more than three salary entries in their salary history.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
","SELECT e.FirstName, e.LastName FROM employee_3002 e JOIN department_3001 d ON e.DepartmentID = d.DepartmentID WHERE e.Salary > (SELECT AVG(Salary) FROM employee_3002 WHERE DepartmentID = e.DepartmentID) AND d.DepartmentName LIKE 'Marketing%';",List the first and last names of employees in departments with names starting with 'Marketing' who have a salary greater than the average salary of other employees in their respective departments.
"CREATE TABLE department_3001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_3002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""DepartmentID"" INTEGER,
  ""JobTitle"" TEXT,
  ""Salary"" REAL,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_3001(""DepartmentID"")
);

CREATE TABLE salary_history_3003 (
  ""SalaryID"" INTEGER PRIMARY KEY,
  ""EmployeeID"" INTEGER,
  ""SalaryAmount"" REAL,
  ""EffectiveDate"" TIMESTAMP,
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_3002(""EmployeeID"")
)
",SELECT AVG(sh.SalaryAmount) FROM salary_history_3003 sh JOIN employee_3002 e ON sh.EmployeeID = e.EmployeeID WHERE e.JobTitle = 'Manager',Calculate the average salary amount for employees with the job title of 'Manager' from their salary history.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001,Retrieve all information about the departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002,Retrieve all information about all employees
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT EmployeeID, FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager'","Find the Employee IDs, first names, and last names of all employees who have the job title of 'Manager.'"
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1,Find the name of the department with DepartmentID 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID = 2",Retrieve the first and last names of employees in department ID 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT * FROM employee_4002 WHERE EmployeeID IN (1, 2, 3)","Retrieve the information for employees with Employee IDs 1, 2, and 3."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT DepartmentID FROM employee_4002,List all unique Department IDs from the employee records.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName","List the first and last names of all employees, sorted by their last names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 3,Count the number of employees who work in department 3.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID",Retrieve the first and last names of employees and their corresponding department names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT FirstName || ' ' || LastName AS FullName FROM employee_4002,Retrieve the full names of all employees by combining their first and last names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE JobTitle LIKE 'Dev%',Count the number of employees whose job title starts with 'Dev'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT DepartmentID, COUNT(*) AS NumEmployees FROM employee_4002 GROUP BY DepartmentID",Count the number of employees in each department and list the department IDs along with the count of employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002 WHERE LastName LIKE 'S%',Retrieve all information about employees whose last names begin with the letter 'S'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT JobTitle FROM employee_4002,List all unique job titles of employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e LEFT JOIN department_4001 d ON e.DepartmentID = d.DepartmentID","Get the first and last names of all employees and the names of their respective departments, including those without a department."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002 WHERE EmployeeID > 5,Retrieve the information of all employees with EmployeeID greater than 5.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT DepartmentID) FROM employee_4002 WHERE DepartmentID IS NOT NULL,Count the number of unique departments with employees listed in the employee table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NULL",Retrieve the first and last names of employees without any associated department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName, JobTitle FROM employee_4002 ORDER BY JobTitle;","Retrieve the first names, last names, and job titles of all employees, and organize the results by their job titles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM department_4001;,Retrieve all details about the departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_4002;,Retrieve all information about every employee in the employee_4002 table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT * FROM employee_projects_4003;,"Retrieve all details about the employee projects, including roles, start dates, and end dates."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE JobTitle = 'Manager';",Find the first and last names of employees who have the job title of Manager.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DepartmentName FROM department_4001 WHERE DepartmentID = 1;,Retrieve the name of the department where the DepartmentID is 1.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID;",Retrieve the first and last names of employees and their respective department names.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(*) FROM employee_4002 WHERE DepartmentID = 2;,Count the number of employees in department ID 2.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE LastName LIKE 'S%';",Find the first and last names of employees whose last names start with the letter 'S'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT JobTitle FROM employee_4002;,Retrieve a list of unique job titles from all employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL;",Retrieve the first and last names of employees who have a department assigned.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName;","List the names of each department along with the count of employees in each department, including departments with no employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 ORDER BY LastName ASC;","Retrieve the first and last names of all employees, sorted alphabetically by their last names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE FirstName IN ('John', 'Jane');",Retrieve the first and last names of employees whose first names are John or Jane.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'IT';",Retrieve the first and last names of employees in the IT department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID;","Retrieve the first and last names of employees and their roles in projects, including employees who are not assigned to any projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT EmployeeID) FROM employee_projects_4003 WHERE Role = 'Developer';,Count the total number of distinct employees who have the role of 'Developer' in their projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS ProjectCount FROM employee_projects_4003 ep GROUP BY ep.EmployeeID;",Count how many projects each employee has worked on and provide their employee IDs along with the project count.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE NOT EXISTS (SELECT 1 FROM employee_projects_4003 p WHERE p.EmployeeID = e.EmployeeID);",List the first and last names of employees who do not have any entries in the employee projects table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE DepartmentID = 3 AND JobTitle = 'Analyst';",Find the first and last names of employees with the job title 'Analyst' who work in department 3.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT d.DepartmentName FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5;,List the names of departments that have more than five employees working in them.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName ORDER BY EmployeeCount DESC","List the names of all departments along with the number of employees in each department, arranged in descending order of the number of employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.JobTitle = 'Manager' ORDER BY e.LastName","List the first and last names of all employees with the job title 'Manager', ordered by their last names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Engineering'",Retrieve the first and last names of employees along with the department name who work in the Engineering department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT JobTitle, COUNT(*) AS NumEmployees FROM employee_4002 GROUP BY JobTitle HAVING COUNT(*) > 5","Find the job titles of employees and the number of employees for each title, including only those job titles with more than five employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",Calculate the average salary of employees in each department and show the department names along with their average salaries.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 p ON e.EmployeeID = p.EmployeeID WHERE p.Role = 'Lead'",Find the first and last names of employees who have the role of 'Lead' in any project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT DISTINCT e.JobTitle FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL,List the unique job titles of employees who belong to a department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 1",Retrieve the first and last names of employees who are involved in more than one project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(e.StartDate) AS LatestEmployeeStartDate FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",List the names of departments along with the most recent start date of employees in those departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Sales'","Retrieve the first names, last names, and job titles of employees who work in the Sales department."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(*) AS NumEmployees FROM employee_4002 e GROUP BY e.JobTitle HAVING AVG(e.Salary) > 70000","Count the number of employees for each job title and include only those job titles where the average salary is greater than 70,000."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2023-01-01'","Retrieve the first and last names of employees along with their roles in projects that started before January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(ep.EmployeeID) AS EmployeesWithProjects FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName",List each department's name along with the total number of employees who are currently assigned to projects in that department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE '%Tech%'",Retrieve the first and last names of employees who work in departments with 'Tech' in their name.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EmployeeID IS NULL","List the first names, last names, and job titles of employees who are not assigned to any projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 3",List the names of departments that have more than three employees and the number of employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID ORDER BY e.LastName, ep.Role","Retrieve the first and last names of employees along with their roles in projects, ordered by the employees' last names and their roles."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.StartDate FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate IS NULL","Retrieve the first and last names of employees who are currently working on projects (where projects have no end date), along with the start dates of those projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(DISTINCT e.EmployeeID) AS TotalEmployees FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalEmployees DESC","List the names of all departments along with the total number of distinct employees working in each department, including departments with no employees, and arrange the result starting from the department with the most employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) as EmployeeCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY EmployeeCount DESC","List the names of all departments along with the count of employees in each department, sorted by the number of employees in descending order."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, e.JobTitle FROM employee_4002 e WHERE e.DepartmentID IS NOT NULL ORDER BY e.LastName","Retrieve the first names, last names, and job titles of employees who are assigned to a department, and list them in order by last name without the ASC keyword."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT JobTitle, COUNT(*) as NumberOfEmployees FROM employee_4002 GROUP BY JobTitle HAVING COUNT(*) > 5","Count the number of employees for each job title, including only those job titles that have more than five employees."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(e.Salary) as AverageSalary FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",Calculate the average salary of employees for each department and show the department names along with their average salaries.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT FirstName, LastName FROM employee_4002 WHERE LastName LIKE 'S%' ORDER BY FirstName","Retrieve the first and last names of employees with last names starting with 'S', sorted by their first names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 p ON e.EmployeeID = p.EmployeeID WHERE p.Role = 'Manager'",Retrieve the first and last names of employees who have the role of 'Manager' in their projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) as TotalEmployees FROM department_4001 d INNER JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 3",Find the names of departments that have more than three employees and count those employees in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(*) AS EmployeeCount FROM employee_4002 e GROUP BY e.JobTitle ORDER BY EmployeeCount DESC",Count the number of employees for each job title and list them in order from the most to the least employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EmployeeID IS NULL",List the first and last names of employees who do not have any entries in the projects table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.JobTitle FROM employee_4002 e WHERE e.JobTitle IN ('Developer', 'Tester') ORDER BY e.FirstName","List the first names and job titles of employees with the job titles Developer or Tester, sorted by their first names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Human Resources'",Retrieve the first and last names of employees who work in the Human Resources department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(ep.StartDate) as LatestStartDate FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName","Find the latest project start date for each department, including the department names and the most recent start date of projects assigned to employees in those departments."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.FirstName NOT LIKE '%a%'",Find the first and last names of employees whose first names do not contain the letter 'a'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(ep.ProjectID) AS TotalProjects FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName","Count the total number of projects for each department, including departments with no projects, and list the department names along with their project counts."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.JobTitle, COUNT(ep.ProjectID) as ProjectsCount FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID, e.JobTitle HAVING COUNT(ep.ProjectID) > 2","Retrieve job titles of employees who have worked on more than two projects, including the count of projects each employee has participated in."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName IN ('Sales', 'Marketing') ORDER BY e.LastName","List the first and last names of employees working in the Sales or Marketing departments, along with the names of those departments, ordered by the employees' last names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, MIN(ep.StartDate) as EarliestProjectStart FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName, e.LastName","Retrieve the first name, last name, and the earliest start date of projects for each employee."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 1",List the first and last names of employees who have worked on more than one project.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT d.DepartmentName FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) < 5,Find the names of departments that have fewer than 5 employees.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE e.LastName LIKE 'B%' ORDER BY d.DepartmentName;","Retrieve the first and last names of employees whose last names start with the letter 'B', along with the names of their departments, and organize the results by department names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName, COUNT(ep.ProjectID) AS ProjectCount FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName, e.LastName, d.DepartmentName ORDER BY ProjectCount DESC","Find the first and last names of employees along with their department names and the count of projects they have been involved in. Organize the results by the number of projects each employee has, starting with those who have the most."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, AVG(CASE WHEN ep.Role = 'Manager' THEN 1 ELSE 0 END) AS AverageManagerCount FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentName","Find the average number of managers in each department, grouped by department name."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.EndDate >= CURRENT_TIMESTAMP)",Retrieve the first and last names of employees who have not any ongoing projects as of now.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount FROM department_4001 d JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 5",Get the names of departments that have more than 5 employees and count how many employees work in each of those departments.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, ep.Role FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate >= '2023-01-01' AND ep.StartDate < '2024-01-01'",Retrieve the first and last names of employees along with their roles in projects that started in the year 2023.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE NOT EXISTS (SELECT 1 FROM employee_projects_4003 ep WHERE ep.EmployeeID = e.EmployeeID)","List the first names and last names of employees along with their department names, excluding those who are currently assigned to any projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Developer' GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 3",Identify the first and last names of employees who have worked on more than three projects as 'Developer'.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, d.DepartmentName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName LIKE 'Sales%'","Retrieve the first and last names of employees working in departments whose names start with 'Sales', along with the corresponding department names."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT ep.EmployeeID, COUNT(ep.ProjectID) AS TotalProjects FROM employee_projects_4003 ep GROUP BY ep.EmployeeID ORDER BY TotalProjects DESC LIMIT 1",Identify the employee who has worked on the highest number of projects and provide their employee ID along with the count of projects they have participated in.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep WHERE ep.EndDate IS NULL)",Find the first and last names of employees who are currently assigned to active projects where the EndDate is null.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, COUNT(ep.Role) AS RoleCount FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.FirstName","Retrieve the first names of employees along with the count of projects they are involved in, specifically for those who are assigned to at least one project."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, COUNT(ep.ProjectID) AS CompletedProjects FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.EndDate < CURRENT_TIMESTAMP GROUP BY d.DepartmentName","Calculate the total number of completed projects for each department by counting how many projects have ended before the current date, and provide the name of each department along with this count."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName, DENSE_RANK() OVER (ORDER BY COUNT(ep.ProjectID) DESC) as ProjectRank FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName","Retrieve the first and last names of employees, ranking them based on the number of projects they are involved in, with the highest number of projects ranked first."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MIN(ep.StartDate) AS EarliestProject FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentID, d.DepartmentName",List the names of all departments and the start date of the earliest project associated with any employee in each department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN department_4001 d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Human Resources'",Find the first and last names of employees who work in the Human Resources department.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT AVG(project_count) FROM (SELECT e.EmployeeID, COUNT(ep.ProjectID) AS project_count FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.StartDate < '2023-01-01' GROUP BY e.EmployeeID) AS project_counts","Calculate the average number of projects that each employee started before January 1, 2023."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT e.FirstName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID WHERE ep.Role = 'Lead' AND ep.StartDate > (SELECT AVG(StartDate) FROM employee_projects_4003),"Find the first names of employees who have the role of 'Lead' on their projects, started their projects after the average start date of all employee projects."
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) < 2",List the first and last names of employees who are currently assigned to fewer than two projects.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(ep.ProjectID) > 5",Retrieve the first and last names of employees who are involved in more than five projects based on their project participation.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
",SELECT COUNT(DISTINCT ProjectID) FROM employee_projects_4003 WHERE EmployeeID IN (SELECT EmployeeID FROM employee_4002 WHERE DepartmentID = 1),Count the number of unique projects that employees in department 1 have participated in.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e WHERE e.EmployeeID NOT IN (SELECT ep.EmployeeID FROM employee_projects_4003 ep)",List the first and last names of employees who do not have any entries in the employee_projects table.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT d.DepartmentName, MAX(ep.EndDate) AS LatestProjectEndDate FROM department_4001 d LEFT JOIN employee_4002 e ON d.DepartmentID = e.DepartmentID LEFT JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY d.DepartmentID, d.DepartmentName",Retrieve the names of departments and the latest project end date for each department based on their employees' project involvement.
"CREATE TABLE department_4001 (
  ""DepartmentID"" INTEGER PRIMARY KEY,
  ""DepartmentName"" TEXT
);

CREATE TABLE employee_4002 (
  ""EmployeeID"" INTEGER PRIMARY KEY,
  ""FirstName"" TEXT,
  ""LastName"" TEXT,
  ""JobTitle"" TEXT,
  ""DepartmentID"" INTEGER,
  FOREIGN KEY (""DepartmentID"") REFERENCES department_4001(""DepartmentID"")
);

CREATE TABLE employee_projects_4003 (
  ""EmployeeID"" INTEGER,
  ""ProjectID"" INTEGER,
  ""Role"" TEXT,
  ""StartDate"" TIMESTAMP,
  ""EndDate"" TIMESTAMP,
  PRIMARY KEY (""EmployeeID"", ""ProjectID""),
  FOREIGN KEY (""EmployeeID"") REFERENCES employee_4002(""EmployeeID""),
  FOREIGN KEY (""ProjectID"") REFERENCES project_2003(""ProjectID"")
)
","SELECT e.FirstName, e.LastName FROM employee_4002 e JOIN employee_projects_4003 ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT ep.ProjectID) > 3",Find the first and last names of employees who have worked on more than three distinct projects.
